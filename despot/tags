!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTION_A	examples/cpp_models/chain/src/chain.h	/^		ACTION_A, ACTION_B$/;"	e	enum:despot::Chain::__anon3
ACTION_B	examples/cpp_models/chain/src/chain.h	/^		ACTION_A, ACTION_B$/;"	e	enum:despot::Chain::__anon3
ADVENTURER_H	examples/cpp_models/adventurer/src/adventurer.h	2;"	d
AEMS	include/despot/solver/aems.h	/^class AEMS: public Solver {$/;"	c	namespace:despot
AEMS	src/solver/aems.cpp	/^AEMS::AEMS(const DSPOMDP* model, BeliefLowerBound* lower_bound,$/;"	f	class:despot::AEMS
AEMS2Likelihood	src/solver/aems.cpp	/^double AEMS::AEMS2Likelihood(QNode* qnode) {$/;"	f	class:despot::AEMS
AEMS_H	include/despot/solver/aems.h	2;"	d
ARG_IGNORE	include/despot/util/optionparser.h	/^	ARG_IGNORE,$/;"	e	enum:despot::option::ArgStatus
ARG_ILLEGAL	include/despot/util/optionparser.h	/^	ARG_ILLEGAL$/;"	e	enum:despot::option::ArgStatus
ARG_NONE	include/despot/util/optionparser.h	/^	ARG_NONE,$/;"	e	enum:despot::option::ArgStatus
ARG_OK	include/despot/util/optionparser.h	/^	ARG_OK,$/;"	e	enum:despot::option::ArgStatus
A_CHECK	examples/cpp_models/simpleNavi/src/simpleNavi.h	/^		A_SAMPLE = 0, A_EAST = 1, A_WEST = 2, A_CHECK = 3$/;"	e	enum:despot::SimpleNavi::__anon7
A_CHECK	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^		A_SAMPLE = 0, A_EAST = 1, A_WEST = 2, A_CHECK = 3$/;"	e	enum:despot::SimpleRockSample::__anon1
A_EAST	examples/cpp_models/simpleNavi/src/simpleNavi.h	/^		A_SAMPLE = 0, A_EAST = 1, A_WEST = 2, A_CHECK = 3$/;"	e	enum:despot::SimpleNavi::__anon7
A_EAST	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^		A_SAMPLE = 0, A_EAST = 1, A_WEST = 2, A_CHECK = 3$/;"	e	enum:despot::SimpleRockSample::__anon1
A_LEFT	examples/cpp_models/adventurer/src/adventurer.h	/^		A_LEFT,$/;"	e	enum:despot::Adventurer::__anon4
A_LEFT	examples/cpp_models/reg_demo/src/reg_demo.h	/^		A_LEFT,$/;"	e	enum:despot::RegDemo::__anon9
A_RIGHT	examples/cpp_models/adventurer/src/adventurer.h	/^		A_RIGHT$/;"	e	enum:despot::Adventurer::__anon4
A_RIGHT	examples/cpp_models/reg_demo/src/reg_demo.h	/^		A_RIGHT$/;"	e	enum:despot::RegDemo::__anon9
A_SAMPLE	examples/cpp_models/simpleNavi/src/simpleNavi.h	/^		A_SAMPLE = 0, A_EAST = 1, A_WEST = 2, A_CHECK = 3$/;"	e	enum:despot::SimpleNavi::__anon7
A_SAMPLE	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^		A_SAMPLE = 0, A_EAST = 1, A_WEST = 2, A_CHECK = 3$/;"	e	enum:despot::SimpleRockSample::__anon1
A_STAY	examples/cpp_models/adventurer/src/adventurer.h	/^		A_STAY,$/;"	e	enum:despot::Adventurer::__anon4
A_STAY	examples/cpp_models/reg_demo/src/reg_demo.h	/^		A_STAY,$/;"	e	enum:despot::RegDemo::__anon9
A_WEST	examples/cpp_models/simpleNavi/src/simpleNavi.h	/^		A_SAMPLE = 0, A_EAST = 1, A_WEST = 2, A_CHECK = 3$/;"	e	enum:despot::SimpleNavi::__anon7
A_WEST	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^		A_SAMPLE = 0, A_EAST = 1, A_WEST = 2, A_CHECK = 3$/;"	e	enum:despot::SimpleRockSample::__anon1
Accept	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlComment::Accept(TiXmlVisitor* visitor) const {$/;"	f	class:despot::util::tinyxml::TiXmlComment
Accept	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlDeclaration::Accept(TiXmlVisitor* visitor) const {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
Accept	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::Accept(TiXmlVisitor* visitor) const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
Accept	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlElement::Accept(TiXmlVisitor* visitor) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
Accept	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlText::Accept(TiXmlVisitor* visitor) const {$/;"	f	class:despot::util::tinyxml::TiXmlText
Accept	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlUnknown::Accept(TiXmlVisitor* visitor) const {$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
Action	examples/cpp_models/adventurer/src/adventurer.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::AdventurerSmartPolicy
Action	examples/cpp_models/chain/src/chain.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::MeanMDPPolicy
Action	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::LocalnaviSmartPolicy
Action	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::LocalnaviSmartPolicy
Action	examples/cpp_models/pocman/src/pocman.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::PocmanSmartPolicy
Action	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::SimpleNaviEastPolicy
Action	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::SimpleRockSampleEastPolicy
Action	examples/cpp_models/tag/src/base/base_tag.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::TagSHRPolicy
Action	examples/cpp_models/tag/src/base/base_tag.cpp	/^	int Action(const vector<State*>& particles,$/;"	f	class:despot::TagHistoryModePolicy
Action	examples/cpp_models/tiger/src/tiger.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::OptimalTigerPolicy
Action	include/despot/core/history.h	/^	int Action(int t) const {$/;"	f	class:despot::History
Action	include/despot/util/optionparser.h	/^struct Parser::Action {$/;"	s	class:despot::option::Parser
Action	src/core/policy.cpp	/^int BlindPolicy::Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::BlindPolicy
Action	src/core/policy.cpp	/^int MMAPStatePolicy::Action(const vector<State*>& particles,$/;"	f	class:despot::MMAPStatePolicy
Action	src/core/policy.cpp	/^int MajorityActionPolicy::Action(const vector<State*>& particles,$/;"	f	class:despot::MajorityActionPolicy
Action	src/core/policy.cpp	/^int ModeStatePolicy::Action(const vector<State*>& particles,$/;"	f	class:despot::ModeStatePolicy
Action	src/core/policy.cpp	/^int RandomPolicy::Action(const vector<State*>& particles,$/;"	f	class:despot::RandomPolicy
Action	src/pomdpx/pomdpx.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::POMDPXGreedyActionPolicy
ActionVar	include/despot/pomdpx/parser/variable.h	75;"	d
Action_Pub	examples/cpp_models/localnavigation/src/localnavigation.h	/^	ros::Publisher   Action_Pub;$/;"	m	class:despot::Navigation
Action_Pub	examples/cpp_models/navigation/src/navigation.h	/^	ros::Publisher   Action_Pub;$/;"	m	class:despot::Navigation
Action_Pub	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	ros::Publisher   Action_Pub;$/;"	m	class:despot::Navigation
Action_Pub	include/despot/evaluator.h	/^	ros::Publisher   Action_Pub;$/;"	m	class:despot::Evaluator
Add	include/despot/core/history.h	/^	void Add(int action, OBS_TYPE obs) {$/;"	f	class:despot::History
Add	include/despot/solver/pomcp.h	/^	inline virtual void Add(int action, OBS_TYPE obs) {$/;"	f	class:despot::POMCPPrior
Add	src/core/node.cpp	/^void QNode::Add(double val) {$/;"	f	class:despot::QNode
Add	src/core/node.cpp	/^void VNode::Add(double val) {$/;"	f	class:despot::VNode
Add	src/util/tinyxml/tinyxml.cpp	/^void TiXmlAttributeSet::Add(TiXmlAttribute* addMe) {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
AddCell	src/util/floor.cpp	/^void Floor::AddCell(Coord coord) {$/;"	f	class:despot::Floor
Advance	src/random_streams.cpp	/^void RandomStreams::Advance() const {$/;"	f	class:despot::RandomStreams
Adventurer	examples/cpp_models/adventurer/src/adventurer.cpp	/^Adventurer::Adventurer(int num_goals) {$/;"	f	class:despot::Adventurer
Adventurer	examples/cpp_models/adventurer/src/adventurer.cpp	/^Adventurer::Adventurer(string params_file) {$/;"	f	class:despot::Adventurer
Adventurer	examples/cpp_models/adventurer/src/adventurer.h	/^class Adventurer: public BeliefMDP,$/;"	c	namespace:despot
AdventurerPOMCPPrior	examples/cpp_models/adventurer/src/adventurer.cpp	/^	AdventurerPOMCPPrior(const DSPOMDP* model) :$/;"	f	class:despot::AdventurerPOMCPPrior
AdventurerPOMCPPrior	examples/cpp_models/adventurer/src/adventurer.cpp	/^class AdventurerPOMCPPrior: public POMCPPrior {$/;"	c	namespace:despot	file:
AdventurerSmartPolicy	examples/cpp_models/adventurer/src/adventurer.cpp	/^	AdventurerSmartPolicy(const DSPOMDP* model, ParticleLowerBound* bound) :$/;"	f	class:despot::AdventurerSmartPolicy
AdventurerSmartPolicy	examples/cpp_models/adventurer/src/adventurer.cpp	/^class AdventurerSmartPolicy: public Policy {$/;"	c	namespace:despot	file:
AdventurerState	examples/cpp_models/adventurer/src/adventurer.cpp	/^AdventurerState::AdventurerState() {$/;"	f	class:despot::AdventurerState
AdventurerState	examples/cpp_models/adventurer/src/adventurer.cpp	/^AdventurerState::AdventurerState(int _state_id) {$/;"	f	class:despot::AdventurerState
AdventurerState	examples/cpp_models/adventurer/src/adventurer.h	/^class AdventurerState: public State {$/;"	c	namespace:despot
Allocate	examples/cpp_models/adventurer/src/adventurer.cpp	/^State* Adventurer::Allocate(int state_id, double weight) const {$/;"	f	class:despot::Adventurer
Allocate	examples/cpp_models/bridge/src/bridge.cpp	/^State* Bridge::Allocate(int state_id, double weight) const {$/;"	f	class:despot::Bridge
Allocate	examples/cpp_models/chain/src/chain.cpp	/^State* Chain::Allocate(int state_id, double weight) const {$/;"	f	class:despot::Chain
Allocate	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^State* Navigation::Allocate(int state_id, double weight) const {$/;"	f	class:despot::Navigation
Allocate	examples/cpp_models/navigation/src/navigation.cpp	/^State* Navigation::Allocate(int state_id, double weight) const {$/;"	f	class:despot::Navigation
Allocate	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^State* Navigation::Allocate(int state_id, double weight) const {$/;"	f	class:despot::Navigation
Allocate	examples/cpp_models/pocman/src/pocman.cpp	/^State* Pocman::Allocate(int state_id, double weight) const {$/;"	f	class:despot::Pocman
Allocate	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^State* RegDemo::Allocate(int state_id, double weight) const {$/;"	f	class:despot::RegDemo
Allocate	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^State* BaseRockSample::Allocate(int state_id, double weight) const {$/;"	f	class:despot::BaseRockSample
Allocate	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^State* SimpleNavi::Allocate(int state_id, double weight) const {$/;"	f	class:despot::SimpleNavi
Allocate	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^State* SimpleRockSample::Allocate(int state_id, double weight) const {$/;"	f	class:despot::SimpleRockSample
Allocate	examples/cpp_models/tag/src/base/base_tag.cpp	/^State* BaseTag::Allocate(int state_id, double weight) const {$/;"	f	class:despot::BaseTag
Allocate	examples/cpp_models/tiger/src/tiger.cpp	/^State* Tiger::Allocate(int state_id, double weight) const {$/;"	f	class:despot::Tiger
Allocate	include/despot/util/memorypool.h	/^	T* Allocate() {$/;"	f	class:despot::MemoryPool
Allocate	src/pomdpx/pomdpx.cpp	/^State* POMDPX::Allocate(int state_id, double weight) const {$/;"	f	class:despot::POMDPX
ApproxInitialParticleSet	src/pomdpx/pomdpx.cpp	/^vector<State*> POMDPX::ApproxInitialParticleSet() const {$/;"	f	class:despot::POMDPX
ApproxMDPChainParticleUpperBound	examples/cpp_models/chain/src/chain.cpp	/^	ApproxMDPChainParticleUpperBound() {$/;"	f	class:despot::ApproxMDPChainParticleUpperBound
ApproxMDPChainParticleUpperBound	examples/cpp_models/chain/src/chain.cpp	/^class ApproxMDPChainParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
ApproxPrior	examples/cpp_models/tag/src/tag/tag.cpp	/^Belief* Tag::ApproxPrior() const {$/;"	f	class:despot::Tag
Arg	include/despot/util/optionparser.h	/^struct Arg {$/;"	s	namespace:despot::option
ArgStatus	include/despot/util/optionparser.h	/^enum ArgStatus {$/;"	g	namespace:despot::option
Attribute	src/util/tinyxml/tinyxml.cpp	/^const char* TiXmlElement::Attribute(const char* name) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
Attribute	src/util/tinyxml/tinyxml.cpp	/^const char* TiXmlElement::Attribute(const char* name, double* d) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
Attribute	src/util/tinyxml/tinyxml.cpp	/^const char* TiXmlElement::Attribute(const char* name, int* i) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
Attribute	src/util/tinyxml/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name ) const$/;"	f	class:despot::util::tinyxml::TiXmlElement
Attribute	src/util/tinyxml/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, double* d ) const$/;"	f	class:despot::util::tinyxml::TiXmlElement
Attribute	src/util/tinyxml/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, int* i ) const$/;"	f	class:despot::util::tinyxml::TiXmlElement
AverageDiscountedRoundReward	src/evaluator.cpp	/^double Evaluator::AverageDiscountedRoundReward() const {$/;"	f	class:despot::Evaluator
AverageUndiscountedRoundReward	src/evaluator.cpp	/^double Evaluator::AverageUndiscountedRoundReward() const {$/;"	f	class:despot::Evaluator
BASEROCKSAMPLE_H	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	2;"	d
BASETAG_H	examples/cpp_models/tag/src/base/base_tag.h	2;"	d
BELIEF_H	include/despot/core/belief.h	2;"	d
BIN	examples/cpp_models/adventurer/Makefile	/^BIN = adventurer$/;"	m
BIN	examples/cpp_models/bridge/Makefile	/^BIN = bridge$/;"	m
BIN	examples/cpp_models/chain/Makefile	/^BIN = chain$/;"	m
BIN	examples/cpp_models/localnavigation/Makefile	/^BIN = navigation $/;"	m
BIN	examples/cpp_models/navigation/Makefile	/^BIN = navigation $/;"	m
BIN	examples/cpp_models/pathfollowing/Makefile	/^BIN = navigation $/;"	m
BIN	examples/cpp_models/pocman/Makefile	/^BIN = pocman $/;"	m
BIN	examples/cpp_models/reg_demo/Makefile	/^BIN = regdemo $/;"	m
BIN	examples/cpp_models/simpleNavi/Makefile	/^BIN = simple_rs $/;"	m
BIN	examples/cpp_models/simple_rock_sample/Makefile	/^BIN = simple_rs $/;"	m
BIN	examples/cpp_models/tiger/Makefile	/^BIN = tiger $/;"	m
BIN	examples/pomdpx_models/Makefile	/^BIN = pomdpx $/;"	m
BITS_PER_READING	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^int LaserTag::BITS_PER_READING = 7;$/;"	m	class:despot::LaserTag	file:
BITS_PER_READING	examples/cpp_models/tag/src/laser_tag/laser_tag.h	/^	static int BITS_PER_READING;$/;"	m	class:despot::LaserTag
BITS_PER_READING	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^int NoisyLaserTag::BITS_PER_READING = 7;$/;"	m	class:despot::NoisyLaserTag	file:
BITS_PER_READING	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.h	/^	static int BITS_PER_READING;$/;"	m	class:despot::NoisyLaserTag
BRIDGELENGTH	examples/cpp_models/bridge/src/bridge.cpp	/^int Bridge::BRIDGELENGTH = 10;$/;"	m	class:despot::Bridge	file:
BRIDGELENGTH	examples/cpp_models/bridge/src/bridge.h	/^	static int LEFT, RIGHT, HELP, BRIDGELENGTH;$/;"	m	class:despot::Bridge
BRIDGE_H	examples/cpp_models/bridge/src/bridge.h	2;"	d
Back	src/random_streams.cpp	/^void RandomStreams::Back() const {$/;"	f	class:despot::RandomStreams
Backup	src/solver/aems.cpp	/^void AEMS::Backup(VNode* vnode) {$/;"	f	class:despot::AEMS
Backup	src/solver/despot.cpp	/^void DESPOT::Backup(VNode* vnode) {$/;"	f	class:despot::DESPOT
BaseRockSample	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^BaseRockSample::BaseRockSample(int size, int rocks) :$/;"	f	class:despot::BaseRockSample
BaseRockSample	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^BaseRockSample::BaseRockSample(string map) {$/;"	f	class:despot::BaseRockSample
BaseRockSample	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^class BaseRockSample: public MDP,$/;"	c	namespace:despot
BaseTag	examples/cpp_models/tag/src/base/base_tag.cpp	/^BaseTag::BaseTag() :$/;"	f	class:despot::BaseTag
BaseTag	examples/cpp_models/tag/src/base/base_tag.cpp	/^BaseTag::BaseTag(string params_file) :$/;"	f	class:despot::BaseTag
BaseTag	examples/cpp_models/tag/src/base/base_tag.h	/^class BaseTag: public MDP,$/;"	c	namespace:despot
Belief	include/despot/core/belief.h	/^class Belief {$/;"	c	namespace:despot
Belief	src/core/belief.cpp	/^Belief::Belief(const DSPOMDP* model) :$/;"	f	class:despot::Belief
BeliefLowerBound	include/despot/core/lower_bound.h	/^class BeliefLowerBound: public Solver {$/;"	c	namespace:despot
BeliefLowerBound	src/core/lower_bound.cpp	/^BeliefLowerBound::BeliefLowerBound(const DSPOMDP* model, Belief* belief) :$/;"	f	class:despot::BeliefLowerBound
BeliefMDP	include/despot/core/pomdp.h	/^class BeliefMDP: public DSPOMDP {$/;"	c	namespace:despot
BeliefMDP	src/core/pomdp.cpp	/^BeliefMDP::BeliefMDP() {$/;"	f	class:despot::BeliefMDP
BeliefUpperBound	include/despot/core/upper_bound.h	/^class BeliefUpperBound {$/;"	c	namespace:despot
BeliefUpperBound	src/core/upper_bound.cpp	/^BeliefUpperBound::BeliefUpperBound() {$/;"	f	class:despot::BeliefUpperBound
Blank	src/util/tinyxml/tinyxmlparser.cpp	/^bool TiXmlText::Blank() const {$/;"	f	class:despot::util::tinyxml::TiXmlText
BlindPolicy	include/despot/core/policy.h	/^class BlindPolicy: public Policy {$/;"	c	namespace:despot
BlindPolicy	src/core/policy.cpp	/^BlindPolicy::BlindPolicy(const DSPOMDP* model, int action, ParticleLowerBound* $/;"	f	class:despot::BlindPolicy
Bridge	examples/cpp_models/bridge/src/bridge.cpp	/^Bridge::Bridge() {$/;"	f	class:despot::Bridge
Bridge	examples/cpp_models/bridge/src/bridge.h	/^class Bridge: public BeliefMDP {$/;"	c	namespace:despot
BridgePOMCPPrior	examples/cpp_models/bridge/src/bridge.cpp	/^	BridgePOMCPPrior(const DSPOMDP* model) :$/;"	f	class:despot::BridgePOMCPPrior
BridgePOMCPPrior	examples/cpp_models/bridge/src/bridge.cpp	/^class BridgePOMCPPrior: public POMCPPrior {$/;"	c	namespace:despot	file:
BridgeState	examples/cpp_models/bridge/src/bridge.cpp	/^BridgeState::BridgeState() :$/;"	f	class:despot::BridgeState
BridgeState	examples/cpp_models/bridge/src/bridge.cpp	/^BridgeState::BridgeState(int _position) :$/;"	f	class:despot::BridgeState
BridgeState	examples/cpp_models/bridge/src/bridge.h	/^class BridgeState: public State {$/;"	c	namespace:despot
CDATA	include/despot/util/tinyxml/tinyxml.h	/^	bool CDATA() const {$/;"	f	class:despot::util::tinyxml::TiXmlText
CHAIN_H	examples/cpp_models/chain/src/chain.h	2;"	d
CLIENT_H_	include/despot/ippc/client.h	2;"	d
COMMENT	include/despot/util/tinyxml/tinyxml.h	/^		DOCUMENT, ELEMENT, COMMENT, UNKNOWN, TEXT, DECLARATION, TYPECOUNT$/;"	e	enum:despot::util::tinyxml::TiXmlNode::NodeType
CONFIG_H	include/despot/config.h	2;"	d
COORD_H	include/despot/util/coord.h	2;"	d
CPPEXAMPLE	Makefile	/^CPPEXAMPLE = $(addprefix examples\/cpp_models\/, $(shell ls examples\/cpp_models))$/;"	m
CPT	include/despot/pomdpx/parser/function.h	/^class CPT: public Function { \/\/ Conditional Probability Table$/;"	c	namespace:despot
CStr	include/despot/util/tinyxml/tinyxml.h	/^	const char* CStr() {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
CXX	Makefile	/^CXX = g++$/;"	m
CXX	examples/cpp_models/adventurer/Makefile	/^CXX = g++$/;"	m
CXX	examples/cpp_models/bridge/Makefile	/^CXX = g++$/;"	m
CXX	examples/cpp_models/chain/Makefile	/^CXX = g++$/;"	m
CXX	examples/cpp_models/localnavigation/Makefile	/^CXX = g++$/;"	m
CXX	examples/cpp_models/navigation/Makefile	/^CXX = g++$/;"	m
CXX	examples/cpp_models/pathfollowing/Makefile	/^CXX = g++$/;"	m
CXX	examples/cpp_models/pocman/Makefile	/^CXX = g++$/;"	m
CXX	examples/cpp_models/reg_demo/Makefile	/^CXX = g++$/;"	m
CXX	examples/cpp_models/rock_sample/Makefile	/^CXX = g++$/;"	m
CXX	examples/cpp_models/simpleNavi/Makefile	/^CXX = g++$/;"	m
CXX	examples/cpp_models/simple_rock_sample/Makefile	/^CXX = g++$/;"	m
CXX	examples/cpp_models/tag/Makefile	/^CXX = g++$/;"	m
CXX	examples/cpp_models/tiger/Makefile	/^CXX = g++$/;"	m
CXX	examples/pomdpx_models/Makefile	/^CXX = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -O3 -c -Wall -Wno-sign-compare -fpic $(INCL) $(GPROF)$/;"	m
Chain	examples/cpp_models/chain/src/chain.cpp	/^Chain::Chain() {$/;"	f	class:despot::Chain
Chain	examples/cpp_models/chain/src/chain.cpp	/^Chain::Chain(string fn) {$/;"	f	class:despot::Chain
Chain	examples/cpp_models/chain/src/chain.h	/^class Chain: public DSPOMDP {$/;"	c	namespace:despot
ChainState	examples/cpp_models/chain/src/chain.cpp	/^ChainState::ChainState() :$/;"	f	class:despot::ChainState
ChainState	examples/cpp_models/chain/src/chain.h	/^class ChainState: public State {$/;"	c	namespace:despot
Check	src/pomdpx/parser/parser.cpp	/^void Parser::Check() {$/;"	f	class:despot::Parser
CheckAllPedCollision	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^bool Navigation::CheckAllPedCollision(const NavigationState& navstate, const Coord& pos) const {$/;"	f	class:despot::Navigation
CheckArg	include/despot/util/optionparser.h	/^typedef ArgStatus (*CheckArg)(const Option& option, bool msg);$/;"	t	namespace:despot::option
CheckDESPOT	src/solver/despot.cpp	/^double DESPOT::CheckDESPOT(const VNode* vnode, double regularized_value) {$/;"	f	class:despot::DESPOT
CheckDESPOTSTAR	src/solver/despot.cpp	/^double DESPOT::CheckDESPOTSTAR(const VNode* vnode, double regularized_value) {$/;"	f	class:despot::DESPOT
CheckFlag	include/despot/util/util.h	/^inline bool CheckFlag(int flags, int bit) {$/;"	f	namespace:despot
CheckPedCollision	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^bool Navigation::CheckPedCollision(NavigationState& navstate, int g ,int step_col) const {$/;"	f	class:despot::Navigation
CheckPosCollision	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^bool Navigation::CheckPosCollision(const Coord& currentPos, NavigationState& navstate, int step_col) const$/;"	f	class:despot::Navigation
Child	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlHandle Child( const std::string& _value, int index ) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
Child	src/core/node.cpp	/^QNode* VNode::Child(int action) {$/;"	f	class:despot::VNode
Child	src/core/node.cpp	/^VNode* QNode::Child(OBS_TYPE obs) {$/;"	f	class:despot::QNode
Child	src/core/node.cpp	/^const QNode* VNode::Child(int action) const {$/;"	f	class:despot::VNode
Child	src/util/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child(const char* value, int count) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
Child	src/util/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child(int count) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
ChildElement	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlHandle ChildElement( const std::string& _value, int index ) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
ChildElement	src/util/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement(const char* value, int count) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
ChildElement	src/util/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement(int count) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
ChildSize	src/pomdpx/parser/function.cpp	/^int Function::ChildSize() const {$/;"	f	class:despot::Function
Chunk	include/despot/util/memorypool.h	/^	struct Chunk {$/;"	s	class:despot::MemoryPool
Clear	include/despot/util/tinyxml/tinyxml.h	/^	void Clear() {$/;"	f	struct:despot::util::tinyxml::TiXmlCursor
Clear	src/util/tinyxml/tinyxml.cpp	/^void TiXmlNode::Clear() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ClearAllocated	include/despot/util/memorypool.h	/^	void ClearAllocated() {$/;"	f	class:despot::MemoryObject
ClearError	include/despot/util/tinyxml/tinyxml.h	/^	void ClearError() {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
ClearThis	src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::ClearThis() {$/;"	f	class:despot::util::tinyxml::TiXmlElement
Client	include/despot/ippc/client.h	/^class Client {$/;"	c	namespace:despot
Client	src/ippc/client.cpp	/^Client::Client(void) {$/;"	f	class:despot::Client
Clone	src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlComment::Clone() const {$/;"	f	class:despot::util::tinyxml::TiXmlComment
Clone	src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlDeclaration::Clone() const {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
Clone	src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlDocument::Clone() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
Clone	src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlElement::Clone() const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
Clone	src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlText::Clone() const {$/;"	f	class:despot::util::tinyxml::TiXmlText
Clone	src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlUnknown::Clone() const {$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
Column	include/despot/util/tinyxml/tinyxml.h	/^	int Column() const {$/;"	f	class:despot::util::tinyxml::TiXmlBase
Compare	src/solver/despot.cpp	/^void DESPOT::Compare() {$/;"	f	class:despot::DESPOT
CompareFirst	include/despot/util/util.h	/^bool CompareFirst(std::pair<K, V> p1, std::pair<K, V> p2) {$/;"	f	namespace:despot
CompareSecond	include/despot/util/util.h	/^bool CompareSecond(std::pair<K, V> p1, std::pair<K, V> p2) {$/;"	f	namespace:despot
Compass	include/despot/util/coord.h	/^struct Compass {$/;"	s	namespace:despot
CompassString	include/despot/util/coord.h	/^	static const std::string CompassString[];$/;"	m	struct:despot::Compass
CompassString	src/util/coord.cpp	/^const string Compass::CompassString[] = { "South", "East", "North", "West",$/;"	m	class:despot::Compass	file:
ComputeActionValue	src/core/mdp.cpp	/^double MDP::ComputeActionValue(const ParticleBelief* belief,$/;"	f	class:despot::MDP
ComputeBlindAlpha	src/core/mdp.cpp	/^void MDP::ComputeBlindAlpha() {$/;"	f	class:despot::MDP
ComputeConstrainedMaximum	include/despot/pomdpx/parser/function.h	/^	inline virtual double ComputeConstrainedMaximum(const NamedVar* var,$/;"	f	class:despot::HierarchyCPT
ComputeConstrainedMaximum	src/pomdpx/parser/function.cpp	/^double Function::ComputeConstrainedMaximum(const NamedVar* var,$/;"	f	class:despot::Function
ComputeConstrainedMinimum	include/despot/pomdpx/parser/function.h	/^	inline virtual double ComputeConstrainedMinimum(const NamedVar* var,$/;"	f	class:despot::HierarchyCPT
ComputeConstrainedMinimum	src/pomdpx/parser/function.cpp	/^double Function::ComputeConstrainedMinimum(const NamedVar* var,$/;"	f	class:despot::Function
ComputeCurrentIndex	src/pomdpx/parser/function.cpp	/^int HierarchyCPT::ComputeCurrentIndex(double& sum) const {$/;"	f	class:despot::HierarchyCPT
ComputeCurrentIndex	src/pomdpx/parser/function.cpp	/^int TabularCPT::ComputeCurrentIndex(double& sum) const {$/;"	f	class:despot::TabularCPT
ComputeCurrentIndex	src/pomdpx/parser/variable.cpp	/^int Variable::ComputeCurrentIndex(const vector<NamedVar*>& vars) {$/;"	f	class:despot::Variable
ComputeCurrentIndex	src/pomdpx/parser/variable.cpp	/^int Variable::ComputeCurrentIndex(const vector<Variable*>& vars) {$/;"	f	class:despot::Variable
ComputeDefaultActions	examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::ComputeDefaultActions(string type) {$/;"	f	class:despot::Adventurer
ComputeDefaultActions	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::ComputeDefaultActions(string type) {$/;"	f	class:despot::Navigation
ComputeDefaultActions	examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::ComputeDefaultActions(string type) {$/;"	f	class:despot::Navigation
ComputeDefaultActions	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::ComputeDefaultActions(string type) {$/;"	f	class:despot::Navigation
ComputeDefaultActions	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::ComputeDefaultActions(string type) const {$/;"	f	class:despot::RegDemo
ComputeDefaultActions	examples/cpp_models/tag/src/base/base_tag.cpp	/^void BaseTag::ComputeDefaultActions(string type) const {$/;"	f	class:despot::BaseTag
ComputeDefaultActions	src/pomdpx/pomdpx.cpp	/^void POMDPX::ComputeDefaultActions(string type) const {$/;"	f	class:despot::POMDPX
ComputeDistances	src/util/floor.cpp	/^vector<double> Floor::ComputeDistances(int source) {$/;"	f	class:despot::Floor
ComputeDistances	src/util/floor.cpp	/^void Floor::ComputeDistances() {$/;"	f	class:despot::Floor
ComputeIndex	include/despot/pomdpx/parser/function.h	/^	virtual int ComputeIndex(int pid, double& sum) const {$/;"	f	class:despot::HierarchyCPT
ComputeIndex	src/pomdpx/parser/function.cpp	/^int TabularCPT::ComputeIndex(int pid, double& sum) const {$/;"	f	class:despot::TabularCPT
ComputeIndex	src/pomdpx/parser/parser.cpp	/^int Parser::ComputeIndex(const vector<int>& state) const {$/;"	f	class:despot::Parser
ComputeIndexVec	src/pomdpx/parser/variable.cpp	/^vector<int> Variable::ComputeIndexVec(const vector<NamedVar*>& vars,$/;"	f	class:despot::Variable
ComputeIndexVec	src/pomdpx/parser/variable.cpp	/^vector<int> Variable::ComputeIndexVec(const vector<StateVar*>& vars,$/;"	f	class:despot::Variable
ComputeIndexVec	src/pomdpx/parser/variable.cpp	/^vector<int> Variable::ComputeIndexVec(const vector<Variable*>& vars,$/;"	f	class:despot::Variable
ComputeMaxRewardAction	src/pomdpx/parser/parser.cpp	/^ValuedAction Parser::ComputeMaxRewardAction() const {$/;"	f	class:despot::Parser
ComputeMinRewardAction	src/pomdpx/parser/parser.cpp	/^ValuedAction Parser::ComputeMinRewardAction() const {$/;"	f	class:despot::Parser
ComputeMode	examples/cpp_models/tag/src/base/base_tag.cpp	/^	State ComputeMode(Belief* belief) const {$/;"	f	class:despot::TagHistoryModePolicy
ComputeNumOfEntries	src/pomdpx/parser/parser.cpp	/^int Parser::ComputeNumOfEntries(const vector<string>& instance,$/;"	f	class:despot::Parser
ComputeOptimalPolicyUsingVI	src/core/mdp.cpp	/^void MDP::ComputeOptimalPolicyUsingVI() {$/;"	f	class:despot::MDP
ComputeOptimalSamplingPolicy	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^vector<ValuedAction>& BaseRockSample::ComputeOptimalSamplingPolicy() const {$/;"	f	class:despot::BaseRockSample
ComputeOptimalValue	examples/cpp_models/chain/src/chain.cpp	/^void Chain::ComputeOptimalValue(ChainState& state) const {$/;"	f	class:despot::Chain
ComputePreference	examples/cpp_models/adventurer/src/adventurer.cpp	/^	void ComputePreference(const State& state) {$/;"	f	class:despot::AdventurerPOMCPPrior
ComputePreference	examples/cpp_models/bridge/src/bridge.cpp	/^	void ComputePreference(const State& state) {$/;"	f	class:despot::BridgePOMCPPrior
ComputePreference	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	void ComputePreference(const State& state) {$/;"	f	class:despot::LocalNaviPOMCPPrior
ComputePreference	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	void ComputePreference(const State& state) {$/;"	f	class:despot::LocalNaviPOMCPPrior
ComputePreference	examples/cpp_models/pocman/src/pocman.cpp	/^	void ComputePreference(const State& state) {$/;"	f	class:despot::PocmanPOMCPPrior
ComputePreference	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	void ComputePreference(const State& state) {$/;"	f	class:despot::RockSamplePOMCPPrior
ComputePreference	examples/cpp_models/tag/src/base/base_tag.cpp	/^	void ComputePreference(const State& state) {$/;"	f	class:despot::TagPOMCPPrior
ComputePreference	src/solver/pomcp.cpp	/^void UniformPOMCPPrior::ComputePreference(const State& state) {$/;"	f	class:despot::UniformPOMCPPrior
ComputeShortestPath	src/util/floor.cpp	/^vector<int> Floor::ComputeShortestPath(int start, int end) const {$/;"	f	class:despot::Floor
ComputeSparseChildDistribution	src/pomdpx/parser/function.cpp	/^void HierarchyCPT::ComputeSparseChildDistribution() {$/;"	f	class:despot::HierarchyCPT
ComputeSparseChildDistribution	src/pomdpx/parser/function.cpp	/^void TabularCPT::ComputeSparseChildDistribution() {$/;"	f	class:despot::TabularCPT
ComputeState	src/pomdpx/parser/parser.cpp	/^vector<int> Parser::ComputeState(double random) const {$/;"	f	class:despot::Parser
ComputeState	src/pomdpx/parser/parser.cpp	/^vector<int> Parser::ComputeState(int index) const {$/;"	f	class:despot::Parser
ComputeTopTransitions	src/pomdpx/parser/parser.cpp	/^vector<pair<vector<int>, double> > Parser::ComputeTopTransitions($/;"	f	class:despot::Parser
Config	include/despot/config.h	/^	Config() :$/;"	f	struct:despot::Config
Config	include/despot/config.h	/^struct Config {$/;"	s	namespace:despot
Construct	include/despot/util/memorypool.h	/^	T* Construct() {$/;"	f	class:despot::MemoryPool
ConstructTree	src/solver/despot.cpp	/^VNode* DESPOT::ConstructTree(vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::DESPOT
ConstructTree	src/solver/pomcp.cpp	/^VNode* DPOMCP::ConstructTree(vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::DPOMCP
ConvertUTF32ToUTF8	src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlBase::ConvertUTF32ToUTF8(unsigned long input, char* output,$/;"	f	class:despot::util::tinyxml::TiXmlBase
Coord	include/despot/util/coord.h	/^struct Coord {$/;"	s	namespace:despot
Coord	src/util/coord.cpp	/^Coord::Coord() :$/;"	f	class:despot::Coord
Coord	src/util/coord.cpp	/^Coord::Coord(int _x, int _y) :$/;"	f	class:despot::Coord
CoordToIndex	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^int BaseRockSample::CoordToIndex(Coord c) const {$/;"	f	class:despot::BaseRockSample
Copy	examples/cpp_models/adventurer/src/adventurer.cpp	/^State* Adventurer::Copy(const State* particle) const {$/;"	f	class:despot::Adventurer
Copy	examples/cpp_models/bridge/src/bridge.cpp	/^State* Bridge::Copy(const State* particle) const {$/;"	f	class:despot::Bridge
Copy	examples/cpp_models/chain/src/chain.cpp	/^State* Chain::Copy(const State* particle) const {$/;"	f	class:despot::Chain
Copy	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^State* Navigation::Copy(const State* particle) const {$/;"	f	class:despot::Navigation
Copy	examples/cpp_models/navigation/src/navigation.cpp	/^State* Navigation::Copy(const State* particle) const {$/;"	f	class:despot::Navigation
Copy	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^State* Navigation::Copy(const State* particle) const {$/;"	f	class:despot::Navigation
Copy	examples/cpp_models/pocman/src/pocman.cpp	/^State* Pocman::Copy(const State* particle) const {$/;"	f	class:despot::Pocman
Copy	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^State* RegDemo::Copy(const State* particle) const {$/;"	f	class:despot::RegDemo
Copy	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^State* BaseRockSample::Copy(const State* particle) const {$/;"	f	class:despot::BaseRockSample
Copy	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^State* SimpleNavi::Copy(const State* particle) const {$/;"	f	class:despot::SimpleNavi
Copy	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^State* SimpleRockSample::Copy(const State* particle) const {$/;"	f	class:despot::SimpleRockSample
Copy	examples/cpp_models/tag/src/base/base_tag.cpp	/^State* BaseTag::Copy(const State* particle) const {$/;"	f	class:despot::BaseTag
Copy	examples/cpp_models/tiger/src/tiger.cpp	/^State* Tiger::Copy(const State* particle) const {$/;"	f	class:despot::Tiger
Copy	src/core/pomdp.cpp	/^vector<State*> DSPOMDP::Copy(const vector<State*>& particles) const {$/;"	f	class:despot::DSPOMDP
Copy	src/pomdpx/pomdpx.cpp	/^State* POMDPX::Copy(const State* particle) const {$/;"	f	class:despot::POMDPX
CopyTo	src/util/tinyxml/tinyxml.cpp	/^void TiXmlComment::CopyTo(TiXmlComment* target) const {$/;"	f	class:despot::util::tinyxml::TiXmlComment
CopyTo	src/util/tinyxml/tinyxml.cpp	/^void TiXmlDeclaration::CopyTo(TiXmlDeclaration* target) const {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
CopyTo	src/util/tinyxml/tinyxml.cpp	/^void TiXmlDocument::CopyTo(TiXmlDocument* target) const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
CopyTo	src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::CopyTo(TiXmlElement* target) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
CopyTo	src/util/tinyxml/tinyxml.cpp	/^void TiXmlNode::CopyTo(TiXmlNode* target) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
CopyTo	src/util/tinyxml/tinyxml.cpp	/^void TiXmlText::CopyTo(TiXmlText* target) const {$/;"	f	class:despot::util::tinyxml::TiXmlText
CopyTo	src/util/tinyxml/tinyxml.cpp	/^void TiXmlUnknown::CopyTo(TiXmlUnknown* target) const {$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
Costmap_Pub	examples/cpp_models/localnavigation/src/localnavigation.h	/^	ros::Publisher   Costmap_Pub;$/;"	m	class:despot::Navigation
Costmap_Pub	examples/cpp_models/navigation/src/navigation.h	/^	ros::Publisher   Costmap_Pub;$/;"	m	class:despot::Navigation
Costmap_Pub	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	ros::Publisher   Costmap_Pub;$/;"	m	class:despot::Navigation
Count	src/solver/pomcp.cpp	/^int POMCP::Count(const VNode* vnode) {$/;"	f	class:despot::POMCP
CountOptionsAction	include/despot/util/optionparser.h	/^	CountOptionsAction(unsigned* buffer_max_) :$/;"	f	class:despot::option::Stats::CountOptionsAction
CountOptionsAction	include/despot/util/optionparser.h	/^class Stats::CountOptionsAction: public Parser::Action {$/;"	c	class:despot::option::Stats
CountRound	examples/cpp_models/localnavigation/src/localnavigation.h	/^	int CountRound(){round_num++; return round_num;}$/;"	f	class:despot::Navigation
CreateActionVar	src/pomdpx/parser/parser.cpp	/^ActionVar Parser::CreateActionVar(TiXmlElement* e_ActionVar) {$/;"	f	class:despot::Parser
CreateBeliefLowerBound	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^BeliefLowerBound* BaseRockSample::CreateBeliefLowerBound(string name) const {$/;"	f	class:despot::BaseRockSample
CreateBeliefLowerBound	examples/cpp_models/tag/src/base/base_tag.cpp	/^BeliefLowerBound* BaseTag::CreateBeliefLowerBound(string name) const {$/;"	f	class:despot::BaseTag
CreateBeliefLowerBound	src/core/pomdp.cpp	/^BeliefLowerBound* BeliefMDP::CreateBeliefLowerBound(string name) const {$/;"	f	class:despot::BeliefMDP
CreateBeliefUpperBound	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^BeliefUpperBound* BaseRockSample::CreateBeliefUpperBound(string name) const {$/;"	f	class:despot::BaseRockSample
CreateBeliefUpperBound	examples/cpp_models/tag/src/base/base_tag.cpp	/^BeliefUpperBound* BaseTag::CreateBeliefUpperBound(string name) const {$/;"	f	class:despot::BaseTag
CreateBeliefUpperBound	src/core/pomdp.cpp	/^BeliefUpperBound* BeliefMDP::CreateBeliefUpperBound(string name) const {$/;"	f	class:despot::BeliefMDP
CreateHierarchyObsFunction	src/pomdpx/parser/parser.cpp	/^HierarchyCPT* Parser::CreateHierarchyObsFunction(TiXmlElement* e_CondProb) {$/;"	f	class:despot::Parser
CreateHierarchyStateTransition	src/pomdpx/parser/parser.cpp	/^HierarchyCPT* Parser::CreateHierarchyStateTransition(TiXmlElement* e_CondProb) {$/;"	f	class:despot::Parser
CreateInitialBelief	src/pomdpx/parser/parser.cpp	/^TabularCPT Parser::CreateInitialBelief(TiXmlElement* e_CondProb) {$/;"	f	class:despot::Parser
CreateNoisyVariant	src/pomdpx/parser/function.cpp	/^CPT* HierarchyCPT::CreateNoisyVariant(double noise) const {$/;"	f	class:despot::HierarchyCPT
CreateNoisyVariant	src/pomdpx/parser/function.cpp	/^CPT* TabularCPT::CreateNoisyVariant(double noise) const {$/;"	f	class:despot::TabularCPT
CreateObsFunction	src/pomdpx/parser/parser.cpp	/^CPT* Parser::CreateObsFunction(TiXmlElement* e_CondProb) {$/;"	f	class:despot::Parser
CreateObsVar	src/pomdpx/parser/parser.cpp	/^ObsVar Parser::CreateObsVar(TiXmlElement* e_ObsVar) {$/;"	f	class:despot::Parser
CreatePOMCPPrior	examples/cpp_models/adventurer/src/adventurer.cpp	/^POMCPPrior* Adventurer::CreatePOMCPPrior(string name) const {$/;"	f	class:despot::Adventurer
CreatePOMCPPrior	examples/cpp_models/bridge/src/bridge.cpp	/^POMCPPrior* Bridge::CreatePOMCPPrior(string name) const {$/;"	f	class:despot::Bridge
CreatePOMCPPrior	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^POMCPPrior* Navigation::CreatePOMCPPrior(string name) const {$/;"	f	class:despot::Navigation
CreatePOMCPPrior	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^POMCPPrior* Navigation::CreatePOMCPPrior(string name) const {$/;"	f	class:despot::Navigation
CreatePOMCPPrior	examples/cpp_models/pocman/src/pocman.cpp	/^POMCPPrior* Pocman::CreatePOMCPPrior(string name) const {$/;"	f	class:despot::Pocman
CreatePOMCPPrior	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^POMCPPrior* BaseRockSample::CreatePOMCPPrior(string name) const {$/;"	f	class:despot::BaseRockSample
CreatePOMCPPrior	examples/cpp_models/tag/src/base/base_tag.cpp	/^POMCPPrior* BaseTag::CreatePOMCPPrior(string name) const {$/;"	f	class:despot::BaseTag
CreatePOMCPPrior	src/core/pomdp.cpp	/^POMCPPrior* DSPOMDP::CreatePOMCPPrior(string name) const {$/;"	f	class:despot::DSPOMDP
CreateParticleLowerBound	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^ParticleLowerBound* Navigation::CreateParticleLowerBound(string name) const {$/;"	f	class:despot::Navigation
CreateParticleLowerBound	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^ParticleLowerBound* Navigation::CreateParticleLowerBound(string name) const {$/;"	f	class:despot::Navigation
CreateParticleLowerBound	examples/cpp_models/pocman/src/pocman.cpp	/^ParticleLowerBound* Pocman::CreateParticleLowerBound(string name) const {$/;"	f	class:despot::Pocman
CreateParticleLowerBound	src/core/pomdp.cpp	/^ParticleLowerBound* DSPOMDP::CreateParticleLowerBound(string name) const {$/;"	f	class:despot::DSPOMDP
CreateParticleUpperBound	examples/cpp_models/adventurer/src/adventurer.cpp	/^ParticleUpperBound* Adventurer::CreateParticleUpperBound(string name) const {$/;"	f	class:despot::Adventurer
CreateParticleUpperBound	examples/cpp_models/navigation/src/navigation.cpp	/^ParticleUpperBound* Navigation::CreateParticleUpperBound(string name) const {$/;"	f	class:despot::Navigation
CreateParticleUpperBound	examples/cpp_models/tag/src/base/base_tag.cpp	/^ParticleUpperBound* BaseTag::CreateParticleUpperBound(string name) const {$/;"	f	class:despot::BaseTag
CreateParticleUpperBound	src/core/pomdp.cpp	/^ParticleUpperBound* DSPOMDP::CreateParticleUpperBound(string name) const {$/;"	f	class:despot::DSPOMDP
CreateParticleUpperBound	src/pomdpx/pomdpx.cpp	/^ParticleUpperBound* POMDPX::CreateParticleUpperBound(string name) const {$/;"	f	class:despot::POMDPX
CreateRewardFunction	src/pomdpx/parser/parser.cpp	/^Function Parser::CreateRewardFunction(TiXmlElement* e_Func) {$/;"	f	class:despot::Parser
CreateRewardVar	src/pomdpx/parser/parser.cpp	/^RewardVar Parser::CreateRewardVar(TiXmlElement* e_RewardVar) {$/;"	f	class:despot::Parser
CreateScenarioLowerBound	examples/cpp_models/adventurer/src/adventurer.cpp	/^ScenarioLowerBound* Adventurer::CreateScenarioLowerBound(string name,$/;"	f	class:despot::Adventurer
CreateScenarioLowerBound	examples/cpp_models/bridge/src/bridge.cpp	/^ScenarioLowerBound* Bridge::CreateScenarioLowerBound(string name,$/;"	f	class:despot::Bridge
CreateScenarioLowerBound	examples/cpp_models/chain/src/chain.cpp	/^ScenarioLowerBound* Chain::CreateScenarioLowerBound(string name,$/;"	f	class:despot::Chain
CreateScenarioLowerBound	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^ScenarioLowerBound* Navigation::CreateScenarioLowerBound(string name,$/;"	f	class:despot::Navigation
CreateScenarioLowerBound	examples/cpp_models/navigation/src/navigation.cpp	/^ScenarioLowerBound* Navigation::CreateScenarioLowerBound(string name,$/;"	f	class:despot::Navigation
CreateScenarioLowerBound	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^ScenarioLowerBound* Navigation::CreateScenarioLowerBound(string name,$/;"	f	class:despot::Navigation
CreateScenarioLowerBound	examples/cpp_models/pocman/src/pocman.cpp	/^ScenarioLowerBound* Pocman::CreateScenarioLowerBound(string name,$/;"	f	class:despot::Pocman
CreateScenarioLowerBound	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^ScenarioLowerBound* RegDemo::CreateScenarioLowerBound(string name,$/;"	f	class:despot::RegDemo
CreateScenarioLowerBound	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^ScenarioLowerBound* BaseRockSample::CreateScenarioLowerBound(string name, string$/;"	f	class:despot::BaseRockSample
CreateScenarioLowerBound	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^ScenarioLowerBound* SimpleNavi::CreateScenarioLowerBound(string name,$/;"	f	class:despot::SimpleNavi
CreateScenarioLowerBound	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^ScenarioLowerBound* SimpleRockSample::CreateScenarioLowerBound(string name,$/;"	f	class:despot::SimpleRockSample
CreateScenarioLowerBound	examples/cpp_models/tag/src/base/base_tag.cpp	/^ScenarioLowerBound* BaseTag::CreateScenarioLowerBound(string name, string$/;"	f	class:despot::BaseTag
CreateScenarioLowerBound	examples/cpp_models/tiger/src/tiger.cpp	/^ScenarioLowerBound* Tiger::CreateScenarioLowerBound(string name,$/;"	f	class:despot::Tiger
CreateScenarioLowerBound	src/core/pomdp.cpp	/^ScenarioLowerBound* DSPOMDP::CreateScenarioLowerBound(string name, string$/;"	f	class:despot::DSPOMDP
CreateScenarioLowerBound	src/pomdpx/pomdpx.cpp	/^ScenarioLowerBound* POMDPX::CreateScenarioLowerBound(string name,$/;"	f	class:despot::POMDPX
CreateScenarioUpperBound	examples/cpp_models/adventurer/src/adventurer.cpp	/^ScenarioUpperBound* Adventurer::CreateScenarioUpperBound(string name,$/;"	f	class:despot::Adventurer
CreateScenarioUpperBound	examples/cpp_models/chain/src/chain.cpp	/^ScenarioUpperBound* Chain::CreateScenarioUpperBound(string name,$/;"	f	class:despot::Chain
CreateScenarioUpperBound	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^ScenarioUpperBound* Navigation::CreateScenarioUpperBound(string name,$/;"	f	class:despot::Navigation
CreateScenarioUpperBound	examples/cpp_models/navigation/src/navigation.cpp	/^ScenarioUpperBound* Navigation::CreateScenarioUpperBound(string name,$/;"	f	class:despot::Navigation
CreateScenarioUpperBound	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^ScenarioUpperBound* Navigation::CreateScenarioUpperBound(string name,$/;"	f	class:despot::Navigation
CreateScenarioUpperBound	examples/cpp_models/pocman/src/pocman.cpp	/^ScenarioUpperBound* Pocman::CreateScenarioUpperBound(string name,$/;"	f	class:despot::Pocman
CreateScenarioUpperBound	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^ScenarioUpperBound* RegDemo::CreateScenarioUpperBound(string name,$/;"	f	class:despot::RegDemo
CreateScenarioUpperBound	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^ScenarioUpperBound* BaseRockSample::CreateScenarioUpperBound(string name,$/;"	f	class:despot::BaseRockSample
CreateScenarioUpperBound	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^ScenarioUpperBound* SimpleNavi::CreateScenarioUpperBound(string name,$/;"	f	class:despot::SimpleNavi
CreateScenarioUpperBound	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^ScenarioUpperBound* SimpleRockSample::CreateScenarioUpperBound(string name,$/;"	f	class:despot::SimpleRockSample
CreateScenarioUpperBound	examples/cpp_models/tag/src/base/base_tag.cpp	/^ScenarioUpperBound* BaseTag::CreateScenarioUpperBound(string name,$/;"	f	class:despot::BaseTag
CreateScenarioUpperBound	src/core/pomdp.cpp	/^ScenarioUpperBound* DSPOMDP::CreateScenarioUpperBound(string name,$/;"	f	class:despot::DSPOMDP
CreateScenarioUpperBound	src/pomdpx/pomdpx.cpp	/^ScenarioUpperBound* POMDPX::CreateScenarioUpperBound(string name,$/;"	f	class:despot::POMDPX
CreateStartState	examples/cpp_models/adventurer/src/adventurer.cpp	/^State* Adventurer::CreateStartState(string type) const {$/;"	f	class:despot::Adventurer
CreateStartState	examples/cpp_models/bridge/src/bridge.cpp	/^State* Bridge::CreateStartState(string type) const {$/;"	f	class:despot::Bridge
CreateStartState	examples/cpp_models/chain/src/chain.cpp	/^State* Chain::CreateStartState(string type) const {$/;"	f	class:despot::Chain
CreateStartState	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^State* Navigation::CreateStartState(string type) const {$/;"	f	class:despot::Navigation
CreateStartState	examples/cpp_models/navigation/src/navigation.cpp	/^State* Navigation::CreateStartState(string type) const {$/;"	f	class:despot::Navigation
CreateStartState	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^State* Navigation::CreateStartState(string type) const {$/;"	f	class:despot::Navigation
CreateStartState	examples/cpp_models/pocman/src/pocman.cpp	/^State* Pocman::CreateStartState(string tyep) const {$/;"	f	class:despot::Pocman
CreateStartState	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^State* RegDemo::CreateStartState(string type) const {$/;"	f	class:despot::RegDemo
CreateStartState	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^State* BaseRockSample::CreateStartState(string type) const {$/;"	f	class:despot::BaseRockSample
CreateStartState	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^State* SimpleNavi::CreateStartState(string type) const {$/;"	f	class:despot::SimpleNavi
CreateStartState	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^State* SimpleRockSample::CreateStartState(string type) const {$/;"	f	class:despot::SimpleRockSample
CreateStartState	examples/cpp_models/tag/src/base/base_tag.cpp	/^State* BaseTag::CreateStartState(string type) const {$/;"	f	class:despot::BaseTag
CreateStartState	examples/cpp_models/tiger/src/tiger.cpp	/^State* Tiger::CreateStartState(string type) const {$/;"	f	class:despot::Tiger
CreateStartState	src/pomdpx/pomdpx.cpp	/^State* POMDPX::CreateStartState(string type) const {$/;"	f	class:despot::POMDPX
CreateStateTransition	src/pomdpx/parser/parser.cpp	/^CPT* Parser::CreateStateTransition(TiXmlElement* e_CondProb) {$/;"	f	class:despot::Parser
CreateStateUniformly	src/pomdpx/parser/parser.cpp	/^vector<int> Parser::CreateStateUniformly() const {$/;"	f	class:despot::Parser
CreateStateVar	src/pomdpx/parser/parser.cpp	/^StateVar Parser::CreateStateVar(TiXmlElement* e_StateVar) {$/;"	f	class:despot::Parser
CreateTabularObsFunction	src/pomdpx/parser/parser.cpp	/^TabularCPT* Parser::CreateTabularObsFunction(TiXmlElement* e_CondProb) {$/;"	f	class:despot::Parser
CreateTabularStateTransition	src/pomdpx/parser/parser.cpp	/^TabularCPT* Parser::CreateTabularStateTransition(TiXmlElement* e_CondProb) {$/;"	f	class:despot::Parser
CreateVNode	src/solver/pomcp.cpp	/^VNode* POMCP::CreateVNode(int depth, const State* state, POMCPPrior* prior,$/;"	f	class:despot::POMCP
Cursor	src/util/tinyxml/tinyxmlparser.cpp	/^	const TiXmlCursor& Cursor() {$/;"	f	class:despot::util::tinyxml::TiXmlParsingData
DEBUG	include/despot/util/logging.h	/^	static const int NONE, ERROR, WARN, INFO, DEBUG, VERBOSE;$/;"	m	class:despot::logging
DEBUG	include/despot/util/tinyxml/tinyxml.h	42;"	d
DEBUG	src/util/logging.cpp	/^const int logging::DEBUG = 4;$/;"	m	class:despot::logging	file:
DECLARATION	include/despot/util/tinyxml/tinyxml.h	/^		DOCUMENT, ELEMENT, COMMENT, UNKNOWN, TEXT, DECLARATION, TYPECOUNT$/;"	e	enum:despot::util::tinyxml::TiXmlNode::NodeType
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DEPS	Makefile	/^DEPS = $(addprefix $(DEPDIR)\/, $(notdir $(SOURCES:.cpp=.d)))$/;"	m
DESPOT	include/despot/solver/despot.h	/^class DESPOT: public Solver {$/;"	c	namespace:despot
DESPOT	src/solver/despot.cpp	/^DESPOT::DESPOT(const DSPOMDP* model, ScenarioLowerBound* lb, ScenarioUpperBound* ub, Belief* belief) :$/;"	f	class:despot::DESPOT
DESPOTHOME	examples/cpp_models/adventurer/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	examples/cpp_models/bridge/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	examples/cpp_models/chain/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	examples/cpp_models/localnavigation/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	examples/cpp_models/navigation/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	examples/cpp_models/pathfollowing/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	examples/cpp_models/pocman/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	examples/cpp_models/reg_demo/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	examples/cpp_models/rock_sample/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	examples/cpp_models/simpleNavi/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	examples/cpp_models/simple_rock_sample/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	examples/cpp_models/tag/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	examples/cpp_models/tiger/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	examples/pomdpx_models/Makefile	/^DESPOTHOME = ..\/..$/;"	m
DESPOT_H	include/despot/solver/despot.h	2;"	d
DESPOT_UTIL_TINYXML_INCLUDED	include/despot/util/tinyxml/tinyxml.h	26;"	d
DIRECTIONS	include/despot/util/coord.h	/^	static const Coord DIRECTIONS[];$/;"	m	struct:despot::Compass
DIRECTIONS	src/util/coord.cpp	/^const Coord Compass::DIRECTIONS[] = { Coord(0, 1), Coord(1, 0), Coord(0, -1),$/;"	m	class:despot::Compass	file:
DIRICHLET_H	include/despot/util/dirichlet.h	2;"	d
DOCUMENT	include/despot/util/tinyxml/tinyxml.h	/^		DOCUMENT, ELEMENT, COMMENT, UNKNOWN, TEXT, DECLARATION, TYPECOUNT$/;"	e	enum:despot::util::tinyxml::TiXmlNode::NodeType
DPOMCP	include/despot/solver/pomcp.h	/^class DPOMCP: public POMCP {$/;"	c	namespace:despot
DPOMCP	src/solver/pomcp.cpp	/^DPOMCP::DPOMCP(const DSPOMDP* model, POMCPPrior* prior, Belief* belief) :$/;"	f	class:despot::DPOMCP
DSPOMDP	include/despot/core/pomdp.h	/^class DSPOMDP {$/;"	c	namespace:despot
DSPOMDP	src/core/pomdp.cpp	/^DSPOMDP::DSPOMDP():m_Round_num(0),m_last_action(0) {$/;"	f	class:despot::DSPOMDP
DecX	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::DecX(State* state) const {$/;"	f	class:despot::BaseRockSample
DecY	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::DecY(State* state) const {$/;"	f	class:despot::BaseRockSample
DefaultStartState	examples/cpp_models/chain/src/chain.cpp	/^State* Chain::DefaultStartState() const {$/;"	f	class:despot::Chain
DeleteAll	include/despot/util/memorypool.h	/^	void DeleteAll() {$/;"	f	class:despot::MemoryPool
Descriptor	include/despot/util/optionparser.h	/^struct Descriptor {$/;"	s	namespace:despot::option
Destroy	include/despot/util/memorypool.h	/^	void Destroy(T* obj) {$/;"	f	class:despot::MemoryPool
DirectionalDistance	src/util/coord.cpp	/^int Coord::DirectionalDistance(Coord lhs, Coord rhs, int direction) {$/;"	f	class:despot::Coord
Dirichlet	include/despot/util/dirichlet.h	/^class Dirichlet {$/;"	c	namespace:despot
Dirichlet	src/util/dirichlet.cpp	/^Dirichlet::Dirichlet(vector<double> alpha) {$/;"	f	class:despot::Dirichlet
Discount	include/despot/core/globals.h	/^inline double Discount() {$/;"	f	namespace:despot::Globals
Discount	include/despot/core/globals.h	/^inline double Discount(int d) {$/;"	f	namespace:despot::Globals
DisplayParameters	src/simple_tui.cpp	/^void SimpleTUI::DisplayParameters(option::Option *options, DSPOMDP *model) {$/;"	f	class:despot::SimpleTUI
DistToEdge	include/despot/util/grid.h	/^	int DistToEdge(const Coord& coord, int direction) {$/;"	f	class:despot::Grid
Distance	src/util/floor.cpp	/^double Floor::Distance(int c1, int c2) const {$/;"	f	class:despot::Floor
DoIndent	include/despot/util/tinyxml/tinyxml.h	/^	void DoIndent() {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
DoLineBreak	include/despot/util/tinyxml/tinyxml.h	/^	void DoLineBreak() {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
DoubleValue	src/util/tinyxml/tinyxml.cpp	/^double TiXmlAttribute::DoubleValue() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
EAST	include/despot/util/coord.h	/^		SOUTH, EAST, NORTH, WEST, NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST$/;"	e	enum:despot::Compass::__anon15
ELEMENT	include/despot/util/tinyxml/tinyxml.h	/^		DOCUMENT, ELEMENT, COMMENT, UNKNOWN, TEXT, DECLARATION, TYPECOUNT$/;"	e	enum:despot::util::tinyxml::TiXmlNode::NodeType
ERROR	include/despot/util/logging.h	/^	static const int NONE, ERROR, WARN, INFO, DEBUG, VERBOSE;$/;"	m	class:despot::logging
ERROR	src/util/logging.cpp	/^const int logging::ERROR = 1;$/;"	m	class:despot::logging	file:
EXECTRACKER_H	include/despot/util/exec_tracker.h	2;"	d
E_BAD	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^		E_BAD = 0,$/;"	e	enum:despot::BaseRockSample::__anon5
E_BELIEF	include/despot/simple_tui.h	/^  E_BELIEF,$/;"	e	enum:despot::OptionIndex
E_BLBTYPE	include/despot/simple_tui.h	/^  E_BLBTYPE,$/;"	e	enum:despot::OptionIndex
E_BUBTYPE	include/despot/simple_tui.h	/^  E_BUBTYPE,$/;"	e	enum:despot::OptionIndex
E_DEFAULT_ACTION	include/despot/simple_tui.h	/^  E_DEFAULT_ACTION,$/;"	e	enum:despot::OptionIndex
E_DEPTH	include/despot/simple_tui.h	/^  E_DEPTH,$/;"	e	enum:despot::OptionIndex
E_DISCOUNT	include/despot/simple_tui.h	/^  E_DISCOUNT,$/;"	e	enum:despot::OptionIndex
E_EVALUATOR	include/despot/simple_tui.h	/^  E_EVALUATOR,$/;"	e	enum:despot::OptionIndex
E_GAP	include/despot/simple_tui.h	/^  E_GAP,$/;"	e	enum:despot::OptionIndex
E_GOOD	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^		E_GOOD = 1,$/;"	e	enum:despot::BaseRockSample::__anon5
E_HELP	include/despot/simple_tui.h	/^  E_HELP,$/;"	e	enum:despot::OptionIndex
E_KNOWLEDGE	include/despot/simple_tui.h	/^  E_KNOWLEDGE,$/;"	e	enum:despot::OptionIndex
E_LBTYPE	include/despot/simple_tui.h	/^  E_LBTYPE,$/;"	e	enum:despot::OptionIndex
E_LOG	include/despot/simple_tui.h	/^  E_LOG,$/;"	e	enum:despot::OptionIndex
E_MAX_POLICY_SIM_LEN	include/despot/simple_tui.h	/^  E_MAX_POLICY_SIM_LEN,$/;"	e	enum:despot::OptionIndex
E_NOISE	include/despot/simple_tui.h	/^  E_NOISE,$/;"	e	enum:despot::OptionIndex
E_NONE	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^		E_NONE = 2$/;"	e	enum:despot::BaseRockSample::__anon5
E_NUMBER	include/despot/simple_tui.h	/^  E_NUMBER,$/;"	e	enum:despot::OptionIndex
E_NUMPARTICLES	include/despot/simple_tui.h	/^  E_NUMPARTICLES,$/;"	e	enum:despot::OptionIndex
E_PARAMS_FILE	include/despot/simple_tui.h	/^  E_PARAMS_FILE,$/;"	e	enum:despot::OptionIndex
E_PASSABLE	examples/cpp_models/localnavigation/src/localnavigation.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Navigation::__anon10
E_PASSABLE	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Navigation::__anon8
E_PASSABLE	examples/cpp_models/pocman/src/pocman.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Pocman::__anon11
E_PORT	include/despot/simple_tui.h	/^  E_PORT,$/;"	e	enum:despot::OptionIndex
E_POWER	examples/cpp_models/localnavigation/src/localnavigation.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Navigation::__anon10
E_POWER	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Navigation::__anon8
E_POWER	examples/cpp_models/pocman/src/pocman.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Pocman::__anon11
E_PRIOR	include/despot/simple_tui.h	/^  E_PRIOR,$/;"	e	enum:despot::OptionIndex
E_PRUNE	include/despot/simple_tui.h	/^  E_PRUNE,$/;"	e	enum:despot::OptionIndex
E_RUNS	include/despot/simple_tui.h	/^  E_RUNS,$/;"	e	enum:despot::OptionIndex
E_SAMPLE	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^		E_SAMPLE = 4$/;"	e	enum:despot::BaseRockSample::__anon6
E_SEARCH_SOLVER	include/despot/simple_tui.h	/^  E_SEARCH_SOLVER,$/;"	e	enum:despot::OptionIndex
E_SEED	examples/cpp_models/localnavigation/src/localnavigation.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Navigation::__anon10
E_SEED	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Navigation::__anon8
E_SEED	examples/cpp_models/pocman/src/pocman.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Pocman::__anon11
E_SEED	include/despot/simple_tui.h	/^  E_SEED,$/;"	e	enum:despot::OptionIndex
E_SERVER	include/despot/simple_tui.h	/^  E_SERVER,$/;"	e	enum:despot::OptionIndex
E_SILENCE	include/despot/simple_tui.h	/^  E_SILENCE,$/;"	e	enum:despot::OptionIndex
E_SIM_LEN	include/despot/simple_tui.h	/^  E_SIM_LEN,$/;"	e	enum:despot::OptionIndex
E_SIZE	include/despot/simple_tui.h	/^  E_SIZE,$/;"	e	enum:despot::OptionIndex
E_SOLVER	include/despot/simple_tui.h	/^  E_SOLVER,$/;"	e	enum:despot::OptionIndex
E_TIMEOUT	include/despot/simple_tui.h	/^  E_TIMEOUT,$/;"	e	enum:despot::OptionIndex
E_TIME_LIMIT	include/despot/simple_tui.h	/^  E_TIME_LIMIT,$/;"	e	enum:despot::OptionIndex
E_UBTYPE	include/despot/simple_tui.h	/^  E_UBTYPE,$/;"	e	enum:despot::OptionIndex
E_UNKNOWN	include/despot/simple_tui.h	/^  E_UNKNOWN,$/;"	e	enum:despot::OptionIndex
E_VERBOSITY	include/despot/simple_tui.h	/^  E_VERBOSITY,$/;"	e	enum:despot::OptionIndex
Element	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* Element() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
EncodeString	src/util/tinyxml/tinyxml.cpp	/^void TiXmlBase::EncodeString(const TIXML_STRING& str, TIXML_STRING* outString) {$/;"	f	class:despot::util::tinyxml::TiXmlBase
Encoding	include/despot/util/tinyxml/tinyxml.h	/^	const char *Encoding() const {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
End	src/evaluator.cpp	/^double IPPCEvaluator::End() {$/;"	f	class:despot::IPPCEvaluator
End	src/evaluator.cpp	/^double POMDPEvaluator::End() {$/;"	f	class:despot::POMDPEvaluator
EndRound	src/evaluator.cpp	/^double IPPCEvaluator::EndRound() {$/;"	f	class:despot::IPPCEvaluator
EndRound	src/evaluator.cpp	/^double POMDPEvaluator::EndRound() {$/;"	f	class:despot::POMDPEvaluator
Ensure	src/pomdpx/parser/parser.cpp	/^void Parser::Ensure(bool condition, string message, TiXmlBase* base) const {$/;"	f	class:despot::Parser
Entity	include/despot/util/tinyxml/tinyxml.h	/^	struct Entity {$/;"	s	class:despot::util::tinyxml::TiXmlBase
Entry	src/random_streams.cpp	/^double RandomStreams::Entry(int stream) const {$/;"	f	class:despot::RandomStreams
Entry	src/random_streams.cpp	/^double RandomStreams::Entry(int stream, int position) const {$/;"	f	class:despot::RandomStreams
Error	include/despot/util/tinyxml/tinyxml.h	/^	bool Error() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
ErrorCol	include/despot/util/tinyxml/tinyxml.h	/^	int ErrorCol() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
ErrorDesc	include/despot/util/tinyxml/tinyxml.h	/^	const char * ErrorDesc() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
ErrorId	include/despot/util/tinyxml/tinyxml.h	/^	int ErrorId() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
ErrorRow	include/despot/util/tinyxml/tinyxml.h	/^	int ErrorRow() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
EuclideanDistance	src/util/coord.cpp	/^double Coord::EuclideanDistance(Coord c1, Coord c2) {$/;"	f	class:despot::Coord
EvalLog	include/despot/evaluator.h	/^class EvalLog {$/;"	c	namespace:despot
EvalLog	src/evaluator.cpp	/^EvalLog::EvalLog(string log_file) :$/;"	f	class:despot::EvalLog
Evaluate	src/solver/despot.cpp	/^ValuedAction DESPOT::Evaluate(VNode* root, vector<State*>& particles,$/;"	f	class:despot::DESPOT
Evaluate	src/solver/pomcp.cpp	/^ValuedAction POMCP::Evaluate(VNode* root, vector<State*>& particles,$/;"	f	class:despot::POMCP
Evaluator	include/despot/evaluator.h	/^class Evaluator {$/;"	c	namespace:despot
Evaluator	src/evaluator.cpp	/^Evaluator::Evaluator(DSPOMDP* model, string belief_type, Solver* solver,$/;"	f	class:despot::Evaluator
ExactInitialParticleSet	src/pomdpx/pomdpx.cpp	/^vector<State*> POMDPX::ExactInitialParticleSet() const {$/;"	f	class:despot::POMDPX
ExactPrior	examples/cpp_models/tag/src/tag/tag.cpp	/^Belief* Tag::ExactPrior() const {$/;"	f	class:despot::Tag
ExecTracker	include/despot/util/exec_tracker.h	/^class ExecTracker {$/;"	c	namespace:despot
ExecTracker	src/util/exec_tracker.cpp	/^ExecTracker::ExecTracker() {$/;"	f	class:despot::ExecTracker
ExecuteAction	src/evaluator.cpp	/^bool IPPCEvaluator::ExecuteAction(int action, double& reward, OBS_TYPE& obs) {$/;"	f	class:despot::IPPCEvaluator
ExecuteAction	src/evaluator.cpp	/^bool POMDPEvaluator::ExecuteAction(int action, double& reward, OBS_TYPE& obs) {$/;"	f	class:despot::POMDPEvaluator
Exhausted	src/random_streams.cpp	/^bool RandomStreams::Exhausted() const {$/;"	f	class:despot::RandomStreams
Expand	src/solver/aems.cpp	/^void AEMS::Expand(QNode* qnode, BeliefLowerBound* lb, BeliefUpperBound* ub,$/;"	f	class:despot::AEMS
Expand	src/solver/aems.cpp	/^void AEMS::Expand(VNode* vnode, BeliefLowerBound* lower_bound,$/;"	f	class:despot::AEMS
Expand	src/solver/despot.cpp	/^void DESPOT::Expand(QNode* qnode, ScenarioLowerBound* lb,$/;"	f	class:despot::DESPOT
Expand	src/solver/despot.cpp	/^void DESPOT::Expand(VNode* vnode,$/;"	f	class:despot::DESPOT
ExploitBlockers	src/solver/despot.cpp	/^void DESPOT::ExploitBlockers(VNode* vnode) {$/;"	f	class:despot::DESPOT
FLOOR_H	include/despot/util/floor.h	2;"	d
FUNCTION_H	include/despot/pomdpx/parser/function.h	2;"	d
FVRS	examples/cpp_models/rock_sample/src/fvrs/fvrs.cpp	/^FVRS::FVRS(int size, int rocks) :$/;"	f	class:despot::FVRS
FVRS	examples/cpp_models/rock_sample/src/fvrs/fvrs.cpp	/^FVRS::FVRS(string map) :$/;"	f	class:despot::FVRS
FVRS	examples/cpp_models/rock_sample/src/fvrs/fvrs.h	/^class FVRS: public BaseRockSample {$/;"	c	namespace:despot
FVRS_BIN	examples/cpp_models/rock_sample/Makefile	/^FVRS_BIN = fvrs$/;"	m
FVRS_H	examples/cpp_models/rock_sample/src/fvrs/fvrs.h	2;"	d
FVRS_SOURCES	examples/cpp_models/rock_sample/Makefile	/^FVRS_SOURCES = $(shell find -L $(SRCDIR)\/base $(SRCDIR)\/fvrs -name '*.cpp')$/;"	m
Fequals	include/despot/core/globals.h	/^inline bool Fequals(double a, double b) {$/;"	f	namespace:despot::Globals
Find	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* Find( const std::string& _name ) {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
Find	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* Find(const char* _name) {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
Find	src/util/tinyxml/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttributeSet::Find( const std::string& name ) const$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
Find	src/util/tinyxml/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttributeSet::Find(const char* name) const {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
FindBlocker	src/solver/despot.cpp	/^VNode* DESPOT::FindBlocker(VNode* vnode) {$/;"	f	class:despot::DESPOT
FindMaxApproxErrorLeaf	src/solver/aems.cpp	/^VNode* AEMS::FindMaxApproxErrorLeaf(VNode* root) {$/;"	f	class:despot::AEMS
FindMaxApproxErrorLeaf	src/solver/aems.cpp	/^void AEMS::FindMaxApproxErrorLeaf(QNode* qnode, double likelihood,$/;"	f	class:despot::AEMS
FindMaxApproxErrorLeaf	src/solver/aems.cpp	/^void AEMS::FindMaxApproxErrorLeaf(VNode* vnode, double likelihood,$/;"	f	class:despot::AEMS
First	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* First() {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
First	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlAttribute* First() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
FirstAttribute	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* FirstAttribute() {$/;"	f	class:despot::util::tinyxml::TiXmlElement
FirstAttribute	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlAttribute* FirstAttribute() const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
FirstChild	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlHandle FirstChild( const std::string& _value ) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
FirstChild	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* FirstChild( const std::string& _value ) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChild	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* FirstChild() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChild	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* FirstChild(const char * _value) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChild	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* FirstChild( const std::string& _value ) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChild	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* FirstChild() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChild	src/util/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
FirstChild	src/util/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild(const char * value) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
FirstChild	src/util/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::FirstChild(const char * _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChildElement	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* FirstChildElement( const std::string& _value ) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChildElement	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* FirstChildElement() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChildElement	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* FirstChildElement(const char * _value) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChildElement	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlHandle FirstChildElement( const std::string& _value ) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
FirstChildElement	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlElement* FirstChildElement( const std::string& _value ) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChildElement	src/util/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
FirstChildElement	src/util/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement(const char * value) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
FirstChildElement	src/util/tinyxml/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChildElement	src/util/tinyxml/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement(const char * _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
Floor	include/despot/util/floor.h	/^class Floor {$/;"	c	namespace:despot
Floor	src/util/floor.cpp	/^Floor::Floor() :$/;"	f	class:despot::Floor
Floor	src/util/floor.cpp	/^Floor::Floor(int num_rows, int num_cols) :$/;"	f	class:despot::Floor
Free	examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::Free(State* particle) const {$/;"	f	class:despot::Adventurer
Free	examples/cpp_models/bridge/src/bridge.cpp	/^void Bridge::Free(State* particle) const {$/;"	f	class:despot::Bridge
Free	examples/cpp_models/chain/src/chain.cpp	/^void Chain::Free(State* particle) const {$/;"	f	class:despot::Chain
Free	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::Free(State* particle) const {$/;"	f	class:despot::Navigation
Free	examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::Free(State* particle) const {$/;"	f	class:despot::Navigation
Free	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::Free(State* particle) const {$/;"	f	class:despot::Navigation
Free	examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::Free(State* particle) const {$/;"	f	class:despot::Pocman
Free	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::Free(State* particle) const {$/;"	f	class:despot::RegDemo
Free	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::Free(State* particle) const {$/;"	f	class:despot::BaseRockSample
Free	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^void SimpleNavi::Free(State* particle) const {$/;"	f	class:despot::SimpleNavi
Free	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^void SimpleRockSample::Free(State* particle) const {$/;"	f	class:despot::SimpleRockSample
Free	examples/cpp_models/tag/src/base/base_tag.cpp	/^void BaseTag::Free(State* particle) const {$/;"	f	class:despot::BaseTag
Free	examples/cpp_models/tiger/src/tiger.cpp	/^void Tiger::Free(State* particle) const {$/;"	f	class:despot::Tiger
Free	include/despot/util/memorypool.h	/^	void Free(T* obj) {$/;"	f	class:despot::MemoryPool
Free	src/core/node.cpp	/^void VNode::Free(const DSPOMDP& model) {$/;"	f	class:despot::VNode
Free	src/pomdpx/pomdpx.cpp	/^void POMDPX::Free(State* particle) const {$/;"	f	class:despot::POMDPX
FullChainBelief	examples/cpp_models/chain/src/chain.cpp	/^FullChainBelief::FullChainBelief(const DSPOMDP* model, int num_mdp_states,$/;"	f	class:despot::FullChainBelief
FullChainBelief	examples/cpp_models/chain/src/chain.h	/^class FullChainBelief: public Belief {$/;"	c	namespace:despot
FullPocman	examples/cpp_models/pocman/src/pocman.cpp	/^FullPocman::FullPocman() :$/;"	f	class:despot::FullPocman
FullPocman	examples/cpp_models/pocman/src/pocman.h	/^class FullPocman: public Pocman {$/;"	c	namespace:despot
Function	include/despot/pomdpx/parser/function.h	/^class Function {$/;"	c	namespace:despot
Function	src/pomdpx/parser/function.cpp	/^Function::Function() {$/;"	f	class:despot::Function
Function	src/pomdpx/parser/function.cpp	/^Function::Function(NamedVar* child, vector<NamedVar*> parents) :$/;"	f	class:despot::Function
FunctionWriter	include/despot/util/optionparser.h	/^		FunctionWriter(Function* w) :$/;"	f	struct:despot::option::PrintUsageImplementation::FunctionWriter
FunctionWriter	include/despot/util/optionparser.h	/^	struct FunctionWriter: public IStringWriter {$/;"	s	struct:despot::option::PrintUsageImplementation
GAMMA_H	include/despot/util/gamma.h	2;"	d
GLOBALS_H	include/despot/core/globals.h	2;"	d
GRID_H	include/despot/util/grid.h	2;"	d
Gamma	include/despot/util/gamma.h	/^class Gamma {$/;"	c	namespace:despot
Gamma	src/util/gamma.cpp	/^Gamma::Gamma(double k, double theta) {$/;"	f	class:despot::Gamma
Gap	src/solver/despot.cpp	/^double DESPOT::Gap(VNode* vnode) {$/;"	f	class:despot::DESPOT
GetAction	examples/cpp_models/adventurer/src/adventurer.cpp	/^int Adventurer::GetAction(const State& state) const {$/;"	f	class:despot::Adventurer
GetAction	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^int Navigation::GetAction(const State& state) const {$/;"	f	class:despot::Navigation
GetAction	examples/cpp_models/navigation/src/navigation.cpp	/^int Navigation::GetAction(const State& state) const {$/;"	f	class:despot::Navigation
GetAction	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^int Navigation::GetAction(const State& state) const {$/;"	f	class:despot::Navigation
GetAction	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^int RegDemo::GetAction(const State& state) const {$/;"	f	class:despot::RegDemo
GetAction	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	inline int GetAction(const State& tagstate) const {$/;"	f	class:despot::BaseRockSample
GetAction	examples/cpp_models/tag/src/base/base_tag.cpp	/^int BaseTag::GetAction(const State& state) const {$/;"	f	class:despot::BaseTag
GetAction	include/despot/pomdpx/pomdpx.h	/^	inline int GetAction(const State& state) const {$/;"	f	class:despot::POMDPX
GetAction	src/solver/pomcp.cpp	/^int POMCPPrior::GetAction(const State& state) {$/;"	f	class:despot::POMCPPrior
GetActionName	src/pomdpx/parser/parser.cpp	/^const string& Parser::GetActionName() {$/;"	f	class:despot::Parser
GetActionName	src/pomdpx/pomdpx.cpp	/^const string& POMDPX::GetActionName() {$/;"	f	class:despot::POMDPX
GetBucket	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^int LaserTag::GetBucket(double noisy) const {$/;"	f	class:despot::LaserTag
GetBucket	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^int NoisyLaserTag::GetBucket(double noisy) const {$/;"	f	class:despot::NoisyLaserTag
GetCategory	src/util/random.cpp	/^int Random::GetCategory(const vector<double>& category_probs, double rand_num) {$/;"	f	class:despot::Random
GetCell	src/util/floor.cpp	/^Coord Floor::GetCell(int i) const {$/;"	f	class:despot::Floor
GetChar	include/despot/util/tinyxml/tinyxml.h	/^	inline static const char* GetChar(const char* p, char* _value, int* length,$/;"	f	class:despot::util::tinyxml::TiXmlBase
GetCoord	include/despot/util/grid.h	/^	Coord GetCoord(int index) const {$/;"	f	class:despot::Grid
GetDefaultAction	include/despot/pomdpx/parser/parser.h	/^	inline int GetDefaultAction(const std::vector<int>& state) const {$/;"	f	class:despot::Parser
GetDocument	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlDocument* GetDocument() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
GetDocument	src/util/tinyxml/tinyxml.cpp	/^const TiXmlDocument* TiXmlNode::GetDocument() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
GetEntity	src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlBase::GetEntity(const char* p, char* value, int* length,$/;"	f	class:despot::util::tinyxml::TiXmlBase
GetEnumedAction	src/pomdpx/parser/parser.cpp	/^const string& Parser::GetEnumedAction(int action) {$/;"	f	class:despot::Parser
GetEnumedAction	src/pomdpx/pomdpx.cpp	/^const string& POMDPX::GetEnumedAction(int action) {$/;"	f	class:despot::POMDPX
GetFirstChildElement	src/pomdpx/parser/parser.cpp	/^TiXmlElement* Parser::GetFirstChildElement(TiXmlElement* elem,$/;"	f	class:despot::Parser
GetFirstChildText	src/pomdpx/parser/parser.cpp	/^string Parser::GetFirstChildText(TiXmlElement* elem,$/;"	f	class:despot::Parser
GetIndex	examples/cpp_models/adventurer/src/adventurer.h	/^	inline int GetIndex(const State* state) const {$/;"	f	class:despot::Adventurer
GetIndex	examples/cpp_models/localnavigation/src/localnavigation.h	/^	inline int GetIndex(const State* state) const {$/;"	f	class:despot::Navigation
GetIndex	examples/cpp_models/navigation/src/navigation.h	/^	inline int GetIndex(const State* state) const {$/;"	f	class:despot::Navigation
GetIndex	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	inline int GetIndex(const State* state) const {$/;"	f	class:despot::Navigation
GetIndex	examples/cpp_models/reg_demo/src/reg_demo.h	/^	inline int GetIndex(const State* state) const {$/;"	f	class:despot::RegDemo
GetIndex	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^int BaseRockSample::GetIndex(const State* state) const {$/;"	f	class:despot::BaseRockSample
GetIndex	examples/cpp_models/tag/src/base/base_tag.h	/^	inline int GetIndex(const State* state) const {$/;"	f	class:despot::BaseTag
GetIndex	include/despot/util/floor.h	/^	inline int GetIndex(const Coord& coord) const {$/;"	f	class:despot::Floor
GetIndex	include/despot/util/floor.h	/^	inline int GetIndex(int x, int y) const {$/;"	f	class:despot::Floor
GetIndex	src/pomdpx/pomdpx.cpp	/^int POMDPX::GetIndex(const State* state) const {$/;"	f	class:despot::POMDPX
GetKeys	include/despot/util/util.h	/^std::vector<K>* GetKeys(const std::map<K, V> m) {$/;"	f	namespace:despot
GetMMAP	examples/cpp_models/tag/src/base/base_tag.cpp	/^const State* BaseTag::GetMMAP(const vector<State*>& particles) const {$/;"	f	class:despot::BaseTag
GetMaxReward	examples/cpp_models/adventurer/src/adventurer.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Adventurer
GetMaxReward	examples/cpp_models/bridge/src/bridge.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Bridge
GetMaxReward	examples/cpp_models/chain/src/chain.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Chain
GetMaxReward	examples/cpp_models/localnavigation/src/localnavigation.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Navigation
GetMaxReward	examples/cpp_models/navigation/src/navigation.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Navigation
GetMaxReward	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Navigation
GetMaxReward	examples/cpp_models/pocman/src/pocman.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Pocman
GetMaxReward	examples/cpp_models/reg_demo/src/reg_demo.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::RegDemo
GetMaxReward	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::BaseRockSample
GetMaxReward	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^double SimpleNavi::GetMaxReward() const {$/;"	f	class:despot::SimpleNavi
GetMaxReward	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^double SimpleRockSample::GetMaxReward() const {$/;"	f	class:despot::SimpleRockSample
GetMaxReward	examples/cpp_models/tag/src/base/base_tag.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::BaseTag
GetMaxReward	examples/cpp_models/tiger/src/tiger.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Tiger
GetMaxReward	include/despot/pomdpx/pomdpx.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::POMDPX
GetMinRewardAction	examples/cpp_models/adventurer/src/adventurer.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Adventurer
GetMinRewardAction	examples/cpp_models/bridge/src/bridge.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Bridge
GetMinRewardAction	examples/cpp_models/chain/src/chain.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Chain
GetMinRewardAction	examples/cpp_models/localnavigation/src/localnavigation.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Navigation
GetMinRewardAction	examples/cpp_models/navigation/src/navigation.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Navigation
GetMinRewardAction	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Navigation
GetMinRewardAction	examples/cpp_models/pocman/src/pocman.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Pocman
GetMinRewardAction	examples/cpp_models/reg_demo/src/reg_demo.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::RegDemo
GetMinRewardAction	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::BaseRockSample
GetMinRewardAction	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^ValuedAction SimpleNavi::GetMinRewardAction() const {$/;"	f	class:despot::SimpleNavi
GetMinRewardAction	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^ValuedAction SimpleRockSample::GetMinRewardAction() const {$/;"	f	class:despot::SimpleRockSample
GetMinRewardAction	examples/cpp_models/tag/src/base/base_tag.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::BaseTag
GetMinRewardAction	examples/cpp_models/tiger/src/tiger.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Tiger
GetMinRewardAction	include/despot/pomdpx/pomdpx.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::POMDPX
GetNextState	src/pomdpx/parser/parser.cpp	/^void Parser::GetNextState(vector<int>& state, int action,$/;"	f	class:despot::Parser
GetNoisyNextState	src/pomdpx/parser/parser.cpp	/^void Parser::GetNoisyNextState(vector<int>& state, int action,$/;"	f	class:despot::Parser
GetNumCompletedRuns	include/despot/evaluator.h	/^	int GetNumCompletedRuns() const {$/;"	f	class:despot::IPPCEvaluator
GetNumCompletedRuns	include/despot/evaluator.h	/^	int GetNumCompletedRuns(std::string instance) const {$/;"	f	class:despot::IPPCEvaluator
GetNumCompletedRuns	src/evaluator.cpp	/^int EvalLog::GetNumCompletedRuns() const {$/;"	f	class:despot::EvalLog
GetNumCompletedRuns	src/evaluator.cpp	/^int EvalLog::GetNumCompletedRuns(string instance) const {$/;"	f	class:despot::EvalLog
GetNumRemainingRuns	src/evaluator.cpp	/^int EvalLog::GetNumRemainingRuns() const {$/;"	f	class:despot::EvalLog
GetNumRemainingRuns	src/evaluator.cpp	/^int EvalLog::GetNumRemainingRuns(string instance) const {$/;"	f	class:despot::EvalLog
GetObservation	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^bool BaseRockSample::GetObservation(double rand_num,$/;"	f	class:despot::BaseRockSample
GetObservation	examples/cpp_models/rock_sample/src/fvrs/fvrs.cpp	/^int FVRS::GetObservation(double rand_num,$/;"	f	class:despot::FVRS
GetObservation	src/pomdpx/parser/parser.cpp	/^OBS_TYPE Parser::GetObservation(const vector<int>& state, int action,$/;"	f	class:despot::Parser
GetPOMDPXObservation	src/pomdpx/parser/parser.cpp	/^OBS_TYPE Parser::GetPOMDPXObservation(map<string, string>& observe) {$/;"	f	class:despot::Parser
GetPOMDPXObservation	src/pomdpx/pomdpx.cpp	/^OBS_TYPE POMDPX::GetPOMDPXObservation(map<string, string>& observe) {$/;"	f	class:despot::POMDPX
GetParameterElement	src/pomdpx/parser/parser.cpp	/^TiXmlElement* Parser::GetParameterElement(TiXmlElement* element) {$/;"	f	class:despot::Parser
GetReading	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^int LaserTag::GetReading(OBS_TYPE obs, OBS_TYPE dir) {$/;"	f	class:despot::LaserTag
GetReading	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^int NoisyLaserTag::GetReading(OBS_TYPE obs, OBS_TYPE dir) {$/;"	f	class:despot::NoisyLaserTag
GetRemainingBudget	src/evaluator.cpp	/^double EvalLog::GetRemainingBudget(string instance) const {$/;"	f	class:despot::EvalLog
GetRemainingTimeInSeconds	src/evaluator.cpp	/^double EvalLog::GetRemainingTimeInSeconds() const {$/;"	f	class:despot::EvalLog
GetReward	src/pomdpx/parser/parser.cpp	/^double Parser::GetReward(const vector<int>& prev_state,$/;"	f	class:despot::Parser
GetReward	src/pomdpx/parser/parser.cpp	/^double Parser::GetReward(int action) const {$/;"	f	class:despot::Parser
GetRobPos	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^Coord BaseRockSample::GetRobPos(const State* state) const {$/;"	f	class:despot::BaseRockSample
GetRobPos	examples/cpp_models/tag/src/base/base_tag.h	/^	inline Coord GetRobPos(const State* state) const {$/;"	f	class:despot::BaseTag
GetRobPosIndex	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^int BaseRockSample::GetRobPosIndex(const State* state) const {$/;"	f	class:despot::BaseRockSample
GetRock	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^bool BaseRockSample::GetRock(const State* state, int rock) const {$/;"	f	class:despot::BaseRockSample
GetState	examples/cpp_models/adventurer/src/adventurer.h	/^	inline const State* GetState(int index) const {$/;"	f	class:despot::Adventurer
GetState	examples/cpp_models/localnavigation/src/localnavigation.h	/^	inline const State* GetState(int index) const {$/;"	f	class:despot::Navigation
GetState	examples/cpp_models/navigation/src/navigation.h	/^	inline const State* GetState(int index) const {$/;"	f	class:despot::Navigation
GetState	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	inline const State* GetState(int index) const {$/;"	f	class:despot::Navigation
GetState	examples/cpp_models/reg_demo/src/reg_demo.h	/^	inline const State* GetState(int index) const {$/;"	f	class:despot::RegDemo
GetState	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^const State* BaseRockSample::GetState(int index) const {$/;"	f	class:despot::BaseRockSample
GetState	examples/cpp_models/tag/src/base/base_tag.h	/^	inline const State* GetState(int index) const {$/;"	f	class:despot::BaseTag
GetState	src/pomdpx/pomdpx.cpp	/^const State* POMDPX::GetState(const int index) const {$/;"	f	class:despot::POMDPX
GetText	src/util/tinyxml/tinyxml.cpp	/^const char* TiXmlElement::GetText() const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
GetTransition	examples/cpp_models/chain/src/chain.h	/^	inline double GetTransition(int state1, int action, int state2) {$/;"	f	class:despot::ChainState
GetTransition	examples/cpp_models/chain/src/chain.h	/^	std::vector<double> GetTransition(int state, int action) {$/;"	f	class:despot::ChainState
GetUsedTimeInSeconds	src/evaluator.cpp	/^double EvalLog::GetUsedTimeInSeconds() const {$/;"	f	class:despot::EvalLog
GetUserData	include/despot/util/tinyxml/tinyxml.h	/^	const void* GetUserData() const {$/;"	f	class:despot::util::tinyxml::TiXmlBase
GetUserData	include/despot/util/tinyxml/tinyxml.h	/^	void* GetUserData() {$/;"	f	class:despot::util::tinyxml::TiXmlBase
GetValue	include/despot/pomdpx/parser/function.h	/^	inline virtual double GetValue(int pid, int cid) const {$/;"	f	class:despot::HierarchyCPT
GetValue	include/despot/pomdpx/parser/variable.h	/^	inline const std::string& GetValue(int v) const {$/;"	f	class:despot::Variable
GetValue	src/pomdpx/parser/function.cpp	/^double Function::GetValue(int cid) const {$/;"	f	class:despot::Function
GetValue	src/pomdpx/parser/function.cpp	/^double Function::GetValue(int pid, int cid) const {$/;"	f	class:despot::Function
GetValue	src/pomdpx/parser/function.cpp	/^double HierarchyCPT::GetValue(int cid) const {$/;"	f	class:despot::HierarchyCPT
GetX	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^int BaseRockSample::GetX(const State* state) const {$/;"	f	class:despot::BaseRockSample
GetY	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^int BaseRockSample::GetY(const State* state) const {$/;"	f	class:despot::BaseRockSample
Globals	include/despot/core/globals.h	/^namespace Globals {$/;"	n	namespace:despot
Globals	src/core/globals.cpp	/^namespace Globals {$/;"	n	namespace:despot	file:
Goal	examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<bool> Goal; \/\/ bit vector$/;"	m	class:despot::NavigationState
Goal	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<bool> Goal; \/\/ bit vector$/;"	m	class:despot::NavigationState
Grid	include/despot/util/grid.h	/^	Grid() {$/;"	f	class:despot::Grid
Grid	include/despot/util/grid.h	/^	Grid(int xsize, int ysize) :$/;"	f	class:despot::Grid
Grid	include/despot/util/grid.h	/^class Grid {$/;"	c	namespace:despot
HELP	examples/cpp_models/bridge/src/bridge.cpp	/^int Bridge::HELP = 2;$/;"	m	class:despot::Bridge	file:
HELP	examples/cpp_models/bridge/src/bridge.h	/^	static int LEFT, RIGHT, HELP, BRIDGELENGTH;$/;"	m	class:despot::Bridge
HISTORY_H	include/despot/core/history.h	2;"	d
HOSTNAME	include/despot/ippc/client.h	/^  std::string HOSTNAME;$/;"	m	class:despot::Client
Handshake	src/evaluator.cpp	/^int IPPCEvaluator::Handshake(string instance) {$/;"	f	class:despot::IPPCEvaluator
Handshake	src/evaluator.cpp	/^int POMDPEvaluator::Handshake(string instance) {$/;"	f	class:despot::POMDPEvaluator
HasValue	src/pomdpx/parser/variable.cpp	/^const bool Variable::HasValue(string value) const {$/;"	f	class:despot::Variable
HearGhost	examples/cpp_models/pocman/src/pocman.cpp	/^bool Pocman::HearGhost(const PocmanState& pocstate) const {$/;"	f	class:despot::Pocman
HierarchyCPT	include/despot/pomdpx/parser/function.h	/^class HierarchyCPT: public CPT {$/;"	c	namespace:despot
HierarchyCPT	src/pomdpx/parser/function.cpp	/^HierarchyCPT::HierarchyCPT(NamedVar* child, vector<NamedVar*> parents) {$/;"	f	class:despot::HierarchyCPT
History	include/despot/core/history.h	/^class History {$/;"	c	namespace:despot
INCDIR	Makefile	/^INCDIR = include$/;"	m
INCDIR	examples/cpp_models/adventurer/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	examples/cpp_models/bridge/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	examples/cpp_models/chain/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	examples/cpp_models/localnavigation/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	examples/cpp_models/navigation/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	examples/cpp_models/pathfollowing/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	examples/cpp_models/pocman/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	examples/cpp_models/reg_demo/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	examples/cpp_models/rock_sample/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	examples/cpp_models/simpleNavi/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	examples/cpp_models/simple_rock_sample/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	examples/cpp_models/tag/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	examples/cpp_models/tiger/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	examples/pomdpx_models/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCL	Makefile	/^INCL = -I $(INCDIR) -I $(INCDIR)\/despot\/util -I $(SRCDIR)$/;"	m
INCLUDE	examples/cpp_models/rock_sample/Makefile	/^INCLUDE = -I $(INCDIR) -I $(SRCDIR)$/;"	m
INCLUDE	examples/cpp_models/tag/Makefile	/^INCLUDE = -I $(INCDIR) -I $(SRCDIR)$/;"	m
INF	src/core/globals.cpp	/^const double INF = 1e8;$/;"	m	namespace:despot::Globals	file:
INFO	include/despot/util/logging.h	/^	static const int NONE, ERROR, WARN, INFO, DEBUG, VERBOSE;$/;"	m	class:despot::logging
INFO	src/util/logging.cpp	/^const int logging::INFO = 3;$/;"	m	class:despot::logging	file:
INITIAL_MDP_STATE	examples/cpp_models/chain/src/chain.h	/^	const static int INITIAL_MDP_STATE = 0;$/;"	m	class:despot::Chain
INVALID	include/despot/util/floor.h	/^	static int INVALID;$/;"	m	class:despot::Floor
INVALID	src/util/floor.cpp	/^int Floor::INVALID = -1;$/;"	m	class:despot::Floor	file:
IPPCEvaluator	include/despot/evaluator.h	/^class IPPCEvaluator: public Evaluator {$/;"	c	namespace:despot
IPPCEvaluator	src/evaluator.cpp	/^IPPCEvaluator::IPPCEvaluator(DSPOMDP* model, string belief_type, Solver* solver,$/;"	f	class:despot::IPPCEvaluator
IStringWriter	include/despot/util/optionparser.h	/^	struct IStringWriter {$/;"	s	struct:despot::option::PrintUsageImplementation
Identify	src/util/tinyxml/tinyxmlparser.cpp	/^TiXmlNode* TiXmlNode::Identify(const char* p, TiXmlEncoding encoding) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
IncNumOfCompletedRuns	src/evaluator.cpp	/^void EvalLog::IncNumOfCompletedRuns(string problem) {$/;"	f	class:despot::EvalLog
IncX	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::IncX(State* state) const {$/;"	f	class:despot::BaseRockSample
IncY	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::IncY(State* state) const {$/;"	f	class:despot::BaseRockSample
Indent	include/despot/util/tinyxml/tinyxml.h	/^	const char* Indent() {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
Index	include/despot/util/grid.h	/^	int Index(const Coord& coord) const {$/;"	f	class:despot::Grid
Index	include/despot/util/grid.h	/^	int Index(int x, int y) const {$/;"	f	class:despot::Grid
IndexOf	src/pomdpx/parser/variable.cpp	/^int Variable::IndexOf(string value) const {$/;"	f	class:despot::Variable
IndexToCoord	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^Coord BaseRockSample::IndexToCoord(int pos) const {$/;"	f	class:despot::BaseRockSample
Init	examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::Init(istream& is) {$/;"	f	class:despot::Adventurer
Init	examples/cpp_models/chain/src/chain.cpp	/^void ChainState::Init(int num_mdp_states, int num_mdp_actions) {$/;"	f	class:despot::ChainState
Init	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::Init() {$/;"	f	class:despot::Navigation
Init	examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::Init(istream& is) {$/;"	f	class:despot::Navigation
Init	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::Init() {$/;"	f	class:despot::Navigation
Init	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::Init(istream& is) {$/;"	f	class:despot::RegDemo
Init	examples/cpp_models/tag/src/base/base_tag.cpp	/^void BaseTag::Init(istream& is) {$/;"	f	class:despot::BaseTag
Init	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^void LaserTag::Init() {$/;"	f	class:despot::LaserTag
Init	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^void NoisyLaserTag::Init() {$/;"	f	class:despot::NoisyLaserTag
Init	src/core/lower_bound.cpp	/^void ScenarioLowerBound::Init(const RandomStreams& streams) {$/;"	f	class:despot::ScenarioLowerBound
Init	src/core/upper_bound.cpp	/^void LookaheadUpperBound::Init(const RandomStreams& streams) {$/;"	f	class:despot::LookaheadUpperBound
Init	src/core/upper_bound.cpp	/^void ScenarioUpperBound::Init(const RandomStreams& streams) {$/;"	f	class:despot::ScenarioUpperBound
InitBounds	src/solver/despot.cpp	/^void DESPOT::InitBounds(VNode* vnode, ScenarioLowerBound* lower_bound,$/;"	f	class:despot::DESPOT
InitGeneral	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::InitGeneral() {$/;"	f	class:despot::BaseRockSample
InitLowerBound	src/solver/aems.cpp	/^void AEMS::InitLowerBound(VNode* vnode, BeliefLowerBound* lower_bound,$/;"	f	class:despot::AEMS
InitLowerBound	src/solver/despot.cpp	/^void DESPOT::InitLowerBound(VNode* vnode, ScenarioLowerBound* lower_bound,$/;"	f	class:despot::DESPOT
InitRewards	src/pomdpx/pomdpx.cpp	/^void POMDPX::InitRewards() {$/;"	f	class:despot::POMDPX
InitRound	src/evaluator.cpp	/^void IPPCEvaluator::InitRound() {$/;"	f	class:despot::IPPCEvaluator
InitRound	src/evaluator.cpp	/^void POMDPEvaluator::InitRound() {$/;"	f	class:despot::POMDPEvaluator
InitStates	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::InitStates() {$/;"	f	class:despot::BaseRockSample
InitStates	src/pomdpx/pomdpx.cpp	/^void POMDPX::InitStates() {$/;"	f	class:despot::POMDPX
InitTransitions	src/pomdpx/pomdpx.cpp	/^void POMDPX::InitTransitions() {$/;"	f	class:despot::POMDPX
InitUpperBound	src/solver/aems.cpp	/^void AEMS::InitUpperBound(VNode* vnode, BeliefUpperBound* upper_bound,$/;"	f	class:despot::AEMS
InitUpperBound	src/solver/despot.cpp	/^void DESPOT::InitUpperBound(VNode* vnode, ScenarioUpperBound* upper_bound,$/;"	f	class:despot::DESPOT
Init_11_11	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::Init_11_11() {$/;"	f	class:despot::BaseRockSample
Init_4_4	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::Init_4_4() {$/;"	f	class:despot::BaseRockSample
Init_5_5	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::Init_5_5() {$/;"	f	class:despot::BaseRockSample
Init_5_7	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::Init_5_7() {$/;"	f	class:despot::BaseRockSample
Init_7_8	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::Init_7_8() {$/;"	f	class:despot::BaseRockSample
InitialBelief	examples/cpp_models/adventurer/src/adventurer.cpp	/^Belief* Adventurer::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Adventurer
InitialBelief	examples/cpp_models/bridge/src/bridge.cpp	/^Belief* Bridge::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Bridge
InitialBelief	examples/cpp_models/chain/src/chain.cpp	/^Belief* Chain::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Chain
InitialBelief	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^Belief* Navigation::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Navigation
InitialBelief	examples/cpp_models/navigation/src/navigation.cpp	/^Belief* Navigation::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Navigation
InitialBelief	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^Belief* Navigation::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Navigation
InitialBelief	examples/cpp_models/pocman/src/pocman.cpp	/^Belief* Pocman::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Pocman
InitialBelief	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^Belief* RegDemo::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::RegDemo
InitialBelief	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^Belief* BaseRockSample::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::BaseRockSample
InitialBelief	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^Belief* SimpleNavi::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::SimpleNavi
InitialBelief	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^Belief* SimpleRockSample::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::SimpleRockSample
InitialBelief	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^Belief* LaserTag::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::LaserTag
InitialBelief	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^Belief* NoisyLaserTag::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::NoisyLaserTag
InitialBelief	examples/cpp_models/tag/src/tag/tag.cpp	/^Belief* Tag::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Tag
InitialBelief	examples/cpp_models/tiger/src/tiger.cpp	/^Belief* Tiger::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Tiger
InitialBelief	src/pomdpx/pomdpx.cpp	/^Belief* POMDPX::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::POMDPX
InitialParticleSet	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^vector<State*> BaseRockSample::InitialParticleSet() const {$/;"	f	class:despot::BaseRockSample
InitialWeight	src/pomdpx/parser/parser.cpp	/^double Parser::InitialWeight(const vector<int>& state) const {$/;"	f	class:despot::Parser
InitializeDefaultParameters	examples/cpp_models/adventurer/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	examples/cpp_models/bridge/src/main.cpp	/^	void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	examples/cpp_models/chain/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	examples/cpp_models/localnavigation/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	examples/cpp_models/navigation/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	examples/cpp_models/pathfollowing/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	examples/cpp_models/pocman/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	examples/cpp_models/reg_demo/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	examples/cpp_models/rock_sample/src/fvrs/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	examples/cpp_models/rock_sample/src/rock_sample/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	examples/cpp_models/simpleNavi/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	examples/cpp_models/simple_rock_sample/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	examples/cpp_models/tag/src/laser_tag/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	examples/cpp_models/tag/src/noisy_laser_tag/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	examples/cpp_models/tag/src/tag/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	examples/cpp_models/tiger/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	examples/pomdpx_models/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeEvaluator	src/simple_tui.cpp	/^void SimpleTUI::InitializeEvaluator(Evaluator *&simulator,$/;"	f	class:despot::SimpleTUI
InitializeLogStreams	src/util/logging.cpp	/^vector<log_ostream*> logging::InitializeLogStreams() {$/;"	f	class:despot::logging
InitializeModel	examples/cpp_models/adventurer/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	examples/cpp_models/bridge/src/main.cpp	/^	DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	examples/cpp_models/chain/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	examples/cpp_models/localnavigation/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	examples/cpp_models/navigation/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	examples/cpp_models/pathfollowing/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	examples/cpp_models/pocman/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	examples/cpp_models/reg_demo/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	examples/cpp_models/rock_sample/src/fvrs/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	examples/cpp_models/rock_sample/src/rock_sample/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	examples/cpp_models/simpleNavi/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	examples/cpp_models/simple_rock_sample/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	examples/cpp_models/tag/src/laser_tag/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	examples/cpp_models/tag/src/noisy_laser_tag/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	examples/cpp_models/tag/src/tag/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	examples/cpp_models/tiger/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	examples/pomdpx_models/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeSolver	src/simple_tui.cpp	/^Solver *SimpleTUI::InitializeSolver(DSPOMDP *model, string solver_type,$/;"	f	class:despot::SimpleTUI
InitializeTransitions	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::InitializeTransitions() {$/;"	f	class:despot::BaseRockSample
InsertAfterChild	src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertAfterChild(TiXmlNode* afterThis,$/;"	f	class:despot::util::tinyxml::TiXmlNode
InsertBeforeChild	src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertBeforeChild(TiXmlNode* beforeThis,$/;"	f	class:despot::util::tinyxml::TiXmlNode
InsertEndChild	src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertEndChild(const TiXmlNode& addThis) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
Inside	include/despot/util/grid.h	/^	bool Inside(const Coord& coord) const {$/;"	f	class:despot::Grid
Inside	src/util/floor.cpp	/^bool Floor::Inside(Coord coord) const {$/;"	f	class:despot::Floor
Inside	src/util/floor.cpp	/^bool Floor::Inside(int x, int y) const {$/;"	f	class:despot::Floor
IntValue	src/util/tinyxml/tinyxml.cpp	/^int TiXmlAttribute::IntValue() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
IsAllocated	include/despot/util/memorypool.h	/^	bool IsAllocated() const {$/;"	f	class:despot::MemoryObject
IsAlpha	src/util/tinyxml/tinyxmlparser.cpp	/^\/*static*\/int TiXmlBase::IsAlpha(unsigned char anyByte,$/;"	f	class:despot::util::tinyxml::TiXmlBase
IsAlphaNum	src/util/tinyxml/tinyxmlparser.cpp	/^\/*static*\/int TiXmlBase::IsAlphaNum(unsigned char anyByte,$/;"	f	class:despot::util::tinyxml::TiXmlBase
IsIdentityUnderConstraint	src/pomdpx/parser/function.cpp	/^bool HierarchyCPT::IsIdentityUnderConstraint(const NamedVar* var,$/;"	f	class:despot::HierarchyCPT
IsIdentityUnderConstraint	src/pomdpx/parser/function.cpp	/^bool TabularCPT::IsIdentityUnderConstraint(const NamedVar* var,$/;"	f	class:despot::TabularCPT
IsInTerminalStateSet	src/pomdpx/parser/parser.cpp	/^bool Parser::IsInTerminalStateSet(const vector<int>& state) const {$/;"	f	class:despot::Parser
IsLeaf	src/core/node.cpp	/^bool VNode::IsLeaf() {$/;"	f	class:despot::VNode
IsSelfLoopingWithoutReward	src/pomdpx/parser/parser.cpp	/^bool Parser::IsSelfLoopingWithoutReward(const vector<int>& state) const {$/;"	f	class:despot::Parser
IsTerminalState	include/despot/pomdpx/parser/parser.h	/^	inline bool IsTerminalState(const std::vector<int>& state) const {$/;"	f	class:despot::Parser
IsType	include/despot/util/util.h	/^bool IsType(const SrcType* src) {$/;"	f	namespace:despot
IsValid	examples/cpp_models/chain/src/chain.cpp	/^bool ChainState::IsValid() const {$/;"	f	class:despot::ChainState
IsVariableCurrName	src/pomdpx/parser/variable.cpp	/^bool Variable::IsVariableCurrName(string name, const vector<StateVar>& vars) {$/;"	f	class:despot::Variable
IsVariableName	src/pomdpx/parser/variable.cpp	/^bool Variable::IsVariableName(string name, const vector<NamedVar>& vars) {$/;"	f	class:despot::Variable
IsVariableName	src/pomdpx/parser/variable.cpp	/^bool Variable::IsVariableName(string name, const vector<StateVar>& vars) {$/;"	f	class:despot::Variable
IsVariablePrevName	src/pomdpx/parser/variable.cpp	/^bool Variable::IsVariablePrevName(string name, const vector<StateVar>& vars) {$/;"	f	class:despot::Variable
IsWhiteSpace	include/despot/util/tinyxml/tinyxml.h	/^	inline static bool IsWhiteSpace(char c) {$/;"	f	class:despot::util::tinyxml::TiXmlBase
IsWhiteSpace	include/despot/util/tinyxml/tinyxml.h	/^	inline static bool IsWhiteSpace(int c) {$/;"	f	class:despot::util::tinyxml::TiXmlBase
IsWhiteSpaceCondensed	include/despot/util/tinyxml/tinyxml.h	/^	static bool IsWhiteSpaceCondensed() {$/;"	f	class:despot::util::tinyxml::TiXmlBase
IterateChildren	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
IterateChildren	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* IterateChildren(const TiXmlNode* previous) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
IterateChildren	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* IterateChildren(const char * _value, const TiXmlNode* previous) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
IterateChildren	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
IterateChildren	src/util/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren(const TiXmlNode* previous) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
IterateChildren	src/util/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren(const char * val,$/;"	f	class:despot::util::tinyxml::TiXmlNode
LASERTAG_H	examples/cpp_models/tag/src/laser_tag/laser_tag.h	2;"	d
LASER_TAG_BIN	examples/cpp_models/tag/Makefile	/^LASER_TAG_BIN = lasertag $/;"	m
LASER_TAG_SOURCES	examples/cpp_models/tag/Makefile	/^LASER_TAG_SOURCES = $(shell find -L $(SRCDIR)\/base $(SRCDIR)\/laser_tag -name '*.cpp')$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = -O3 -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	examples/cpp_models/adventurer/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	examples/cpp_models/bridge/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	examples/cpp_models/chain/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	examples/cpp_models/localnavigation/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	examples/cpp_models/navigation/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	examples/cpp_models/pathfollowing/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	examples/cpp_models/pocman/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	examples/cpp_models/reg_demo/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	examples/cpp_models/rock_sample/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	examples/cpp_models/simpleNavi/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	examples/cpp_models/simple_rock_sample/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	examples/cpp_models/tag/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	examples/cpp_models/tiger/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	examples/pomdpx_models/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LEFT	examples/cpp_models/bridge/src/bridge.cpp	/^int Bridge::LEFT = 0;$/;"	m	class:despot::Bridge	file:
LEFT	examples/cpp_models/bridge/src/bridge.h	/^	static int LEFT, RIGHT, HELP, BRIDGELENGTH;$/;"	m	class:despot::Bridge
LEFT	examples/cpp_models/tiger/src/tiger.cpp	/^const int Tiger::LEFT = 0;$/;"	m	class:despot::Tiger	file:
LEFT	examples/cpp_models/tiger/src/tiger.h	/^	static const int LEFT, RIGHT, LISTEN;$/;"	m	class:despot::Tiger
LIBDIR	examples/cpp_models/adventurer/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	examples/cpp_models/bridge/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	examples/cpp_models/chain/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	examples/cpp_models/localnavigation/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	examples/cpp_models/navigation/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	examples/cpp_models/pathfollowing/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	examples/cpp_models/pocman/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	examples/cpp_models/reg_demo/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	examples/cpp_models/rock_sample/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	examples/cpp_models/simpleNavi/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	examples/cpp_models/simple_rock_sample/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	examples/cpp_models/tag/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	examples/cpp_models/tiger/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	examples/pomdpx_models/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LISTEN	examples/cpp_models/tiger/src/tiger.cpp	/^const int Tiger::LISTEN = 2;$/;"	m	class:despot::Tiger	file:
LISTEN	examples/cpp_models/tiger/src/tiger.h	/^	static const int LEFT, RIGHT, LISTEN;$/;"	m	class:despot::Tiger
LOG	include/despot/util/logging.h	53;"	d
LOGGING_H	include/despot/util/logging.h	2;"	d
LOWER_BOUND_H	include/despot/core/lower_bound.h	2;"	d
LaserRange	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^double LaserTag::LaserRange(const State& state, int dir) const {$/;"	f	class:despot::LaserTag
LaserRange	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^double NoisyLaserTag::LaserRange(const State& state, int dir) const {$/;"	f	class:despot::NoisyLaserTag
LaserTag	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^LaserTag::LaserTag() :$/;"	f	class:despot::LaserTag
LaserTag	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^LaserTag::LaserTag(string params_file) :$/;"	f	class:despot::LaserTag
LaserTag	examples/cpp_models/tag/src/laser_tag/laser_tag.h	/^class LaserTag: public BaseTag {$/;"	c	namespace:despot
Last	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* Last() {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
Last	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlAttribute* Last() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
LastAction	include/despot/core/history.h	/^	int LastAction() const {$/;"	f	class:despot::History
LastAttribute	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* LastAttribute() {$/;"	f	class:despot::util::tinyxml::TiXmlElement
LastAttribute	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlAttribute* LastAttribute() const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
LastChild	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* LastChild( const std::string& _value ) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
LastChild	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* LastChild() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
LastChild	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* LastChild(const char * _value) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
LastChild	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* LastChild( const std::string& _value ) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
LastChild	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* LastChild() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
LastChild	src/util/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::LastChild(const char * _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
LastObservation	include/despot/core/history.h	/^	OBS_TYPE LastObservation() const {$/;"	f	class:despot::History
Last_Action	src/evaluator.cpp	/^int Last_Action =0;$/;"	m	namespace:despot	file:
Learn	src/core/lower_bound.cpp	/^void BeliefLowerBound::Learn(VNode* tree) {$/;"	f	class:despot::BeliefLowerBound
Learn	src/core/lower_bound.cpp	/^void ScenarioLowerBound::Learn(VNode* tree) {$/;"	f	class:despot::ScenarioLowerBound
Length	src/random_streams.cpp	/^int RandomStreams::Length() const {$/;"	f	class:despot::RandomStreams
Likelihood	src/solver/aems.cpp	/^double AEMS::Likelihood(QNode* qnode) {$/;"	f	class:despot::AEMS
LineBreak	include/despot/util/tinyxml/tinyxml.h	/^	const char* LineBreak() {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
LinePartIterator	include/despot/util/optionparser.h	/^		LinePartIterator(const Descriptor usage[]) :$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
LinePartIterator	include/despot/util/optionparser.h	/^	class LinePartIterator {$/;"	c	struct:despot::option::PrintUsageImplementation
LineWrapper	include/despot/util/optionparser.h	/^		LineWrapper(int x1, int x2) :$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
LineWrapper	include/despot/util/optionparser.h	/^	class LineWrapper {$/;"	c	struct:despot::option::PrintUsageImplementation
LinkEndChild	src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlNode::LinkEndChild(TiXmlNode* node) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
LoadFile	include/despot/util/tinyxml/tinyxml.h	/^	bool LoadFile( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING ) \/\/\/< STL std::string version.$/;"	f	class:despot::util::tinyxml::TiXmlDocument
LoadFile	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::LoadFile(FILE* file, TiXmlEncoding encoding) {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
LoadFile	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::LoadFile(TiXmlEncoding encoding) {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
LoadFile	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::LoadFile(const char* _filename, TiXmlEncoding encoding) {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
LocalApproxScenarioUpperBound	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	LocalApproxScenarioUpperBound(const Navigation* model) :$/;"	f	class:despot::LocalApproxScenarioUpperBound
LocalApproxScenarioUpperBound	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^class LocalApproxScenarioUpperBound: public ScenarioUpperBound {$/;"	c	namespace:despot	file:
LocalApproxScenarioUpperBound	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	LocalApproxScenarioUpperBound(const Navigation* model) :$/;"	f	class:despot::LocalApproxScenarioUpperBound
LocalApproxScenarioUpperBound	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^class LocalApproxScenarioUpperBound: public ScenarioUpperBound {$/;"	c	namespace:despot	file:
LocalLegalParticleLowerBound	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	LocalLegalParticleLowerBound(const DSPOMDP* model) :$/;"	f	class:despot::LocalLegalParticleLowerBound
LocalLegalParticleLowerBound	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^class LocalLegalParticleLowerBound: public ParticleLowerBound {$/;"	c	namespace:despot	file:
LocalLegalParticleLowerBound	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	LocalLegalParticleLowerBound(const DSPOMDP* model) :$/;"	f	class:despot::LocalLegalParticleLowerBound
LocalLegalParticleLowerBound	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^class LocalLegalParticleLowerBound: public ParticleLowerBound {$/;"	c	namespace:despot	file:
LocalMove	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^bool Navigation::LocalMove(State& state, const History& history, int obs) const {$/;"	f	class:despot::Navigation
LocalMove	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^bool Navigation::LocalMove(State& state, const History& history, int obs) const {$/;"	f	class:despot::Navigation
LocalMove	examples/cpp_models/pocman/src/pocman.cpp	/^bool Pocman::LocalMove(State& state, const History& history, int obs) const {$/;"	f	class:despot::Pocman
LocalNaviPOMCPPrior	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	LocalNaviPOMCPPrior(const Navigation* model) :$/;"	f	class:despot::LocalNaviPOMCPPrior
LocalNaviPOMCPPrior	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^class LocalNaviPOMCPPrior: public POMCPPrior {$/;"	c	namespace:despot	file:
LocalNaviPOMCPPrior	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	LocalNaviPOMCPPrior(const Navigation* model) :$/;"	f	class:despot::LocalNaviPOMCPPrior
LocalNaviPOMCPPrior	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^class LocalNaviPOMCPPrior: public POMCPPrior {$/;"	c	namespace:despot	file:
LocalnaviSmartPolicy	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	LocalnaviSmartPolicy(const Navigation* model, ParticleLowerBound* bound) :$/;"	f	class:despot::LocalnaviSmartPolicy
LocalnaviSmartPolicy	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^class LocalnaviSmartPolicy : public Policy {$/;"	c	namespace:despot	file:
LocalnaviSmartPolicy	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	LocalnaviSmartPolicy(const Navigation* model, ParticleLowerBound* bound) :$/;"	f	class:despot::LocalnaviSmartPolicy
LocalnaviSmartPolicy	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^class LocalnaviSmartPolicy : public Policy {$/;"	c	namespace:despot	file:
LocalnavigationParticleUpperBound	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	LocalnavigationParticleUpperBound(const Navigation* model) :$/;"	f	class:despot::LocalnavigationParticleUpperBound
LocalnavigationParticleUpperBound	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^class LocalnavigationParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
LocalnavigationParticleUpperBound	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	LocalnavigationParticleUpperBound(const Navigation* model) :$/;"	f	class:despot::LocalnavigationParticleUpperBound
LocalnavigationParticleUpperBound	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^class LocalnavigationParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
LogNumInitialStates	src/pomdpx/parser/parser.cpp	/^double Parser::LogNumInitialStates() const {$/;"	f	class:despot::Parser
LogNumObservations	src/pomdpx/parser/parser.cpp	/^double Parser::LogNumObservations() const {$/;"	f	class:despot::Parser
LogNumStates	src/pomdpx/parser/parser.cpp	/^double Parser::LogNumStates() const {$/;"	f	class:despot::Parser
LookaheadUpperBound	include/despot/core/upper_bound.h	/^class LookaheadUpperBound: public ScenarioUpperBound {$/;"	c	namespace:despot
LookaheadUpperBound	src/core/upper_bound.cpp	/^LookaheadUpperBound::LookaheadUpperBound(const DSPOMDP* model,$/;"	f	class:despot::LookaheadUpperBound
MAX_ENTITY_LENGTH	include/despot/util/tinyxml/tinyxml.h	/^		NUM_ENTITY = 5, MAX_ENTITY_LENGTH = 6$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon14
MDP	include/despot/core/mdp.h	/^class MDP {$/;"	c	namespace:despot
MDPUpperBound	include/despot/core/upper_bound.h	/^class MDPUpperBound: public ParticleUpperBound, public BeliefUpperBound {$/;"	c	namespace:despot
MDPUpperBound	src/core/upper_bound.cpp	/^MDPUpperBound::MDPUpperBound(const MDP* model,$/;"	f	class:despot::MDPUpperBound
MDP_H	include/despot/core/mdp.h	2;"	d
MEMORYPOOL_H	include/despot/util/memorypool.h	2;"	d
MMAPInferencer	include/despot/core/pomdp.h	/^class MMAPInferencer {$/;"	c	namespace:despot
MMAPStatePolicy	include/despot/core/policy.h	/^class MMAPStatePolicy: public Policy { \/\/ Marginal MAP state policy$/;"	c	namespace:despot
MMAPStatePolicy	src/core/policy.cpp	/^MMAPStatePolicy::MMAPStatePolicy(const DSPOMDP* model,$/;"	f	class:despot::MMAPStatePolicy
MSC_Builtin_CLZ	include/despot/util/optionparser.h	/^struct MSC_Builtin_CLZ$/;"	s	namespace:despot::option
MajorityActionPolicy	include/despot/core/policy.h	/^class MajorityActionPolicy: public Policy {$/;"	c	namespace:despot
MajorityActionPolicy	src/core/policy.cpp	/^MajorityActionPolicy::MajorityActionPolicy(const DSPOMDP* model,$/;"	f	class:despot::MajorityActionPolicy
MajorityRockSampleState	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^RockSampleState* BaseRockSample::MajorityRockSampleState($/;"	f	class:despot::BaseRockSample
MakeCopy	examples/cpp_models/chain/src/chain.cpp	/^Belief* FullChainBelief::MakeCopy() const {$/;"	f	class:despot::FullChainBelief
MakeCopy	examples/cpp_models/chain/src/chain.cpp	/^Belief* SemiChainBelief::MakeCopy() const {$/;"	f	class:despot::SemiChainBelief
MakeCopy	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	Belief* MakeCopy() const {$/;"	f	class:despot::RockSampleBelief
MakeCopy	include/despot/core/pomdp.h	/^	inline virtual DSPOMDP* MakeCopy() const {$/;"	f	class:despot::DSPOMDP
MakeCopy	src/core/belief.cpp	/^Belief* ParticleBelief::MakeCopy() const {$/;"	f	class:despot::ParticleBelief
MakeCopy	src/pomdpx/pomdpx.cpp	/^DSPOMDP* POMDPX::MakeCopy() const {$/;"	f	class:despot::POMDPX
MakeObservations	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^int Navigation::MakeObservations(const NavigationState& navstate) const {$/;"	f	class:despot::Navigation
MakeObservations	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^int Navigation::MakeObservations(const NavigationState& navstate) const {$/;"	f	class:despot::Navigation
MakeObservations	examples/cpp_models/pocman/src/pocman.cpp	/^int Pocman::MakeObservations(const PocmanState& pocstate) const {$/;"	f	class:despot::Pocman
ManhattanDistance	src/util/coord.cpp	/^int Coord::ManhattanDistance(Coord c1, Coord c2) {$/;"	f	class:despot::Coord
MeanMDPPolicy	examples/cpp_models/chain/src/chain.cpp	/^	MeanMDPPolicy(const Chain* model, ParticleLowerBound* bound, Belief* belief = NULL) :$/;"	f	class:despot::MeanMDPPolicy
MeanMDPPolicy	examples/cpp_models/chain/src/chain.cpp	/^class MeanMDPPolicy: public Policy {$/;"	c	namespace:despot	file:
MeanMDPScenarioLowerBound	examples/cpp_models/chain/src/chain.cpp	/^	MeanMDPScenarioLowerBound(const Chain* model, Belief* belief = NULL) :$/;"	f	class:despot::MeanMDPScenarioLowerBound
MeanMDPScenarioLowerBound	examples/cpp_models/chain/src/chain.cpp	/^class MeanMDPScenarioLowerBound: public ScenarioLowerBound {$/;"	c	namespace:despot	file:
MemoryObject	include/despot/util/memorypool.h	/^class MemoryObject {$/;"	c	namespace:despot
MemoryPool	include/despot/util/memorypool.h	/^	MemoryPool() :$/;"	f	class:despot::MemoryPool
MemoryPool	include/despot/util/memorypool.h	/^class MemoryPool {$/;"	c	namespace:despot
MicroPocman	examples/cpp_models/pocman/src/pocman.cpp	/^MicroPocman::MicroPocman() :$/;"	f	class:despot::MicroPocman
MicroPocman	examples/cpp_models/pocman/src/pocman.h	/^class MicroPocman: public Pocman {$/;"	c	namespace:despot
MiniPocman	examples/cpp_models/pocman/src/pocman.cpp	/^MiniPocman::MiniPocman() :$/;"	f	class:despot::MiniPocman
MiniPocman	examples/cpp_models/pocman/src/pocman.h	/^class MiniPocman: public Pocman {$/;"	c	namespace:despot
ModeStatePolicy	include/despot/core/policy.h	/^class ModeStatePolicy: public Policy {$/;"	c	namespace:despot
ModeStatePolicy	src/core/policy.cpp	/^ModeStatePolicy::ModeStatePolicy(const DSPOMDP* model,$/;"	f	class:despot::ModeStatePolicy
MostLikelyOpponentPosition	examples/cpp_models/tag/src/base/base_tag.cpp	/^Coord BaseTag::MostLikelyOpponentPosition($/;"	f	class:despot::BaseTag
MostLikelyRobPosition	examples/cpp_models/tag/src/base/base_tag.cpp	/^Coord BaseTag::MostLikelyRobPosition(const vector<State*>& particles) const {$/;"	f	class:despot::BaseTag
MostLikelyState	examples/cpp_models/tag/src/base/base_tag.cpp	/^const TagState& BaseTag::MostLikelyState($/;"	f	class:despot::BaseTag
MoveGhost	examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::MoveGhost(PocmanState& pocstate, int g, Random &random) const {$/;"	f	class:despot::Pocman
MoveGhostAggressive	examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::MoveGhostAggressive(PocmanState& pocstate, int g,$/;"	f	class:despot::Pocman
MoveGhostDefensive	examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::MoveGhostDefensive(PocmanState& pocstate, int g,$/;"	f	class:despot::Pocman
MoveGhostRandom	examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::MoveGhostRandom(PocmanState& pocstate, int g,$/;"	f	class:despot::Pocman
MovePed	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::MovePed(NavigationState& navstate, int g, Random &random) const {$/;"	f	class:despot::Navigation
MovePed	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::MovePed(NavigationState& navstate, int g, Random &random) const {$/;"	f	class:despot::Navigation
MovePedAggressive	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::MovePedAggressive(NavigationState& navstate, int g, Random &random) const {$/;"	f	class:despot::Navigation
MovePedAggressive	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::MovePedAggressive(NavigationState& navstate, int g, Random &random) const {$/;"	f	class:despot::Navigation
MovePedDefensive	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::MovePedDefensive(NavigationState& navstate, int g,$/;"	f	class:despot::Navigation
MovePedDefensive	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::MovePedDefensive(NavigationState& navstate, int g,$/;"	f	class:despot::Navigation
MovePedPath	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::MovePedPath(NavigationState& navstate, int g,$/;"	f	class:despot::Navigation
MovePedPath	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::MovePedPath(NavigationState& navstate, int g,$/;"	f	class:despot::Navigation
MovePedRandom	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::MovePedRandom(NavigationState& navstate, int g,$/;"	f	class:despot::Navigation
MovePedRandom	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::MovePedRandom(NavigationState& navstate, int g,$/;"	f	class:despot::Navigation
NAVIGATION_H	examples/cpp_models/localnavigation/src/localnavigation.h	2;"	d
NAVIGATION_H	examples/cpp_models/navigation/src/navigation.h	2;"	d
NAVIGATION_H	examples/cpp_models/pathfollowing/src/pathfollowing.h	2;"	d
NBEAMS	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^int LaserTag::NBEAMS = 8;$/;"	m	class:despot::LaserTag	file:
NBEAMS	examples/cpp_models/tag/src/laser_tag/laser_tag.h	/^	static int NBEAMS;$/;"	m	class:despot::LaserTag
NBEAMS	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^int NoisyLaserTag::NBEAMS = 8;$/;"	m	class:despot::NoisyLaserTag	file:
NBEAMS	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.h	/^	static int NBEAMS;$/;"	m	class:despot::NoisyLaserTag
NEG_INFTY	src/core/globals.cpp	/^const double NEG_INFTY = -POS_INFTY;$/;"	m	namespace:despot::Globals	file:
NODE_H	include/despot/core/node.h	2;"	d
NOISE	examples/cpp_models/tiger/src/tiger.cpp	/^const double Tiger::NOISE = 0.15;$/;"	m	class:despot::Tiger	file:
NOISE	examples/cpp_models/tiger/src/tiger.h	/^	static const double NOISE;$/;"	m	class:despot::Tiger
NOISYLASERTAG_H	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.h	2;"	d
NOISY_TAG_BIN	examples/cpp_models/tag/Makefile	/^NOISY_TAG_BIN = noisytag $/;"	m
NOISY_TAG_SOURCES	examples/cpp_models/tag/Makefile	/^NOISY_TAG_SOURCES = $(shell find -L $(SRCDIR)\/base $(SRCDIR)\/noisy_laser_tag -name '*.cpp')$/;"	m
NONE	include/despot/util/logging.h	/^	static const int NONE, ERROR, WARN, INFO, DEBUG, VERBOSE;$/;"	m	class:despot::logging
NONE	src/util/logging.cpp	/^const int logging::NONE = 0;$/;"	m	class:despot::logging	file:
NORTH	include/despot/util/coord.h	/^		SOUTH, EAST, NORTH, WEST, NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST$/;"	e	enum:despot::Compass::__anon15
NORTHEAST	include/despot/util/coord.h	/^		SOUTH, EAST, NORTH, WEST, NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST$/;"	e	enum:despot::Compass::__anon15
NORTHWEST	include/despot/util/coord.h	/^		SOUTH, EAST, NORTH, WEST, NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST$/;"	e	enum:despot::Compass::__anon15
NUM_ENTITY	include/despot/util/tinyxml/tinyxml.h	/^		NUM_ENTITY = 5, MAX_ENTITY_LENGTH = 6$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon14
NUM_MDP_STATES	examples/cpp_models/chain/src/chain.h	/^	const static int NUM_MDP_STATES = 5;$/;"	m	class:despot::Chain
Name	include/despot/util/tinyxml/tinyxml.h	/^	const char* Name() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
NameTStr	include/despot/util/tinyxml/tinyxml.h	/^	const TIXML_STRING& NameTStr() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
NamedVar	include/despot/pomdpx/parser/variable.h	/^class NamedVar: public Variable {$/;"	c	namespace:despot
NamedVar	src/pomdpx/parser/variable.cpp	/^NamedVar::NamedVar() {$/;"	f	class:despot::NamedVar
NamedVar	src/pomdpx/parser/variable.cpp	/^NamedVar::NamedVar(string name) :$/;"	f	class:despot::NamedVar
Navigation	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^Navigation::Navigation(int xsize, int ysize):localmap( xsize, ysize), num_peds_(3),pedes_range_(2),	smell_range_(2), round_num(0){$/;"	f	class:despot::Navigation
Navigation	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^Navigation::Navigation(string params_file) {$/;"	f	class:despot::Navigation
Navigation	examples/cpp_models/localnavigation/src/localnavigation.h	/^class Navigation: public DSPOMDP {$/;"	c	namespace:despot
Navigation	examples/cpp_models/navigation/src/navigation.cpp	/^Navigation::Navigation() {$/;"	f	class:despot::Navigation
Navigation	examples/cpp_models/navigation/src/navigation.cpp	/^Navigation::Navigation(string params_file) {$/;"	f	class:despot::Navigation
Navigation	examples/cpp_models/navigation/src/navigation.h	/^class Navigation: public DSPOMDP,$/;"	c	namespace:despot
Navigation	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^Navigation::Navigation(int xsize, int ysize):localmap( xsize, ysize), num_peds_(4),pedes_range_(2),	smell_range_(2), path_index(0){$/;"	f	class:despot::Navigation
Navigation	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^Navigation::Navigation(string params_file) {$/;"	f	class:despot::Navigation
Navigation	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^class Navigation: public DSPOMDP {$/;"	c	namespace:despot
NavigationBelief	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^NavigationBelief::NavigationBelief(vector<State*> particles, const DSPOMDP* model,$/;"	f	class:despot::NavigationBelief
NavigationBelief	examples/cpp_models/localnavigation/src/localnavigation.h	/^class NavigationBelief: public ParticleBelief {$/;"	c	namespace:despot
NavigationBelief	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^NavigationBelief::NavigationBelief(vector<State*> particles, const DSPOMDP* model,$/;"	f	class:despot::NavigationBelief
NavigationBelief	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^class NavigationBelief: public ParticleBelief {$/;"	c	namespace:despot
NavigationState	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^NavigationState::NavigationState(){$/;"	f	class:despot::NavigationState
NavigationState	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^NavigationState::NavigationState(int _state_id) {$/;"	f	class:despot::NavigationState
NavigationState	examples/cpp_models/localnavigation/src/localnavigation.h	/^class NavigationState: public State {$/;"	c	namespace:despot
NavigationState	examples/cpp_models/navigation/src/navigation.cpp	/^NavigationState::NavigationState() {$/;"	f	class:despot::NavigationState
NavigationState	examples/cpp_models/navigation/src/navigation.cpp	/^NavigationState::NavigationState(int _state_id) {$/;"	f	class:despot::NavigationState
NavigationState	examples/cpp_models/navigation/src/navigation.h	/^class NavigationState: public State {$/;"	c	namespace:despot
NavigationState	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^NavigationState::NavigationState(){$/;"	f	class:despot::NavigationState
NavigationState	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^NavigationState::NavigationState(int _state_id) {$/;"	f	class:despot::NavigationState
NavigationState	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^class NavigationState: public State {$/;"	c	namespace:despot
Navigation_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	const Navigation* Navigation_;$/;"	m	class:despot::NavigationBelief
Navigation_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	const Navigation* Navigation_;$/;"	m	class:despot::NavigationBelief
NewChunk	include/despot/util/memorypool.h	/^	void NewChunk() {$/;"	f	class:despot::MemoryPool
NewLevel	examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::NewLevel(PocmanState& pocstate) const {$/;"	f	class:despot::Pocman
Next	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* Next() {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
Next	src/util/dirichlet.cpp	/^vector<double> Dirichlet::Next() {$/;"	f	class:despot::Dirichlet
Next	src/util/dirichlet.cpp	/^vector<double> Dirichlet::Next(vector<double> alpha) {$/;"	f	class:despot::Dirichlet
Next	src/util/gamma.cpp	/^double Gamma::Next() {$/;"	f	class:despot::Gamma
Next	src/util/gamma.cpp	/^double Gamma::Next(double k, double theta) {$/;"	f	class:despot::Gamma
Next	src/util/seeds.cpp	/^unsigned Seeds::Next() {$/;"	f	class:despot::Seeds
Next	src/util/seeds.cpp	/^vector<unsigned> Seeds::Next(int n) {$/;"	f	class:despot::Seeds
Next	src/util/tinyxml/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Next() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
NextCategory	src/util/random.cpp	/^int Random::NextCategory(const vector<double>& category_probs) {$/;"	f	class:despot::Random
NextDouble	src/util/random.cpp	/^double Random::NextDouble() {$/;"	f	class:despot::Random
NextDouble	src/util/random.cpp	/^double Random::NextDouble(double min, double max) {$/;"	f	class:despot::Random
NextElement	include/despot/util/random.h	/^	T NextElement(const std::vector<T>& vec) {$/;"	f	class:despot::Random
NextGaussian	src/util/random.cpp	/^double Random::NextGaussian() {$/;"	f	class:despot::Random
NextInt	src/util/random.cpp	/^int Random::NextInt(int min, int max) {$/;"	f	class:despot::Random
NextInt	src/util/random.cpp	/^int Random::NextInt(int n) {$/;"	f	class:despot::Random
NextPos	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^Coord Navigation::NextPos(const Coord& from, int dir) const {$/;"	f	class:despot::Navigation
NextPos	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^Coord Navigation::NextPos(const Coord& from, int dir) const {$/;"	f	class:despot::Navigation
NextPos	examples/cpp_models/pocman/src/pocman.cpp	/^Coord Pocman::NextPos(const Coord& from, int dir) const {$/;"	f	class:despot::Pocman
NextPosPed	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^Coord Navigation::NextPosPed(const NavigationState& navstate, const Coord& from) const {$/;"	f	class:despot::Navigation
NextPos_Path	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^Coord Navigation::NextPos_Path(const Coord& from, int action,int cur_pathidx) const {$/;"	f	class:despot::Navigation
NextPosition	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^int Navigation::NextPosition(int pos, int a) const {$/;"	f	class:despot::Navigation
NextPosition	examples/cpp_models/navigation/src/navigation.cpp	/^int Navigation::NextPosition(int pos, int a) const {$/;"	f	class:despot::Navigation
NextPosition	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^int Navigation::NextPosition(int pos, int a) const {$/;"	f	class:despot::Navigation
NextRobPosition	examples/cpp_models/tag/src/base/base_tag.cpp	/^int BaseTag::NextRobPosition(int rob, int a) const {$/;"	f	class:despot::BaseTag
NextSibling	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* NextSibling( const std::string& _value) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSibling	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* NextSibling() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSibling	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* NextSibling(const char* _next) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSibling	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* NextSibling( const std::string& _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSibling	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* NextSibling() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSibling	src/util/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::NextSibling(const char * _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSiblingElement	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* NextSiblingElement( const std::string& _value) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSiblingElement	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* NextSiblingElement() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSiblingElement	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* NextSiblingElement(const char *_next) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSiblingElement	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlElement* NextSiblingElement( const std::string& _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSiblingElement	src/util/tinyxml/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSiblingElement	src/util/tinyxml/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement(const char * _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextState	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^int BaseRockSample::NextState(int s, int a) const {$/;"	f	class:despot::BaseRockSample
NextUnsigned	src/util/random.cpp	/^unsigned Random::NextUnsigned() {$/;"	f	class:despot::Random
NoChildren	include/despot/util/tinyxml/tinyxml.h	/^	bool NoChildren() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
Node	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* Node() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
NodeType	include/despot/util/tinyxml/tinyxml.h	/^	enum NodeType {$/;"	g	class:despot::util::tinyxml::TiXmlNode
NoisyInitialParticleSet	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^vector<State*> BaseRockSample::NoisyInitialParticleSet() const {$/;"	f	class:despot::BaseRockSample
NoisyLaserTag	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^NoisyLaserTag::NoisyLaserTag() :$/;"	f	class:despot::NoisyLaserTag
NoisyLaserTag	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^NoisyLaserTag::NoisyLaserTag(string params_file) :$/;"	f	class:despot::NoisyLaserTag
NoisyLaserTag	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.h	/^class NoisyLaserTag: public BaseTag {$/;"	c	namespace:despot
NoisyStep	src/pomdpx/pomdpx.cpp	/^bool POMDPX::NoisyStep(State& s, double random_num, int action) const {$/;"	f	class:despot::POMDPX
None	include/despot/util/optionparser.h	/^	static ArgStatus None(const Option&, bool) {$/;"	f	struct:despot::option::Arg
NumActions	examples/cpp_models/adventurer/src/adventurer.h	/^	inline int NumActions() const {$/;"	f	class:despot::Adventurer
NumActions	examples/cpp_models/bridge/src/bridge.cpp	/^int Bridge::NumActions() const {$/;"	f	class:despot::Bridge
NumActions	examples/cpp_models/chain/src/chain.cpp	/^int Chain::NumActions() const {$/;"	f	class:despot::Chain
NumActions	examples/cpp_models/localnavigation/src/localnavigation.h	/^	inline int NumActions() const {$/;"	f	class:despot::Navigation
NumActions	examples/cpp_models/navigation/src/navigation.h	/^	inline int NumActions() const {$/;"	f	class:despot::Navigation
NumActions	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	inline int NumActions() const {$/;"	f	class:despot::Navigation
NumActions	examples/cpp_models/pocman/src/pocman.cpp	/^int Pocman::NumActions() const {$/;"	f	class:despot::Pocman
NumActions	examples/cpp_models/reg_demo/src/reg_demo.h	/^	inline int NumActions() const {$/;"	f	class:despot::RegDemo
NumActions	examples/cpp_models/rock_sample/src/fvrs/fvrs.cpp	/^int FVRS::NumActions() const {$/;"	f	class:despot::FVRS
NumActions	examples/cpp_models/rock_sample/src/rock_sample/rock_sample.cpp	/^int RockSample::NumActions() const {$/;"	f	class:despot::RockSample
NumActions	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^int SimpleNavi::NumActions() const {$/;"	f	class:despot::SimpleNavi
NumActions	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^int SimpleRockSample::NumActions() const {$/;"	f	class:despot::SimpleRockSample
NumActions	examples/cpp_models/tag/src/base/base_tag.h	/^	inline int NumActions() const {$/;"	f	class:despot::BaseTag
NumActions	examples/cpp_models/tiger/src/tiger.cpp	/^int Tiger::NumActions() const {$/;"	f	class:despot::Tiger
NumActions	include/despot/pomdpx/parser/parser.h	/^	inline int NumActions() const {$/;"	f	class:despot::Parser
NumActions	src/pomdpx/pomdpx.cpp	/^int POMDPX::NumActions() const {$/;"	f	class:despot::POMDPX
NumActiveParticles	examples/cpp_models/adventurer/src/adventurer.cpp	/^int Adventurer::NumActiveParticles() const {$/;"	f	class:despot::Adventurer
NumActiveParticles	examples/cpp_models/bridge/src/bridge.cpp	/^int Bridge::NumActiveParticles() const {$/;"	f	class:despot::Bridge
NumActiveParticles	examples/cpp_models/chain/src/chain.cpp	/^int Chain::NumActiveParticles() const {$/;"	f	class:despot::Chain
NumActiveParticles	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^int Navigation::NumActiveParticles() const {$/;"	f	class:despot::Navigation
NumActiveParticles	examples/cpp_models/navigation/src/navigation.cpp	/^int Navigation::NumActiveParticles() const {$/;"	f	class:despot::Navigation
NumActiveParticles	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^int Navigation::NumActiveParticles() const {$/;"	f	class:despot::Navigation
NumActiveParticles	examples/cpp_models/pocman/src/pocman.cpp	/^int Pocman::NumActiveParticles() const {$/;"	f	class:despot::Pocman
NumActiveParticles	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^int RegDemo::NumActiveParticles() const {$/;"	f	class:despot::RegDemo
NumActiveParticles	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^int BaseRockSample::NumActiveParticles() const {$/;"	f	class:despot::BaseRockSample
NumActiveParticles	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^int SimpleNavi::NumActiveParticles() const {$/;"	f	class:despot::SimpleNavi
NumActiveParticles	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^int SimpleRockSample::NumActiveParticles() const {$/;"	f	class:despot::SimpleRockSample
NumActiveParticles	examples/cpp_models/tag/src/base/base_tag.cpp	/^int BaseTag::NumActiveParticles() const {$/;"	f	class:despot::BaseTag
NumActiveParticles	examples/cpp_models/tiger/src/tiger.cpp	/^int Tiger::NumActiveParticles() const {$/;"	f	class:despot::Tiger
NumActiveParticles	src/pomdpx/pomdpx.cpp	/^int POMDPX::NumActiveParticles() const {$/;"	f	class:despot::POMDPX
NumCells	src/util/floor.cpp	/^int Floor::NumCells() const {$/;"	f	class:despot::Floor
NumInitialStates	src/pomdpx/parser/parser.cpp	/^int Parser::NumInitialStates() const {$/;"	f	class:despot::Parser
NumObservations	src/pomdpx/parser/parser.cpp	/^OBS_TYPE Parser::NumObservations() const {$/;"	f	class:despot::Parser
NumStates	examples/cpp_models/adventurer/src/adventurer.cpp	/^int Adventurer::NumStates() const {$/;"	f	class:despot::Adventurer
NumStates	examples/cpp_models/bridge/src/bridge.cpp	/^int Bridge::NumStates() const {$/;"	f	class:despot::Bridge
NumStates	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^int Navigation::NumStates() const {$/;"	f	class:despot::Navigation
NumStates	examples/cpp_models/navigation/src/navigation.cpp	/^int Navigation::NumStates() const {$/;"	f	class:despot::Navigation
NumStates	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^int Navigation::NumStates() const {$/;"	f	class:despot::Navigation
NumStates	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^int RegDemo::NumStates() const {$/;"	f	class:despot::RegDemo
NumStates	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^int BaseRockSample::NumStates() const { \/\/ one dummy terminal state$/;"	f	class:despot::BaseRockSample
NumStates	examples/cpp_models/tag/src/base/base_tag.cpp	/^int BaseTag::NumStates() const {$/;"	f	class:despot::BaseTag
NumStates	examples/cpp_models/tiger/src/tiger.cpp	/^int Tiger::NumStates() const {$/;"	f	class:despot::Tiger
NumStates	src/pomdpx/parser/parser.cpp	/^int Parser::NumStates() const {$/;"	f	class:despot::Parser
NumStates	src/pomdpx/pomdpx.cpp	/^int POMDPX::NumStates() const {$/;"	f	class:despot::POMDPX
NumStreams	src/random_streams.cpp	/^int RandomStreams::NumStreams() const {$/;"	f	class:despot::RandomStreams
OBJDIR	Makefile	/^OBJDIR = build$/;"	m
OBJS	Makefile	/^OBJS = $(addprefix $(OBJDIR)\/, $(notdir $(SOURCES:.cpp=.o)))$/;"	m
OBS_TYPE	include/despot/core/globals.h	/^typedef uint64_t OBS_TYPE;$/;"	t	namespace:despot
ONE	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^const OBS_TYPE ONE = 1;$/;"	m	namespace:despot	file:
ONE	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^const OBS_TYPE ONE = 1;$/;"	m	namespace:despot	file:
OPTIONPARSER_H_	include/despot/util/optionparser.h	215;"	d
OStreamWriter	include/despot/util/optionparser.h	/^		OStreamWriter(OStream& o) :$/;"	f	struct:despot::option::PrintUsageImplementation::OStreamWriter
OStreamWriter	include/despot/util/optionparser.h	/^	struct OStreamWriter: public IStringWriter {$/;"	s	struct:despot::option::PrintUsageImplementation
Objects	include/despot/util/memorypool.h	/^		T Objects[Size];$/;"	m	struct:despot::MemoryPool::Chunk
ObsProb	examples/cpp_models/adventurer/src/adventurer.cpp	/^double Adventurer::ObsProb(OBS_TYPE obs, const State& s, int a) const {$/;"	f	class:despot::Adventurer
ObsProb	examples/cpp_models/bridge/src/bridge.cpp	/^double Bridge::ObsProb(OBS_TYPE obs, const State& s, int a) const {$/;"	f	class:despot::Bridge
ObsProb	examples/cpp_models/chain/src/chain.cpp	/^double Chain::ObsProb(OBS_TYPE obs, const State& s, int action) const {$/;"	f	class:despot::Chain
ObsProb	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^double Navigation::ObsProb(OBS_TYPE obs, const State& state, int a) const {$/;"	f	class:despot::Navigation
ObsProb	examples/cpp_models/navigation/src/navigation.cpp	/^double Navigation::ObsProb(OBS_TYPE obs, const State& state, int a) const {$/;"	f	class:despot::Navigation
ObsProb	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^double Navigation::ObsProb(OBS_TYPE obs, const State& state, int a) const {$/;"	f	class:despot::Navigation
ObsProb	examples/cpp_models/pocman/src/pocman.cpp	/^double Pocman::ObsProb(OBS_TYPE obs, const State& state, int action) const {$/;"	f	class:despot::Pocman
ObsProb	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^double RegDemo::ObsProb(OBS_TYPE obs, const State& state, int a) const {$/;"	f	class:despot::RegDemo
ObsProb	examples/cpp_models/rock_sample/src/fvrs/fvrs.cpp	/^double FVRS::ObsProb(OBS_TYPE obs, const State& state, int action) const {$/;"	f	class:despot::FVRS
ObsProb	examples/cpp_models/rock_sample/src/rock_sample/rock_sample.cpp	/^double RockSample::ObsProb(OBS_TYPE obs, const State& state, int action) const {$/;"	f	class:despot::RockSample
ObsProb	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^double SimpleNavi::ObsProb(OBS_TYPE obs, const State& state,$/;"	f	class:despot::SimpleNavi
ObsProb	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^double SimpleRockSample::ObsProb(OBS_TYPE obs, const State& state,$/;"	f	class:despot::SimpleRockSample
ObsProb	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^double LaserTag::ObsProb(OBS_TYPE obs, const State& state, int action) const {$/;"	f	class:despot::LaserTag
ObsProb	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^double NoisyLaserTag::ObsProb(OBS_TYPE obs, const State& state, int action) const {$/;"	f	class:despot::NoisyLaserTag
ObsProb	examples/cpp_models/tag/src/tag/tag.cpp	/^double Tag::ObsProb(OBS_TYPE obs, const State& s, int a) const {$/;"	f	class:despot::Tag
ObsProb	examples/cpp_models/tiger/src/tiger.cpp	/^double Tiger::ObsProb(OBS_TYPE obs, const State& s, int a) const {$/;"	f	class:despot::Tiger
ObsProb	src/pomdpx/parser/parser.cpp	/^double Parser::ObsProb(OBS_TYPE obs, const vector<int>& state,$/;"	f	class:despot::Parser
ObsProb	src/pomdpx/pomdpx.cpp	/^double POMDPX::ObsProb(OBS_TYPE obs, const State& s, int a) const {$/;"	f	class:despot::POMDPX
ObsVar	include/despot/pomdpx/parser/variable.h	74;"	d
Observation	include/despot/core/history.h	/^	OBS_TYPE Observation(int t) const {$/;"	f	class:despot::History
Observe	examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::Observe(const Belief* belief, int action,$/;"	f	class:despot::Adventurer
Observe	examples/cpp_models/bridge/src/bridge.cpp	/^void Bridge::Observe(const Belief* belief, int action,$/;"	f	class:despot::Bridge
Observe	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::Observe(const Belief* belief, int action,$/;"	f	class:despot::BaseRockSample
Observe	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^void LaserTag::Observe(const Belief* belief, int action,$/;"	f	class:despot::LaserTag
Observe	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^void NoisyLaserTag::Observe(const Belief* belief, int action,$/;"	f	class:despot::NoisyLaserTag
Observe	examples/cpp_models/tag/src/tag/tag.cpp	/^void Tag::Observe(const Belief* belief, int action,$/;"	f	class:despot::Tag
OneStepLookaheadChainParticleUpperBound	examples/cpp_models/chain/src/chain.cpp	/^	OneStepLookaheadChainParticleUpperBound(const DSPOMDP* model) {$/;"	f	class:despot::OneStepLookaheadChainParticleUpperBound
OneStepLookaheadChainParticleUpperBound	examples/cpp_models/chain/src/chain.cpp	/^class OneStepLookaheadChainParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
OppTransitionDistribution	examples/cpp_models/tag/src/base/base_tag.cpp	/^map<int, double> BaseTag::OppTransitionDistribution(int state) const {$/;"	f	class:despot::BaseTag
Opposite	src/util/coord.cpp	/^bool Compass::Opposite(int dir1, int dir2) {$/;"	f	class:despot::Compass
Opposite	src/util/coord.cpp	/^int Compass::Opposite(int dir) {$/;"	f	class:despot::Compass
OptimalAction	src/solver/aems.cpp	/^ValuedAction AEMS::OptimalAction(const VNode* vnode) {$/;"	f	class:despot::AEMS
OptimalAction	src/solver/despot.cpp	/^ValuedAction DESPOT::OptimalAction(VNode* vnode) {$/;"	f	class:despot::DESPOT
OptimalAction	src/solver/pomcp.cpp	/^ValuedAction POMCP::OptimalAction(const VNode* vnode) {$/;"	f	class:despot::POMCP
OptimalTigerPolicy	examples/cpp_models/tiger/src/tiger.cpp	/^	OptimalTigerPolicy(const DSPOMDP* model,$/;"	f	class:despot::OptimalTigerPolicy
OptimalTigerPolicy	examples/cpp_models/tiger/src/tiger.cpp	/^class OptimalTigerPolicy: public Policy {$/;"	c	namespace:despot	file:
Option	include/despot/util/optionparser.h	/^	Option() :$/;"	f	class:despot::option::Option
Option	include/despot/util/optionparser.h	/^	Option(const Descriptor* desc_, const char* name_, const char* arg_) {$/;"	f	class:despot::option::Option
Option	include/despot/util/optionparser.h	/^	Option(const Option& orig) {$/;"	f	class:despot::option::Option
Option	include/despot/util/optionparser.h	/^class Option {$/;"	c	namespace:despot::option
OptionIndex	include/despot/simple_tui.h	/^enum OptionIndex {$/;"	g	namespace:despot
OptionParse	src/simple_tui.cpp	/^void SimpleTUI::OptionParse(option::Option *options, int &num_runs,$/;"	f	class:despot::SimpleTUI
Optional	include/despot/util/optionparser.h	/^	static ArgStatus Optional(const Option& option, bool) {$/;"	f	struct:despot::option::Arg
PARSER_H	include/despot/pomdpx/parser/parser.h	2;"	d
POCMAN_H	examples/cpp_models/pocman/src/pocman.h	2;"	d
POLICY_H	include/despot/core/policy.h	2;"	d
POMCP	include/despot/solver/pomcp.h	/^class POMCP: public Solver {$/;"	c	namespace:despot
POMCP	src/solver/pomcp.cpp	/^POMCP::POMCP(const DSPOMDP* model, POMCPPrior* prior, Belief* belief) :$/;"	f	class:despot::POMCP
POMCPPrior	include/despot/solver/pomcp.h	/^class POMCPPrior {$/;"	c	namespace:despot
POMCPPrior	src/solver/pomcp.cpp	/^POMCPPrior::POMCPPrior(const DSPOMDP* model) :$/;"	f	class:despot::POMCPPrior
POMCPScenarioLowerBound	include/despot/core/lower_bound.h	/^class POMCPScenarioLowerBound: public ScenarioLowerBound {$/;"	c	namespace:despot
POMCPScenarioLowerBound	src/core/lower_bound.cpp	/^POMCPScenarioLowerBound::POMCPScenarioLowerBound(const DSPOMDP* model,$/;"	f	class:despot::POMCPScenarioLowerBound
POMCP_H	include/despot/solver/pomcp.h	2;"	d
POMDPEvaluator	include/despot/evaluator.h	/^class POMDPEvaluator: public Evaluator {$/;"	c	namespace:despot
POMDPEvaluator	src/evaluator.cpp	/^POMDPEvaluator::POMDPEvaluator(DSPOMDP* model, string belief_type,$/;"	f	class:despot::POMDPEvaluator
POMDPX	include/despot/pomdpx/pomdpx.h	/^class POMDPX: public MDP,$/;"	c	namespace:despot
POMDPX	src/pomdpx/pomdpx.cpp	/^POMDPX::POMDPX() {$/;"	f	class:despot::POMDPX
POMDPX	src/pomdpx/pomdpx.cpp	/^POMDPX::POMDPX(string params_file) {$/;"	f	class:despot::POMDPX
POMDPXBelief	src/pomdpx/pomdpx.cpp	/^	POMDPXBelief(vector<State*> particles, int max_iter,$/;"	f	class:despot::POMDPXBelief
POMDPXBelief	src/pomdpx/pomdpx.cpp	/^class POMDPXBelief: public ParticleBelief {$/;"	c	namespace:despot	file:
POMDPXGreedyActionPolicy	src/pomdpx/pomdpx.cpp	/^	POMDPXGreedyActionPolicy(const DSPOMDP* model, ParticleLowerBound* bound) :$/;"	f	class:despot::POMDPXGreedyActionPolicy
POMDPXGreedyActionPolicy	src/pomdpx/pomdpx.cpp	/^class POMDPXGreedyActionPolicy: public Policy {$/;"	c	namespace:despot	file:
POMDPXState	include/despot/pomdpx/pomdpx.h	/^class POMDPXState: public State {$/;"	c	namespace:despot
POMDPXState	src/pomdpx/pomdpx.cpp	/^POMDPXState::POMDPXState() {$/;"	f	class:despot::POMDPXState
POMDPXState	src/pomdpx/pomdpx.cpp	/^POMDPXState::POMDPXState(vector<int> aIndex) {$/;"	f	class:despot::POMDPXState
POMDPX_H	include/despot/pomdpx/pomdpx.h	2;"	d
POMDP_H	include/despot/core/pomdp.h	2;"	d
PORT	include/despot/ippc/client.h	/^	std::string PORT;$/;"	m	class:despot::Client
POS_INFTY	src/core/globals.cpp	/^const double POS_INFTY = std::numeric_limits<double>::is_iec559 ?$/;"	m	namespace:despot::Globals	file:
Parent	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* Parent() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
Parent	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* Parent() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ParentSize	src/pomdpx/parser/function.cpp	/^int Function::ParentSize() const {$/;"	f	class:despot::Function
ParentSize	src/pomdpx/parser/function.cpp	/^int HierarchyCPT::ParentSize() const {$/;"	f	class:despot::HierarchyCPT
Parse	src/pomdpx/parser/parser.cpp	/^void Parser::Parse(string fn) {$/;"	f	class:despot::Parser
Parse	src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlAttribute::Parse(const char* p, TiXmlParsingData* data,$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
Parse	src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlComment::Parse(const char* p, TiXmlParsingData* data,$/;"	f	class:despot::util::tinyxml::TiXmlComment
Parse	src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlDeclaration::Parse(const char* p, TiXmlParsingData* data,$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
Parse	src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlDocument::Parse(const char* p, TiXmlParsingData* prevData,$/;"	f	class:despot::util::tinyxml::TiXmlDocument
Parse	src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlElement::Parse(const char* p, TiXmlParsingData* data,$/;"	f	class:despot::util::tinyxml::TiXmlElement
Parse	src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlText::Parse(const char* p, TiXmlParsingData* data,$/;"	f	class:despot::util::tinyxml::TiXmlText
Parse	src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlUnknown::Parse(const char* p, TiXmlParsingData* data,$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
ParseDiscountTag	src/pomdpx/parser/parser.cpp	/^void Parser::ParseDiscountTag(TiXmlHandle& xml_handle) {$/;"	f	class:despot::Parser
ParseHasTerminalTag	src/pomdpx/parser/parser.cpp	/^void Parser::ParseHasTerminalTag(TiXmlHandle& xml_handle) {$/;"	f	class:despot::Parser
ParseHorizonTag	src/pomdpx/parser/parser.cpp	/^void Parser::ParseHorizonTag(TiXmlHandle& xml_handle) {$/;"	f	class:despot::Parser
ParseInitialBeliefTag	src/pomdpx/parser/parser.cpp	/^void Parser::ParseInitialBeliefTag(TiXmlHandle& handle) {$/;"	f	class:despot::Parser
ParseObsFunctionTag	src/pomdpx/parser/parser.cpp	/^void Parser::ParseObsFunctionTag(TiXmlHandle& handle) {$/;"	f	class:despot::Parser
ParseRewardFunctionTag	src/pomdpx/parser/parser.cpp	/^void Parser::ParseRewardFunctionTag(TiXmlHandle& handle) {$/;"	f	class:despot::Parser
ParseStateTransitionTag	src/pomdpx/parser/parser.cpp	/^void Parser::ParseStateTransitionTag(TiXmlHandle& handle) {$/;"	f	class:despot::Parser
ParseTerminalStateTag	src/pomdpx/parser/parser.cpp	/^void Parser::ParseTerminalStateTag(TiXmlHandle& handle) {$/;"	f	class:despot::Parser
ParseVariableTag	src/pomdpx/parser/parser.cpp	/^void Parser::ParseVariableTag(TiXmlHandle& xml_handle) {$/;"	f	class:despot::Parser
Parser	include/despot/pomdpx/parser/parser.h	/^class Parser {$/;"	c	namespace:despot
Parser	include/despot/util/optionparser.h	/^	Parser() :$/;"	f	class:despot::option::Parser
Parser	include/despot/util/optionparser.h	/^	Parser(bool gnu, const Descriptor usage[], int argc, char** argv,$/;"	f	class:despot::option::Parser
Parser	include/despot/util/optionparser.h	/^	Parser(bool gnu, const Descriptor usage[], int argc, const char** argv,$/;"	f	class:despot::option::Parser
Parser	include/despot/util/optionparser.h	/^	Parser(const Descriptor usage[], int argc, char** argv, Option options[],$/;"	f	class:despot::option::Parser
Parser	include/despot/util/optionparser.h	/^	Parser(const Descriptor usage[], int argc, const char** argv,$/;"	f	class:despot::option::Parser
Parser	include/despot/util/optionparser.h	/^class Parser {$/;"	c	namespace:despot::option
Parser	src/pomdpx/parser/parser.cpp	/^Parser::Parser() :$/;"	f	class:despot::Parser
Parser	src/pomdpx/parser/parser.cpp	/^Parser::Parser(const Parser&) {$/;"	f	class:despot::Parser
Parser	src/pomdpx/parser/parser.cpp	/^Parser::Parser(string fn) :$/;"	f	class:despot::Parser
ParticleBelief	include/despot/core/belief.h	/^class ParticleBelief: public Belief {$/;"	c	namespace:despot
ParticleBelief	src/core/belief.cpp	/^ParticleBelief::ParticleBelief(vector<State*> particles, const DSPOMDP* model,$/;"	f	class:despot::ParticleBelief
ParticleLowerBound	include/despot/core/lower_bound.h	/^class ParticleLowerBound : public ScenarioLowerBound {$/;"	c	namespace:despot
ParticleLowerBound	src/core/lower_bound.cpp	/^ParticleLowerBound::ParticleLowerBound(const DSPOMDP* model, Belief* belief) :$/;"	f	class:despot::ParticleLowerBound
ParticleUpperBound	include/despot/core/upper_bound.h	/^class ParticleUpperBound : public ScenarioUpperBound {$/;"	c	namespace:despot
ParticleUpperBound	src/core/upper_bound.cpp	/^ParticleUpperBound::ParticleUpperBound() {$/;"	f	class:despot::ParticleUpperBound
Passable	examples/cpp_models/localnavigation/src/localnavigation.h	/^	bool Passable(const Coord& pos) const {$/;"	f	class:despot::Navigation
Passable	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	bool Passable(const Coord& pos) const {$/;"	f	class:despot::Navigation
Passable	examples/cpp_models/pocman/src/pocman.h	/^	bool Passable(const Coord& pos) const {$/;"	f	class:despot::Pocman
Pocman	examples/cpp_models/pocman/src/pocman.cpp	/^Pocman::Pocman(int xsize, int ysize) :$/;"	f	class:despot::Pocman
Pocman	examples/cpp_models/pocman/src/pocman.h	/^class Pocman: public DSPOMDP {$/;"	c	namespace:despot
PocmanApproxScenarioUpperBound	examples/cpp_models/pocman/src/pocman.cpp	/^	PocmanApproxScenarioUpperBound(const Pocman* model) :$/;"	f	class:despot::PocmanApproxScenarioUpperBound
PocmanApproxScenarioUpperBound	examples/cpp_models/pocman/src/pocman.cpp	/^class PocmanApproxScenarioUpperBound: public ScenarioUpperBound {$/;"	c	namespace:despot	file:
PocmanBelief	examples/cpp_models/pocman/src/pocman.cpp	/^PocmanBelief::PocmanBelief(vector<State*> particles, const DSPOMDP* model,$/;"	f	class:despot::PocmanBelief
PocmanBelief	examples/cpp_models/pocman/src/pocman.h	/^class PocmanBelief: public ParticleBelief {$/;"	c	namespace:despot
PocmanLegalParticleLowerBound	examples/cpp_models/pocman/src/pocman.cpp	/^	PocmanLegalParticleLowerBound(const DSPOMDP* model) :$/;"	f	class:despot::PocmanLegalParticleLowerBound
PocmanLegalParticleLowerBound	examples/cpp_models/pocman/src/pocman.cpp	/^class PocmanLegalParticleLowerBound: public ParticleLowerBound {$/;"	c	namespace:despot	file:
PocmanPOMCPPrior	examples/cpp_models/pocman/src/pocman.cpp	/^	PocmanPOMCPPrior(const Pocman* model) :$/;"	f	class:despot::PocmanPOMCPPrior
PocmanPOMCPPrior	examples/cpp_models/pocman/src/pocman.cpp	/^class PocmanPOMCPPrior: public POMCPPrior {$/;"	c	namespace:despot	file:
PocmanSmartParticleUpperBound	examples/cpp_models/pocman/src/pocman.cpp	/^	PocmanSmartParticleUpperBound(const Pocman* model) :$/;"	f	class:despot::PocmanSmartParticleUpperBound
PocmanSmartParticleUpperBound	examples/cpp_models/pocman/src/pocman.cpp	/^class PocmanSmartParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
PocmanSmartPolicy	examples/cpp_models/pocman/src/pocman.cpp	/^	PocmanSmartPolicy(const Pocman* model, ParticleLowerBound* bound) :$/;"	f	class:despot::PocmanSmartPolicy
PocmanSmartPolicy	examples/cpp_models/pocman/src/pocman.cpp	/^class PocmanSmartPolicy : public Policy {$/;"	c	namespace:despot	file:
PocmanState	examples/cpp_models/pocman/src/pocman.h	/^class PocmanState: public State {$/;"	c	namespace:despot
Policy	include/despot/core/policy.h	/^class Policy: public ScenarioLowerBound {$/;"	c	namespace:despot
Policy	src/core/policy.cpp	/^Policy::Policy(const DSPOMDP* model, ParticleLowerBound* particle_lower_bound,$/;"	f	class:despot::Policy
PolicyTreeSize	src/core/node.cpp	/^int QNode::PolicyTreeSize() const {$/;"	f	class:despot::QNode
PolicyTreeSize	src/core/node.cpp	/^int VNode::PolicyTreeSize() const {$/;"	f	class:despot::VNode
PopAll	include/despot/solver/pomcp.h	/^  inline virtual void PopAll() {$/;"	f	class:despot::POMCPPrior
PopLast	include/despot/solver/pomcp.h	/^	inline virtual void PopLast() {$/;"	f	class:despot::POMCPPrior
Previous	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* Previous() {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
Previous	src/util/tinyxml/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Previous() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
PreviousSibling	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* PreviousSibling( const std::string& _value ) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
PreviousSibling	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* PreviousSibling() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
PreviousSibling	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* PreviousSibling(const char *_prev) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
PreviousSibling	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* PreviousSibling( const std::string& _value ) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
PreviousSibling	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* PreviousSibling() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
PreviousSibling	src/util/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::PreviousSibling(const char * _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
Print	include/despot/util/tinyxml/tinyxml.h	/^	virtual void Print(FILE* cfile, int depth) const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
Print	include/despot/util/tinyxml/tinyxml.h	/^	virtual void Print(FILE* cfile, int depth) const {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
Print	include/despot/util/tinyxml/tinyxml.h	/^	void Print() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
Print	src/pomdpx/parser/parser.cpp	/^void Parser::Print(ostream& out) const {$/;"	f	class:despot::Parser
Print	src/util/exec_tracker.cpp	/^void ExecTracker::Print(ostream& out) const {$/;"	f	class:despot::ExecTracker
Print	src/util/tinyxml/tinyxml.cpp	/^void TiXmlAttribute::Print(FILE* cfile, int \/*depth*\/,$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
Print	src/util/tinyxml/tinyxml.cpp	/^void TiXmlComment::Print(FILE* cfile, int depth) const {$/;"	f	class:despot::util::tinyxml::TiXmlComment
Print	src/util/tinyxml/tinyxml.cpp	/^void TiXmlDeclaration::Print(FILE* cfile, int \/*depth*\/,$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
Print	src/util/tinyxml/tinyxml.cpp	/^void TiXmlDocument::Print(FILE* cfile, int depth) const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
Print	src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::Print(FILE* cfile, int depth) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
Print	src/util/tinyxml/tinyxml.cpp	/^void TiXmlText::Print(FILE* cfile, int depth) const {$/;"	f	class:despot::util::tinyxml::TiXmlText
Print	src/util/tinyxml/tinyxml.cpp	/^void TiXmlUnknown::Print(FILE* cfile, int depth) const {$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
PrintAction	examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Adventurer
PrintAction	examples/cpp_models/bridge/src/bridge.cpp	/^void Bridge::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Bridge
PrintAction	examples/cpp_models/chain/src/chain.cpp	/^void Chain::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Chain
PrintAction	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Navigation
PrintAction	examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Navigation
PrintAction	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Navigation
PrintAction	examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Pocman
PrintAction	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::RegDemo
PrintAction	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::BaseRockSample
PrintAction	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^void SimpleNavi::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::SimpleNavi
PrintAction	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^void SimpleRockSample::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::SimpleRockSample
PrintAction	examples/cpp_models/tag/src/base/base_tag.cpp	/^void BaseTag::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::BaseTag
PrintAction	examples/cpp_models/tiger/src/tiger.cpp	/^void Tiger::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Tiger
PrintAction	src/pomdpx/parser/parser.cpp	/^void Parser::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Parser
PrintAction	src/pomdpx/pomdpx.cpp	/^void POMDPX::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::POMDPX
PrintBelief	examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::Adventurer
PrintBelief	examples/cpp_models/bridge/src/bridge.cpp	/^void Bridge::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::Bridge
PrintBelief	examples/cpp_models/chain/src/chain.cpp	/^void Chain::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::Chain
PrintBelief	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::Navigation
PrintBelief	examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::Navigation
PrintBelief	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::Navigation
PrintBelief	examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::Pocman
PrintBelief	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::RegDemo
PrintBelief	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::BaseRockSample
PrintBelief	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^void SimpleNavi::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::SimpleNavi
PrintBelief	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^void SimpleRockSample::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::SimpleRockSample
PrintBelief	examples/cpp_models/tag/src/base/base_tag.cpp	/^void BaseTag::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::BaseTag
PrintBelief	examples/cpp_models/tiger/src/tiger.cpp	/^void Tiger::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::Tiger
PrintBelief	src/pomdpx/pomdpx.cpp	/^void POMDPX::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::POMDPX
PrintDefaultActions	src/pomdpx/pomdpx.cpp	/^void POMDPX::PrintDefaultActions() {$/;"	f	class:despot::POMDPX
PrintLocs	include/despot/core/globals.h	/^inline void PrintLocs() {$/;"	f	namespace:despot::Globals
PrintLocs	src/util/exec_tracker.cpp	/^void ExecTracker::PrintLocs(ostream& out) const {$/;"	f	class:despot::ExecTracker
PrintMDPPolicy	examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::PrintMDPPolicy() const {$/;"	f	class:despot::Adventurer
PrintMDPPolicy	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::PrintMDPPolicy() const {$/;"	f	class:despot::Navigation
PrintMDPPolicy	examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::PrintMDPPolicy() const {$/;"	f	class:despot::Navigation
PrintMDPPolicy	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::PrintMDPPolicy() const {$/;"	f	class:despot::Navigation
PrintMDPPolicy	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::PrintMDPPolicy() const {$/;"	f	class:despot::RegDemo
PrintModel	src/pomdpx/pomdpx.cpp	/^void POMDPX::PrintModel(ostream& out) const {$/;"	f	class:despot::POMDPX
PrintObs	examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::PrintObs(const State& state, OBS_TYPE obs,$/;"	f	class:despot::Adventurer
PrintObs	examples/cpp_models/bridge/src/bridge.cpp	/^void Bridge::PrintObs(const State& state, OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::Bridge
PrintObs	examples/cpp_models/chain/src/chain.cpp	/^void Chain::PrintObs(const State& state, OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::Chain
PrintObs	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::PrintObs(const State& state, OBS_TYPE observation,$/;"	f	class:despot::Navigation
PrintObs	examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::PrintObs(const State& state, OBS_TYPE obs,$/;"	f	class:despot::Navigation
PrintObs	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::PrintObs(const State& state, OBS_TYPE observation,$/;"	f	class:despot::Navigation
PrintObs	examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::PrintObs(const State& state, OBS_TYPE observation,$/;"	f	class:despot::Pocman
PrintObs	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::PrintObs(const State& state, OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::RegDemo
PrintObs	examples/cpp_models/rock_sample/src/fvrs/fvrs.cpp	/^void FVRS::PrintObs(const State& state, OBS_TYPE observation,$/;"	f	class:despot::FVRS
PrintObs	examples/cpp_models/rock_sample/src/rock_sample/rock_sample.cpp	/^void RockSample::PrintObs(const State& state, OBS_TYPE observation,$/;"	f	class:despot::RockSample
PrintObs	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^void SimpleNavi::PrintObs(const State& state, OBS_TYPE observation,$/;"	f	class:despot::SimpleNavi
PrintObs	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^void SimpleRockSample::PrintObs(const State& state, OBS_TYPE observation,$/;"	f	class:despot::SimpleRockSample
PrintObs	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^void LaserTag::PrintObs(const State& state, OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::LaserTag
PrintObs	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^void NoisyLaserTag::PrintObs(const State& state, OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::NoisyLaserTag
PrintObs	examples/cpp_models/tag/src/tag/tag.cpp	/^void Tag::PrintObs(const State& state, OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::Tag
PrintObs	examples/cpp_models/tiger/src/tiger.cpp	/^void Tiger::PrintObs(const State& state, OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::Tiger
PrintObs	src/pomdpx/parser/parser.cpp	/^void Parser::PrintObs(OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::Parser
PrintObs	src/pomdpx/pomdpx.cpp	/^void POMDPX::PrintObs(const State& state, OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::POMDPX
PrintPOMDPX	examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::PrintPOMDPX() const {$/;"	f	class:despot::Adventurer
PrintPolicyTree	src/core/node.cpp	/^void VNode::PrintPolicyTree(int depth, ostream& os) {$/;"	f	class:despot::VNode
PrintResult	src/simple_tui.cpp	/^void SimpleTUI::PrintResult(int num_runs, Evaluator *simulator,$/;"	f	class:despot::SimpleTUI
PrintState	examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::PrintState(const State& s, ostream& out) const {$/;"	f	class:despot::Adventurer
PrintState	examples/cpp_models/bridge/src/bridge.cpp	/^void Bridge::PrintState(const State& state, ostream& out) const {$/;"	f	class:despot::Bridge
PrintState	examples/cpp_models/chain/src/chain.cpp	/^void Chain::PrintState(const State& s, ostream& out) const {$/;"	f	class:despot::Chain
PrintState	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::PrintState(const State& state, ostream& ostr) const {$/;"	f	class:despot::Navigation
PrintState	examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::PrintState(const State& s, ostream& out) const {$/;"	f	class:despot::Navigation
PrintState	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::PrintState(const State& state, ostream& ostr) const {$/;"	f	class:despot::Navigation
PrintState	examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::PrintState(const State& state, ostream& ostr) const {$/;"	f	class:despot::Pocman
PrintState	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::PrintState(const State& s, ostream& out) const {$/;"	f	class:despot::RegDemo
PrintState	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::PrintState(const State& state, ostream& out) const {$/;"	f	class:despot::BaseRockSample
PrintState	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^void SimpleNavi::PrintState(const State& state, ostream& out) const {$/;"	f	class:despot::SimpleNavi
PrintState	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^void SimpleRockSample::PrintState(const State& state, ostream& out) const {$/;"	f	class:despot::SimpleRockSample
PrintState	examples/cpp_models/tag/src/base/base_tag.cpp	/^void BaseTag::PrintState(const State& s, ostream& out) const {$/;"	f	class:despot::BaseTag
PrintState	examples/cpp_models/tiger/src/tiger.cpp	/^void Tiger::PrintState(const State& state, ostream& out) const {$/;"	f	class:despot::Tiger
PrintState	src/pomdpx/parser/parser.cpp	/^void Parser::PrintState(const vector<int>& state, ostream& out) const {$/;"	f	class:despot::Parser
PrintState	src/pomdpx/pomdpx.cpp	/^void POMDPX::PrintState(const State& s, ostream& out) const {$/;"	f	class:despot::POMDPX
PrintTransitions	examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::PrintTransitions() const {$/;"	f	class:despot::Adventurer
PrintTransitions	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::PrintTransitions() const {$/;"	f	class:despot::Navigation
PrintTransitions	examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::PrintTransitions() const {$/;"	f	class:despot::Navigation
PrintTransitions	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::PrintTransitions() const {$/;"	f	class:despot::Navigation
PrintTransitions	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::PrintTransitions() const {$/;"	f	class:despot::RegDemo
PrintTransitions	examples/cpp_models/tag/src/base/base_tag.cpp	/^void BaseTag::PrintTransitions() const {$/;"	f	class:despot::BaseTag
PrintTransitions	src/pomdpx/pomdpx.cpp	/^void POMDPX::PrintTransitions() {$/;"	f	class:despot::POMDPX
PrintTree	src/core/node.cpp	/^void VNode::PrintTree(int depth, ostream& os) {$/;"	f	class:despot::VNode
PrintUsageImplementation	include/despot/util/optionparser.h	/^struct PrintUsageImplementation {$/;"	s	namespace:despot::option
Prune	src/solver/despot.cpp	/^QNode* DESPOT::Prune(QNode* qnode, double& pruned_value) {$/;"	f	class:despot::DESPOT
Prune	src/solver/despot.cpp	/^VNode* DESPOT::Prune(VNode* vnode, int& pruned_action, double& pruned_value) {$/;"	f	class:despot::DESPOT
QNode	include/despot/core/node.h	/^class QNode {$/;"	c	namespace:despot
QNode	src/core/node.cpp	/^QNode::QNode(VNode* parent, int edge) :$/;"	f	class:despot::QNode
QNode	src/core/node.cpp	/^QNode::QNode(int count, double value) :$/;"	f	class:despot::QNode
QueryDoubleAttribute	src/util/tinyxml/tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const std::string& name, double* dval ) const$/;"	f	class:despot::util::tinyxml::TiXmlElement
QueryDoubleAttribute	src/util/tinyxml/tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute(const char* name, double* dval) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
QueryDoubleValue	src/util/tinyxml/tinyxml.cpp	/^int TiXmlAttribute::QueryDoubleValue(double* dval) const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
QueryFloatAttribute	include/despot/util/tinyxml/tinyxml.h	/^	int QueryFloatAttribute(const char* name, float* _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
QueryIntAttribute	src/util/tinyxml/tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const std::string& name, int* ival ) const$/;"	f	class:despot::util::tinyxml::TiXmlElement
QueryIntAttribute	src/util/tinyxml/tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute(const char* name, int* ival) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
QueryIntValue	src/util/tinyxml/tinyxml.cpp	/^int TiXmlAttribute::QueryIntValue(int* ival) const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
QueryValueAttribute	include/despot/util/tinyxml/tinyxml.h	/^	template< typename T> int QueryValueAttribute( const std::string& name, T* outValue ) const$/;"	f	class:despot::util::tinyxml::TiXmlElement
RANDOM	include/despot/util/random.h	/^	static Random RANDOM;$/;"	m	class:despot::Random
RANDOM_H	include/despot/util/random.h	2;"	d
RANDOM_STREAMS_H	include/despot/random_streams.h	2;"	d
REG_DEMO_H	examples/cpp_models/reg_demo/src/reg_demo.h	2;"	d
REWARD_VAR_VALUE	include/despot/pomdpx/parser/parser.h	21;"	d
RIGHT	examples/cpp_models/bridge/src/bridge.cpp	/^int Bridge::RIGHT = 1;$/;"	m	class:despot::Bridge	file:
RIGHT	examples/cpp_models/bridge/src/bridge.h	/^	static int LEFT, RIGHT, HELP, BRIDGELENGTH;$/;"	m	class:despot::Bridge
RIGHT	examples/cpp_models/tiger/src/tiger.cpp	/^const int Tiger::RIGHT = 1;$/;"	m	class:despot::Tiger	file:
RIGHT	examples/cpp_models/tiger/src/tiger.h	/^	static const int LEFT, RIGHT, LISTEN;$/;"	m	class:despot::Tiger
ROCKSAMPLE_H	examples/cpp_models/rock_sample/src/rock_sample/rock_sample.h	2;"	d
RS_BIN	examples/cpp_models/rock_sample/Makefile	/^RS_BIN = rock_sample$/;"	m
RS_SOURCES	examples/cpp_models/rock_sample/Makefile	/^RS_SOURCES = $(shell find -L $(SRCDIR)\/base $(SRCDIR)\/rock_sample -name '*.cpp')$/;"	m
Random	include/despot/util/random.h	/^class Random {$/;"	c	namespace:despot
Random	src/util/random.cpp	/^Random::Random(double seed) :$/;"	f	class:despot::Random
Random	src/util/random.cpp	/^Random::Random(unsigned seed) :$/;"	f	class:despot::Random
RandomMap	examples/cpp_models/tag/src/base/base_tag.cpp	/^string BaseTag::RandomMap(int height, int width, int obstacles) {$/;"	f	class:despot::BaseTag
RandomPolicy	include/despot/core/policy.h	/^class RandomPolicy: public Policy {$/;"	c	namespace:despot
RandomPolicy	src/core/policy.cpp	/^RandomPolicy::RandomPolicy(const DSPOMDP* model, ParticleLowerBound* bound,$/;"	f	class:despot::RandomPolicy
RandomPolicy	src/core/policy.cpp	/^RandomPolicy::RandomPolicy(const DSPOMDP* model,$/;"	f	class:despot::RandomPolicy
RandomStreams	include/despot/random_streams.h	/^class RandomStreams {$/;"	c	namespace:despot
RandomStreams	src/random_streams.cpp	/^RandomStreams::RandomStreams(int num_streams, int length) :$/;"	f	class:despot::RandomStreams
ReachGoal	examples/cpp_models/localnavigation/src/localnavigation.h	/^	bool ReachGoal;$/;"	m	class:despot::Navigation
ReachGoal	examples/cpp_models/navigation/src/navigation.h	/^	bool ReachGoal;$/;"	m	class:despot::Navigation
ReachGoal	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	bool ReachGoal;$/;"	m	class:despot::Navigation
ReadConfig	examples/cpp_models/tag/src/base/base_tag.cpp	/^void BaseTag::ReadConfig(istream& is) {$/;"	f	class:despot::BaseTag
ReadName	src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlBase::ReadName(const char* p, TIXML_STRING * name,$/;"	f	class:despot::util::tinyxml::TiXmlBase
ReadText	src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlBase::ReadText(const char* p, TIXML_STRING * text,$/;"	f	class:despot::util::tinyxml::TiXmlBase
ReadValue	src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlElement::ReadValue(const char* p, TiXmlParsingData* data,$/;"	f	class:despot::util::tinyxml::TiXmlElement
RecursiveValue	src/core/policy.cpp	/^ValuedAction Policy::RecursiveValue(const vector<State*>& particles,$/;"	f	class:despot::Policy
RegDemo	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^RegDemo::RegDemo() {$/;"	f	class:despot::RegDemo
RegDemo	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^RegDemo::RegDemo(string params_file) {$/;"	f	class:despot::RegDemo
RegDemo	examples/cpp_models/reg_demo/src/reg_demo.h	/^class RegDemo: public DSPOMDP,$/;"	c	namespace:despot
RegDemoState	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^RegDemoState::RegDemoState() {$/;"	f	class:despot::RegDemoState
RegDemoState	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^RegDemoState::RegDemoState(int _state_id) {$/;"	f	class:despot::RegDemoState
RegDemoState	examples/cpp_models/reg_demo/src/reg_demo.h	/^class RegDemoState: public State {$/;"	c	namespace:despot
Remove	src/util/tinyxml/tinyxml.cpp	/^void TiXmlAttributeSet::Remove(TiXmlAttribute* removeMe) {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
RemoveAttribute	include/despot/util/tinyxml/tinyxml.h	/^	void RemoveAttribute( const std::string& name ) {$/;"	f	class:despot::util::tinyxml::TiXmlElement
RemoveAttribute	src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::RemoveAttribute(const char * name) {$/;"	f	class:despot::util::tinyxml::TiXmlElement
RemoveChild	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlNode::RemoveChild(TiXmlNode* removeThis) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
RemoveLast	include/despot/core/history.h	/^	void RemoveLast() {$/;"	f	class:despot::History
Rep	include/despot/util/tinyxml/tinystr.h	/^	struct Rep {$/;"	s	class:despot::util::tinyxml::TiXmlString
ReplaceChild	src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlNode::ReplaceChild(TiXmlNode* replaceThis,$/;"	f	class:despot::util::tinyxml::TiXmlNode
ReportStepReward	src/evaluator.cpp	/^void Evaluator::ReportStepReward() {$/;"	f	class:despot::Evaluator
Required	include/despot/util/optionparser.h	/^	static option::ArgStatus Required(const option::Option& option, bool msg) {$/;"	f	struct:despot::option::Arg
Resample	src/core/belief.cpp	/^vector<State*> Belief::Resample(int num, const Belief& belief, History history,$/;"	f	class:despot::Belief
Resample	src/core/belief.cpp	/^vector<State*> Belief::Resample(int num, const DSPOMDP* model,$/;"	f	class:despot::Belief
Resample	src/core/belief.cpp	/^vector<State*> Belief::Resample(int num, const vector<State*>& belief,$/;"	f	class:despot::Belief
Reset	src/core/lower_bound.cpp	/^void ScenarioLowerBound::Reset() {$/;"	f	class:despot::ScenarioLowerBound
Reset	src/core/policy.cpp	/^void Policy::Reset() {$/;"	f	class:despot::Policy
Resize	include/despot/util/grid.h	/^	void Resize(int xsize, int ysize) {$/;"	f	class:despot::Grid
Reward	examples/cpp_models/adventurer/src/adventurer.cpp	/^double Adventurer::Reward(int s, int action) const {$/;"	f	class:despot::Adventurer
Reward	examples/cpp_models/chain/src/chain.cpp	/^double Chain::Reward(int s1, int action, int s2) const {$/;"	f	class:despot::Chain
Reward	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^double Navigation::Reward(int s, int action) const {$/;"	f	class:despot::Navigation
Reward	examples/cpp_models/navigation/src/navigation.cpp	/^double Navigation::Reward(int s, int action) const {$/;"	f	class:despot::Navigation
Reward	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^double Navigation::Reward(int s, int action) const {$/;"	f	class:despot::Navigation
Reward	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^double RegDemo::Reward(int s, int action) const {$/;"	f	class:despot::RegDemo
Reward	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^double BaseRockSample::Reward(int s, int a) const {$/;"	f	class:despot::BaseRockSample
Reward	examples/cpp_models/tag/src/base/base_tag.cpp	/^double BaseTag::Reward(int s, int action) const {$/;"	f	class:despot::BaseTag
Reward	src/pomdpx/pomdpx.cpp	/^double POMDPX::Reward(int s, int a) const {$/;"	f	class:despot::POMDPX
RewardVar	include/despot/pomdpx/parser/variable.h	76;"	d
RobOppIndicesToStateIndex	examples/cpp_models/tag/src/base/base_tag.h	/^	inline int RobOppIndicesToStateIndex(int rob, int opp) const {$/;"	f	class:despot::BaseTag
RockSample	examples/cpp_models/rock_sample/src/rock_sample/rock_sample.cpp	/^RockSample::RockSample(int size, int rocks) :$/;"	f	class:despot::RockSample
RockSample	examples/cpp_models/rock_sample/src/rock_sample/rock_sample.cpp	/^RockSample::RockSample(string map) :$/;"	f	class:despot::RockSample
RockSample	examples/cpp_models/rock_sample/src/rock_sample/rock_sample.h	/^class RockSample: public BaseRockSample {$/;"	c	namespace:despot
RockSampleApproxParticleUpperBound	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleApproxParticleUpperBound(const BaseRockSample* model) :$/;"	f	class:despot::RockSampleApproxParticleUpperBound
RockSampleApproxParticleUpperBound	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleApproxParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
RockSampleBelief	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleBelief(vector<State*> particles, const DSPOMDP* model,$/;"	f	class:despot::RockSampleBelief
RockSampleBelief	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleBelief: public ParticleBelief {$/;"	c	namespace:despot	file:
RockSampleENTScenarioLowerBound	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleENTScenarioLowerBound(const DSPOMDP* model) : \/\/ ENT: Explore Nearest in Thresholded State$/;"	f	class:despot::RockSampleENTScenarioLowerBound
RockSampleENTScenarioLowerBound	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleENTScenarioLowerBound: public ScenarioLowerBound {$/;"	c	namespace:despot	file:
RockSampleEastBeliefPolicy	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleEastBeliefPolicy(const DSPOMDP* model, Belief* belief = NULL) :$/;"	f	class:despot::RockSampleEastBeliefPolicy
RockSampleEastBeliefPolicy	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleEastBeliefPolicy: public BeliefLowerBound {$/;"	c	namespace:despot	file:
RockSampleEastScenarioLowerBound	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleEastScenarioLowerBound(const DSPOMDP* model) :$/;"	f	class:despot::RockSampleEastScenarioLowerBound
RockSampleEastScenarioLowerBound	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleEastScenarioLowerBound : public ScenarioLowerBound {$/;"	c	namespace:despot	file:
RockSampleMDPBeliefUpperBound	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleMDPBeliefUpperBound(const BaseRockSample* model) :$/;"	f	class:despot::RockSampleMDPBeliefUpperBound
RockSampleMDPBeliefUpperBound	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleMDPBeliefUpperBound: public BeliefUpperBound {$/;"	c	namespace:despot	file:
RockSampleMDPParticleUpperBound	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleMDPParticleUpperBound(const BaseRockSample* model) :$/;"	f	class:despot::RockSampleMDPParticleUpperBound
RockSampleMDPParticleUpperBound	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleMDPParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
RockSampleMMAPStateScenarioLowerBound	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleMMAPStateScenarioLowerBound(const DSPOMDP* model) :$/;"	f	class:despot::RockSampleMMAPStateScenarioLowerBound
RockSampleMMAPStateScenarioLowerBound	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleMMAPStateScenarioLowerBound : public ScenarioLowerBound {$/;"	c	namespace:despot	file:
RockSamplePOMCPPrior	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSamplePOMCPPrior(const DSPOMDP* model) :$/;"	f	class:despot::RockSamplePOMCPPrior
RockSamplePOMCPPrior	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSamplePOMCPPrior: public POMCPPrior {$/;"	c	namespace:despot	file:
RockSampleParticleUpperBound1	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleParticleUpperBound1(const BaseRockSample* model) :$/;"	f	class:despot::RockSampleParticleUpperBound1
RockSampleParticleUpperBound1	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleParticleUpperBound1: public ParticleUpperBound {$/;"	c	namespace:despot	file:
RockSampleParticleUpperBound2	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleParticleUpperBound2(const BaseRockSample* model) :$/;"	f	class:despot::RockSampleParticleUpperBound2
RockSampleParticleUpperBound2	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleParticleUpperBound2: public ParticleUpperBound {$/;"	c	namespace:despot	file:
RockSampleState	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^RockSampleState::RockSampleState() {$/;"	f	class:despot::RockSampleState
RockSampleState	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^RockSampleState::RockSampleState(int _state_id) {$/;"	f	class:despot::RockSampleState
RockSampleState	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^class RockSampleState: public State {$/;"	c	namespace:despot
Rollout	src/solver/pomcp.cpp	/^double POMCP::Rollout(State* particle, RandomStreams& streams, int depth,$/;"	f	class:despot::POMCP
Rollout	src/solver/pomcp.cpp	/^double POMCP::Rollout(State* particle, int depth, const DSPOMDP* model,$/;"	f	class:despot::POMCP
RootElement	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* RootElement() {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
RootElement	include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlElement* RootElement() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
Row	include/despot/util/tinyxml/tinyxml.h	/^	int Row() const {$/;"	f	class:despot::util::tinyxml::TiXmlBase
RunEvaluator	src/simple_tui.cpp	/^void SimpleTUI::RunEvaluator(DSPOMDP *model, Evaluator *simulator,$/;"	f	class:despot::SimpleTUI
RunStep	src/evaluator.cpp	/^bool Evaluator::RunStep(int step, int round) {$/;"	f	class:despot::Evaluator
SEEDS_H	include/despot/util/seeds.h	2;"	d
SIMPLEROCKSAMPLE_H	examples/cpp_models/simpleNavi/src/simpleNavi.h	2;"	d
SIMPLEROCKSAMPLE_H	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	2;"	d
SIMPLETUI_H	include/despot/simple_tui.h	2;"	d
SIMULATOR_H	include/despot/evaluator.h	2;"	d
SLIP	examples/cpp_models/chain/src/chain.h	/^		SUCCESS, SLIP$/;"	e	enum:despot::SemiChainBelief::__anon2
SOLVER_H	include/despot/core/solver.h	2;"	d
SOURCES	Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	examples/cpp_models/adventurer/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	examples/cpp_models/bridge/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	examples/cpp_models/chain/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	examples/cpp_models/localnavigation/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	examples/cpp_models/navigation/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	examples/cpp_models/pathfollowing/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	examples/cpp_models/pocman/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	examples/cpp_models/reg_demo/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	examples/cpp_models/simpleNavi/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	examples/cpp_models/simple_rock_sample/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	examples/cpp_models/tiger/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	examples/pomdpx_models/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOUTH	include/despot/util/coord.h	/^		SOUTH, EAST, NORTH, WEST, NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST$/;"	e	enum:despot::Compass::__anon15
SOUTHEAST	include/despot/util/coord.h	/^		SOUTH, EAST, NORTH, WEST, NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST$/;"	e	enum:despot::Compass::__anon15
SOUTHWEST	include/despot/util/coord.h	/^		SOUTH, EAST, NORTH, WEST, NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST$/;"	e	enum:despot::Compass::__anon15
SRCDIR	Makefile	/^SRCDIR = src$/;"	m
SRCDIR	examples/cpp_models/adventurer/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	examples/cpp_models/bridge/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	examples/cpp_models/chain/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	examples/cpp_models/localnavigation/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	examples/cpp_models/navigation/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	examples/cpp_models/pathfollowing/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	examples/cpp_models/pocman/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	examples/cpp_models/reg_demo/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	examples/cpp_models/rock_sample/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	examples/cpp_models/simpleNavi/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	examples/cpp_models/simple_rock_sample/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	examples/cpp_models/tag/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	examples/cpp_models/tiger/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	examples/pomdpx_models/Makefile	/^SRCDIR = src$/;"	m
STATE_NUM_THRESHOLD	include/despot/pomdpx/pomdpx.h	/^	static int STATE_NUM_THRESHOLD;$/;"	m	class:despot::POMDPX
STATE_NUM_THRESHOLD	src/pomdpx/pomdpx.cpp	/^int POMDPX::STATE_NUM_THRESHOLD = 1000000;$/;"	m	class:despot::POMDPX	file:
SUCCESS	examples/cpp_models/chain/src/chain.h	/^		SUCCESS, SLIP$/;"	e	enum:despot::SemiChainBelief::__anon2
Sample	examples/cpp_models/chain/src/chain.cpp	/^vector<State*> FullChainBelief::Sample(int num_particles) const {$/;"	f	class:despot::FullChainBelief
Sample	examples/cpp_models/chain/src/chain.cpp	/^vector<State*> SemiChainBelief::Sample(int num_particles) const {$/;"	f	class:despot::SemiChainBelief
Sample	src/core/belief.cpp	/^vector<State*> Belief::Sample(int num, vector<State*> particles,$/;"	f	class:despot::Belief
Sample	src/core/belief.cpp	/^vector<State*> ParticleBelief::Sample(int num) const {$/;"	f	class:despot::ParticleBelief
SampleRock	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::SampleRock(State* state, int rock) const {$/;"	f	class:despot::BaseRockSample
Save	src/evaluator.cpp	/^void EvalLog::Save() {$/;"	f	class:despot::EvalLog
SaveBelief	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::SaveBelief(const Belief& belief)$/;"	f	class:despot::Navigation
SaveBelief	include/despot/core/pomdp.h	/^	virtual void SaveBelief(const Belief& belief){};	$/;"	f	class:despot::DSPOMDP
SaveFile	include/despot/util/tinyxml/tinyxml.h	/^	bool SaveFile( const std::string& filename ) const \/\/\/< STL std::string version.$/;"	f	class:despot::util::tinyxml::TiXmlDocument
SaveFile	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::SaveFile() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
SaveFile	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::SaveFile(FILE* fp) const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
SaveFile	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::SaveFile(const char * filename) const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
ScenarioLowerBound	include/despot/core/lower_bound.h	/^class ScenarioLowerBound: public Solver {$/;"	c	namespace:despot
ScenarioLowerBound	src/core/lower_bound.cpp	/^ScenarioLowerBound::ScenarioLowerBound(const DSPOMDP* model, Belief* belief) :$/;"	f	class:despot::ScenarioLowerBound
ScenarioUpperBound	include/despot/core/upper_bound.h	/^class ScenarioUpperBound {$/;"	c	namespace:despot
ScenarioUpperBound	src/core/upper_bound.cpp	/^ScenarioUpperBound::ScenarioUpperBound() {$/;"	f	class:despot::ScenarioUpperBound
Search	src/core/lower_bound.cpp	/^ValuedAction BeliefLowerBound::Search() {$/;"	f	class:despot::BeliefLowerBound
Search	src/core/lower_bound.cpp	/^ValuedAction ScenarioLowerBound::Search() {$/;"	f	class:despot::ScenarioLowerBound
Search	src/core/policy.cpp	/^ValuedAction BlindPolicy::Search() {$/;"	f	class:despot::BlindPolicy
Search	src/core/policy.cpp	/^ValuedAction Policy::Search() {$/;"	f	class:despot::Policy
Search	src/core/policy.cpp	/^ValuedAction RandomPolicy::Search() {$/;"	f	class:despot::RandomPolicy
Search	src/solver/aems.cpp	/^ValuedAction AEMS::Search() {$/;"	f	class:despot::AEMS
Search	src/solver/despot.cpp	/^ValuedAction DESPOT::Search() {$/;"	f	class:despot::DESPOT
Search	src/solver/pomcp.cpp	/^ValuedAction DPOMCP::Search(double timeout) {$/;"	f	class:despot::DPOMCP
Search	src/solver/pomcp.cpp	/^ValuedAction POMCP::Search() {$/;"	f	class:despot::POMCP
Search	src/solver/pomcp.cpp	/^ValuedAction POMCP::Search(double timeout) {$/;"	f	class:despot::POMCP
SearchStatistics	include/despot/core/solver.h	/^struct SearchStatistics {$/;"	s	namespace:despot
SearchStatistics	src/core/solver.cpp	/^SearchStatistics::SearchStatistics() :$/;"	f	class:despot::SearchStatistics
SeeGhost	examples/cpp_models/pocman/src/pocman.cpp	/^int Pocman::SeeGhost(const PocmanState& pocstate, int action) const {$/;"	f	class:despot::Pocman
SeePed	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^int Navigation::SeePed(const NavigationState& navstate, int action) const {$/;"	f	class:despot::Navigation
SeePed	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^int Navigation::SeePed(const NavigationState& navstate, int action) const {$/;"	f	class:despot::Navigation
SeePed2	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^int Navigation::SeePed2(const NavigationState& navstate, int action) const {$/;"	f	class:despot::Navigation
Seeds	include/despot/util/seeds.h	/^class Seeds {$/;"	c	namespace:despot
SelectBestUpperBoundNode	src/solver/despot.cpp	/^QNode* DESPOT::SelectBestUpperBoundNode(VNode* vnode) {$/;"	f	class:despot::DESPOT
SelectBestWEUNode	src/solver/despot.cpp	/^VNode* DESPOT::SelectBestWEUNode(QNode* qnode) {$/;"	f	class:despot::DESPOT
SemiChainBelief	examples/cpp_models/chain/src/chain.cpp	/^SemiChainBelief::SemiChainBelief(const DSPOMDP* model, int num_mdp_states,$/;"	f	class:despot::SemiChainBelief
SemiChainBelief	examples/cpp_models/chain/src/chain.h	/^class SemiChainBelief: public Belief {$/;"	c	namespace:despot
Sending_cmd_Robot	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::Sending_cmd_Robot()$/;"	f	class:despot::Navigation
SetAllValues	include/despot/util/grid.h	/^	void SetAllValues(const T& value) {$/;"	f	class:despot::Grid
SetAllocated	include/despot/util/memorypool.h	/^	void SetAllocated() {$/;"	f	class:despot::MemoryObject
SetAttribute	src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, const std::string& _value )$/;"	f	class:despot::util::tinyxml::TiXmlElement
SetAttribute	src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, int val )$/;"	f	class:despot::util::tinyxml::TiXmlElement
SetAttribute	src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::SetAttribute(const char * cname, const char * cvalue) {$/;"	f	class:despot::util::tinyxml::TiXmlElement
SetAttribute	src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::SetAttribute(const char * name, int val) {$/;"	f	class:despot::util::tinyxml::TiXmlElement
SetCDATA	include/despot/util/tinyxml/tinyxml.h	/^	void SetCDATA(bool _cdata) {$/;"	f	class:despot::util::tinyxml::TiXmlText
SetCol	include/despot/util/grid.h	/^	void SetCol(int x, T* values) {$/;"	f	class:despot::Grid
SetCondenseWhiteSpace	include/despot/util/tinyxml/tinyxml.h	/^	static void SetCondenseWhiteSpace(bool condense) {$/;"	f	class:despot::util::tinyxml::TiXmlBase
SetDocument	include/despot/util/tinyxml/tinyxml.h	/^	void SetDocument(TiXmlDocument* doc) {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
SetDoubleAttribute	src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute(const char * name, double val) {$/;"	f	class:despot::util::tinyxml::TiXmlElement
SetDoubleValue	src/util/tinyxml/tinyxml.cpp	/^void TiXmlAttribute::SetDoubleValue(double _value) {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
SetError	src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlDocument::SetError(int err, const char* pError,$/;"	f	class:despot::util::tinyxml::TiXmlDocument
SetFlag	include/despot/util/util.h	/^inline void SetFlag(int& flags, int bit) {$/;"	f	namespace:despot
SetIndent	include/despot/util/tinyxml/tinyxml.h	/^	void SetIndent(const char* _indent) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
SetInitialBudget	src/evaluator.cpp	/^void EvalLog::SetInitialBudget(string instance) {$/;"	f	class:despot::EvalLog
SetIntValue	src/util/tinyxml/tinyxml.cpp	/^void TiXmlAttribute::SetIntValue(int _value) {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
SetLineBreak	include/despot/util/tinyxml/tinyxml.h	/^	void SetLineBreak(const char* _lineBreak) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
SetName	include/despot/util/tinyxml/tinyxml.h	/^	void SetName( const std::string& _name ) {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
SetName	include/despot/util/tinyxml/tinyxml.h	/^	void SetName(const char* _name) {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
SetParents	src/pomdpx/parser/function.cpp	/^void HierarchyCPT::SetParents(int val, vector<NamedVar*> parents) {$/;"	f	class:despot::HierarchyCPT
SetReading	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^void LaserTag::SetReading(OBS_TYPE& obs, OBS_TYPE reading, OBS_TYPE dir) {$/;"	f	class:despot::LaserTag
SetReading	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^void NoisyLaserTag::SetReading(OBS_TYPE& obs, OBS_TYPE reading, OBS_TYPE dir) {$/;"	f	class:despot::NoisyLaserTag
SetRow	include/despot/util/grid.h	/^	void SetRow(int y, T* values) {$/;"	f	class:despot::Grid
SetSize	include/despot/util/util.h	/^void SetSize(std::vector<std::vector<T> > v, int d1, int d2) {$/;"	f	namespace:despot
SetSize	include/despot/util/util.h	/^void SetSize(std::vector<std::vector<std::vector<T> > >& v, int d1, int d2, int d3) {$/;"	f	namespace:despot
SetStreamPrinting	include/despot/util/tinyxml/tinyxml.h	/^	void SetStreamPrinting() {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
SetTabSize	include/despot/util/tinyxml/tinyxml.h	/^	void SetTabSize(int _tabsize) {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
SetTransition	examples/cpp_models/chain/src/chain.cpp	/^void ChainState::SetTransition(int state, int action, vector<double> row) {$/;"	f	class:despot::ChainState
SetTransition	examples/cpp_models/chain/src/chain.h	/^	void SetTransition(int state1, int action, int state2, double value) {$/;"	f	class:despot::ChainState
SetUserData	include/despot/util/tinyxml/tinyxml.h	/^	void SetUserData(void* user) {$/;"	f	class:despot::util::tinyxml::TiXmlBase
SetValue	include/despot/pomdpx/parser/function.h	/^	inline bool SetValue(const std::vector<std::string>& keys,$/;"	f	class:despot::HierarchyCPT
SetValue	include/despot/pomdpx/parser/function.h	/^	inline void SetValue(int pid, int cid, double value) {$/;"	f	class:despot::HierarchyCPT
SetValue	include/despot/util/tinyxml/tinyxml.h	/^	void SetValue( const std::string& _value ) {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
SetValue	include/despot/util/tinyxml/tinyxml.h	/^	void SetValue( const std::string& _value ) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
SetValue	include/despot/util/tinyxml/tinyxml.h	/^	void SetValue(const char * _value) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
SetValue	include/despot/util/tinyxml/tinyxml.h	/^	void SetValue(const char* _value) {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
SetValue	src/pomdpx/parser/function.cpp	/^bool Function::SetValue(const vector<string>& keys,$/;"	f	class:despot::Function
SetValue	src/pomdpx/parser/function.cpp	/^bool Function::SetValue(vector<string>& keys, int key_pos, int pid, int cid,$/;"	f	class:despot::Function
SetValue	src/pomdpx/parser/function.cpp	/^bool HierarchyCPT::SetValue(int val, const vector<string>& keys,$/;"	f	class:despot::HierarchyCPT
SetValue	src/pomdpx/parser/function.cpp	/^void Function::SetValue(int pid, int cid, double value) {$/;"	f	class:despot::Function
SimpleNavi	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^SimpleNavi::SimpleNavi() {$/;"	f	class:despot::SimpleNavi
SimpleNavi	examples/cpp_models/simpleNavi/src/simpleNavi.h	/^class SimpleNavi: public DSPOMDP {$/;"	c	namespace:despot
SimpleNaviEastPolicy	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^	SimpleNaviEastPolicy(const DSPOMDP* model, ParticleLowerBound* bound) :$/;"	f	class:despot::SimpleNaviEastPolicy
SimpleNaviEastPolicy	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^class SimpleNaviEastPolicy: public Policy {$/;"	c	namespace:despot	file:
SimpleNaviParticleUpperBound	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^	SimpleNaviParticleUpperBound(const DSPOMDP* model) {$/;"	f	class:despot::SimpleNaviParticleUpperBound
SimpleNaviParticleUpperBound	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^class SimpleNaviParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
SimpleRockSample	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^SimpleRockSample::SimpleRockSample() {$/;"	f	class:despot::SimpleRockSample
SimpleRockSample	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^class SimpleRockSample: public DSPOMDP {$/;"	c	namespace:despot
SimpleRockSampleEastPolicy	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^	SimpleRockSampleEastPolicy(const DSPOMDP* model, ParticleLowerBound* bound) :$/;"	f	class:despot::SimpleRockSampleEastPolicy
SimpleRockSampleEastPolicy	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^class SimpleRockSampleEastPolicy: public Policy {$/;"	c	namespace:despot	file:
SimpleRockSampleParticleUpperBound	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^	SimpleRockSampleParticleUpperBound(const DSPOMDP* model) {$/;"	f	class:despot::SimpleRockSampleParticleUpperBound
SimpleRockSampleParticleUpperBound	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^class SimpleRockSampleParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
SimpleState	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^SimpleState::SimpleState() {$/;"	f	class:despot::SimpleState
SimpleState	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^SimpleState::SimpleState(int _rover_position, int _rock_status) {$/;"	f	class:despot::SimpleState
SimpleState	examples/cpp_models/simpleNavi/src/simpleNavi.h	/^class SimpleState: public State {$/;"	c	namespace:despot
SimpleState	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^SimpleState::SimpleState() {$/;"	f	class:despot::SimpleState
SimpleState	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^SimpleState::SimpleState(int _rover_position, int _rock_status) {$/;"	f	class:despot::SimpleState
SimpleState	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^class SimpleState: public State {$/;"	c	namespace:despot
SimpleTUI	include/despot/simple_tui.h	/^class SimpleTUI {$/;"	c	namespace:despot
SimpleTUI	src/simple_tui.cpp	/^SimpleTUI::SimpleTUI() {}$/;"	f	class:despot::SimpleTUI
Simulate	src/solver/pomcp.cpp	/^double POMCP::Simulate(State* particle, RandomStreams& streams, VNode* vnode,$/;"	f	class:despot::POMCP
Simulate	src/solver/pomcp.cpp	/^double POMCP::Simulate(State* particle, VNode* vnode, const DSPOMDP* model,$/;"	f	class:despot::POMCP
Size	include/despot/core/history.h	/^	size_t Size() const {$/;"	f	class:despot::History
Size	include/despot/pomdpx/parser/variable.h	/^	inline int Size() const {$/;"	f	class:despot::Variable
Size	include/despot/util/memorypool.h	/^		static const int Size = 256;$/;"	m	struct:despot::MemoryPool::Chunk
Size	include/despot/util/tinyxml/tinyxml.h	/^	size_t Size() {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
Size	src/core/node.cpp	/^int QNode::Size() const {$/;"	f	class:despot::QNode
Size	src/core/node.cpp	/^int VNode::Size() const {$/;"	f	class:despot::VNode
SkipWhiteSpace	src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlBase::SkipWhiteSpace(const char* p, TiXmlEncoding encoding) {$/;"	f	class:despot::util::tinyxml::TiXmlBase
SmartCount	include/despot/solver/pomcp.h	/^	inline virtual int SmartCount(int action) const {$/;"	f	class:despot::POMCPPrior
SmartValue	include/despot/solver/pomcp.h	/^	inline virtual double SmartValue(int action) const {$/;"	f	class:despot::POMCPPrior
SmellFood	examples/cpp_models/pocman/src/pocman.cpp	/^bool Pocman::SmellFood(const PocmanState& pocstate) const {$/;"	f	class:despot::Pocman
SmellGoal	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^bool Navigation::SmellGoal(const NavigationState& navstate) const {$/;"	f	class:despot::Navigation
SmellGoal	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^bool Navigation::SmellGoal(const NavigationState& navstate) const {$/;"	f	class:despot::Navigation
Solver	include/despot/core/solver.h	/^class Solver {$/;"	c	namespace:despot
Solver	src/core/solver.cpp	/^Solver::Solver(const DSPOMDP* model, Belief* belief) :$/;"	f	class:despot::Solver
SortByKey	include/despot/util/util.h	/^std::vector<std::pair<K, V> > SortByKey(std::map<K, V> m) {$/;"	f	namespace:despot
SortByValue	include/despot/util/util.h	/^std::vector<std::pair<K, V> > SortByValue(std::map<K, V> m) {$/;"	f	namespace:despot
Stamp	src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlParsingData::Stamp(const char* now, TiXmlEncoding encoding) {$/;"	f	class:despot::util::tinyxml::TiXmlParsingData
Standalone	include/despot/util/tinyxml/tinyxml.h	/^	const char *Standalone() const {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
State	include/despot/core/pomdp.h	/^class State: public MemoryObject {$/;"	c	namespace:despot
State	src/core/pomdp.cpp	/^State::State() :$/;"	f	class:despot::State
State	src/core/pomdp.cpp	/^State::State(int _state_id, double _weight) :$/;"	f	class:despot::State
StateIndexToOppIndex	examples/cpp_models/tag/src/base/base_tag.h	/^	inline int StateIndexToOppIndex(int index) const {$/;"	f	class:despot::BaseTag
StateIndexToRobIndex	examples/cpp_models/tag/src/base/base_tag.h	/^	inline int StateIndexToRobIndex(int index) const {$/;"	f	class:despot::BaseTag
StateIndexer	include/despot/core/pomdp.h	/^class StateIndexer {$/;"	c	namespace:despot
StatePolicy	include/despot/core/pomdp.h	/^class StatePolicy {$/;"	c	namespace:despot
StateVar	include/despot/pomdpx/parser/variable.h	/^class StateVar: public NamedVar {$/;"	c	namespace:despot
StateVar	src/pomdpx/parser/variable.cpp	/^StateVar::StateVar() {$/;"	f	class:despot::StateVar
StateVec_Sub	examples/cpp_models/localnavigation/src/localnavigation.h	/^    ros::Subscriber  StateVec_Sub;$/;"	m	class:despot::Navigation
StateVec_Sub	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^    ros::Subscriber  StateVec_Sub;$/;"	m	class:despot::Navigation
Stateid_pub	examples/cpp_models/localnavigation/src/localnavigation.h	/^	ros::Publisher	 Stateid_pub; 	$/;"	m	class:despot::Navigation
Stateid_pub	examples/cpp_models/navigation/src/navigation.h	/^	ros::Publisher	Stateid_pub; 	$/;"	m	class:despot::Navigation
Stateid_pub	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	ros::Publisher	 Stateid_pub; 	$/;"	m	class:despot::Navigation
States_Pub	examples/cpp_models/localnavigation/src/localnavigation.h	/^	ros::Publisher   States_Pub;$/;"	m	class:despot::Navigation
States_Pub	examples/cpp_models/navigation/src/navigation.h	/^	ros::Publisher   States_Pub;$/;"	m	class:despot::Navigation
States_Pub	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	ros::Publisher   States_Pub;$/;"	m	class:despot::Navigation
States_Sub	include/despot/evaluator.h	/^	ros::Publisher   States_Sub;$/;"	m	class:despot::Evaluator
Stats	include/despot/util/optionparser.h	/^	Stats() :$/;"	f	struct:despot::option::Stats
Stats	include/despot/util/optionparser.h	/^	Stats(bool gnu, const Descriptor usage[], int argc, char** argv,$/;"	f	struct:despot::option::Stats
Stats	include/despot/util/optionparser.h	/^	Stats(bool gnu, const Descriptor usage[], int argc, const char** argv,$/;"	f	struct:despot::option::Stats
Stats	include/despot/util/optionparser.h	/^	Stats(const Descriptor usage[], int argc, char** argv, int min_abbr_len = 0, \/\/$/;"	f	struct:despot::option::Stats
Stats	include/despot/util/optionparser.h	/^	Stats(const Descriptor usage[], int argc, const char** argv,$/;"	f	struct:despot::option::Stats
Stats	include/despot/util/optionparser.h	/^struct Stats {$/;"	s	namespace:despot::option
StderrDiscountedRoundReward	src/evaluator.cpp	/^double Evaluator::StderrDiscountedRoundReward() const {$/;"	f	class:despot::Evaluator
StderrUndiscountedRoundReward	src/evaluator.cpp	/^double Evaluator::StderrUndiscountedRoundReward() const {$/;"	f	class:despot::Evaluator
Step	examples/cpp_models/adventurer/src/adventurer.cpp	/^bool Adventurer::Step(State& s, double random_num, int action, double& reward,$/;"	f	class:despot::Adventurer
Step	examples/cpp_models/bridge/src/bridge.cpp	/^bool Bridge::Step(State& s, double random_num, int action, double& reward,$/;"	f	class:despot::Bridge
Step	examples/cpp_models/chain/src/chain.cpp	/^bool Chain::Step(State& s, double random_num, int action, double &reward,$/;"	f	class:despot::Chain
Step	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^bool Navigation::Step(State& s, double random_num, int action, double& reward,$/;"	f	class:despot::Navigation
Step	examples/cpp_models/navigation/src/navigation.cpp	/^bool Navigation::Step(State& s, double random_num, int action, double& reward,$/;"	f	class:despot::Navigation
Step	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^bool Navigation::Step(State& s, double random_num, int action, double& reward,$/;"	f	class:despot::Navigation
Step	examples/cpp_models/pocman/src/pocman.cpp	/^bool Pocman::Step(State& state, double rand_num, int action, double& reward,$/;"	f	class:despot::Pocman
Step	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^bool RegDemo::Step(State& s, double random_num, int action, double& reward,$/;"	f	class:despot::RegDemo
Step	examples/cpp_models/rock_sample/src/fvrs/fvrs.cpp	/^bool FVRS::Step(State& state, double rand_num, int action, double& reward,$/;"	f	class:despot::FVRS
Step	examples/cpp_models/rock_sample/src/rock_sample/rock_sample.cpp	/^bool RockSample::Step(State& state, double rand_num, int action, double& reward,$/;"	f	class:despot::RockSample
Step	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^bool SimpleNavi::Step(State& state, double rand_num, int action,$/;"	f	class:despot::SimpleNavi
Step	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^bool SimpleRockSample::Step(State& state, double rand_num, int action,$/;"	f	class:despot::SimpleRockSample
Step	examples/cpp_models/tag/src/base/base_tag.cpp	/^bool BaseTag::Step(State& s, double random_num, int action,$/;"	f	class:despot::BaseTag
Step	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^bool LaserTag::Step(State& state, double random_num, int action, double& reward,$/;"	f	class:despot::LaserTag
Step	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^bool LaserTag::Step(State& state, double random_num, int action,$/;"	f	class:despot::LaserTag
Step	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^bool NoisyLaserTag::Step(State& state, double random_num, int action, double& reward,$/;"	f	class:despot::NoisyLaserTag
Step	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^bool NoisyLaserTag::Step(State& state, double random_num, int action,$/;"	f	class:despot::NoisyLaserTag
Step	examples/cpp_models/tag/src/tag/tag.cpp	/^bool Tag::Step(State& state, double random_num, int action, double& reward,$/;"	f	class:despot::Tag
Step	examples/cpp_models/tiger/src/tiger.cpp	/^bool Tiger::Step(State& s, double random_num, int action, double& reward,$/;"	f	class:despot::Tiger
Step	src/core/pomdp.cpp	/^bool DSPOMDP::Step(State& state, double random_num, int action,$/;"	f	class:despot::DSPOMDP
Step	src/core/pomdp.cpp	/^bool DSPOMDP::Step(State& state, int action, double& reward,$/;"	f	class:despot::DSPOMDP
Step	src/pomdpx/parser/parser.cpp	/^bool Parser::Step(vector<int>& state, double random, int action, double& reward,$/;"	f	class:despot::Parser
Step	src/pomdpx/pomdpx.cpp	/^bool POMDPX::Step(State& s, double random_num, int action, double& reward,$/;"	f	class:despot::POMDPX
StepReal	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^ bool Navigation::StepReal(State& state, double random_num, int action, double& reward, OBS_TYPE& obs)$/;"	f	class:despot::Navigation
StepReward	examples/cpp_models/adventurer/src/adventurer.cpp	/^double Adventurer::StepReward(const Belief* belief, int action) const {$/;"	f	class:despot::Adventurer
StepReward	examples/cpp_models/bridge/src/bridge.cpp	/^double Bridge::StepReward(const Belief* belief, int action) const {$/;"	f	class:despot::Bridge
StepReward	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^double BaseRockSample::StepReward(const Belief* belief, int action) const {$/;"	f	class:despot::BaseRockSample
StepReward	examples/cpp_models/tag/src/base/base_tag.cpp	/^double BaseTag::StepReward(const Belief* belief, int action) const {$/;"	f	class:despot::BaseTag
StoreOptionAction	include/despot/util/optionparser.h	/^	StoreOptionAction(Parser& parser_, Option options_[], Option buffer_[],$/;"	f	class:despot::option::Parser::StoreOptionAction
StoreOptionAction	include/despot/util/optionparser.h	/^class Parser::StoreOptionAction: public Parser::Action {$/;"	c	class:despot::option::Parser
Str	include/despot/util/tinyxml/tinyxml.h	/^	const std::string& Str() {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
StreamIn	src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlComment::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:despot::util::tinyxml::TiXmlComment
StreamIn	src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlDeclaration::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
StreamIn	src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlDocument::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:despot::util::tinyxml::TiXmlDocument
StreamIn	src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlElement::StreamIn (std::istream * in, TIXML_STRING * tag)$/;"	f	class:despot::util::tinyxml::TiXmlElement
StreamIn	src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlText::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:despot::util::tinyxml::TiXmlText
StreamIn	src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlUnknown::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
StreamTo	src/util/tinyxml/tinyxmlparser.cpp	/^\/*static*\/bool TiXmlBase::StreamTo( std::istream * in, int character, TIXML_STRING * tag )$/;"	f	class:despot::util::tinyxml::TiXmlBase
StreamWhiteSpace	src/util/tinyxml/tinyxmlparser.cpp	/^\/*static*\/bool TiXmlBase::StreamWhiteSpace( std::istream * in, TIXML_STRING * tag )$/;"	f	class:despot::util::tinyxml::TiXmlBase
StreamWriter	include/despot/util/optionparser.h	/^		StreamWriter(Function* w, Stream* s) :$/;"	f	struct:despot::option::PrintUsageImplementation::StreamWriter
StreamWriter	include/despot/util/optionparser.h	/^	struct StreamWriter: public IStringWriter {$/;"	s	struct:despot::option::PrintUsageImplementation
StringEqual	src/util/tinyxml/tinyxmlparser.cpp	/^bool TiXmlBase::StringEqual(const char* p, const char* tag, bool ignoreCase,$/;"	f	class:despot::util::tinyxml::TiXmlBase
Suffix	include/despot/core/history.h	/^	History Suffix(int s) const {$/;"	f	class:despot::History
SyscallWriter	include/despot/util/optionparser.h	/^		SyscallWriter(Syscall* w, int f) :$/;"	f	struct:despot::option::PrintUsageImplementation::SyscallWriter
SyscallWriter	include/despot/util/optionparser.h	/^	struct SyscallWriter: public IStringWriter {$/;"	s	struct:despot::option::PrintUsageImplementation
TAG_BIN	examples/cpp_models/tag/Makefile	/^TAG_BIN = tag $/;"	m
TAG_H	examples/cpp_models/tag/src/tag/tag.h	2;"	d
TAG_REWARD	examples/cpp_models/tag/src/base/base_tag.cpp	/^double BaseTag::TAG_REWARD = 10;$/;"	m	class:despot::BaseTag	file:
TAG_REWARD	examples/cpp_models/tag/src/base/base_tag.h	/^	static double TAG_REWARD;$/;"	m	class:despot::BaseTag
TAG_SOURCES	examples/cpp_models/tag/Makefile	/^TAG_SOURCES = $(shell find -L $(SRCDIR)\/base $(SRCDIR)\/tag -name '*.cpp')$/;"	m
TEXT	include/despot/util/tinyxml/tinyxml.h	/^		DOCUMENT, ELEMENT, COMMENT, UNKNOWN, TEXT, DECLARATION, TYPECOUNT$/;"	e	enum:despot::util::tinyxml::TiXmlNode::NodeType
TIGER_H	examples/cpp_models/tiger/src/tiger.h	2;"	d
TIMER_H	include/despot/util/timer.h	2;"	d
TINY	src/core/globals.cpp	/^const double TINY = 1e-8;$/;"	m	namespace:despot::Globals	file:
TIXML_DEFAULT_ENCODING	include/despot/util/tinyxml/tinyxml.h	/^const TiXmlEncoding TIXML_DEFAULT_ENCODING = TIXML_ENCODING_UNKNOWN;$/;"	m	namespace:despot::util::tinyxml
TIXML_ENCODING_LEGACY	include/despot/util/tinyxml/tinyxml.h	/^	TIXML_ENCODING_UNKNOWN, TIXML_ENCODING_UTF8, TIXML_ENCODING_LEGACY$/;"	e	enum:despot::util::tinyxml::TiXmlEncoding
TIXML_ENCODING_UNKNOWN	include/despot/util/tinyxml/tinyxml.h	/^	TIXML_ENCODING_UNKNOWN, TIXML_ENCODING_UTF8, TIXML_ENCODING_LEGACY$/;"	e	enum:despot::util::tinyxml::TiXmlEncoding
TIXML_ENCODING_UTF8	include/despot/util/tinyxml/tinyxml.h	/^	TIXML_ENCODING_UNKNOWN, TIXML_ENCODING_UTF8, TIXML_ENCODING_LEGACY$/;"	e	enum:despot::util::tinyxml::TiXmlEncoding
TIXML_ERROR	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_ERROR_DOCUMENT_EMPTY	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_DOCUMENT_EMPTY,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_ERROR_DOCUMENT_TOP_ONLY	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_DOCUMENT_TOP_ONLY,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_ERROR_EMBEDDED_NULL	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_EMBEDDED_NULL,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_ERROR_OPENING_FILE	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_OPENING_FILE,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_ERROR_OUT_OF_MEMORY	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_OUT_OF_MEMORY,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_ERROR_PARSING_CDATA	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_CDATA,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_ERROR_PARSING_COMMENT	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_COMMENT,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_ERROR_PARSING_DECLARATION	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_DECLARATION,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_ERROR_PARSING_ELEMENT	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_ELEMENT,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_ERROR_PARSING_EMPTY	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_EMPTY,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_ERROR_PARSING_UNKNOWN	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_ERROR_READING_ATTRIBUTES	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_READING_ATTRIBUTES,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_ERROR_READING_ELEMENT_VALUE	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_READING_ELEMENT_VALUE,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_ERROR_READING_END_TAG	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_READING_END_TAG,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_ERROR_STRING_COUNT	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_STRING_COUNT$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_EXPLICIT	include/despot/util/tinyxml/tinystr.h	51;"	d
TIXML_EXPLICIT	include/despot/util/tinyxml/tinystr.h	54;"	d
TIXML_EXPLICIT	include/despot/util/tinyxml/tinystr.h	56;"	d
TIXML_LOG	src/util/tinyxml/tinyxmlparser.cpp	34;"	d	file:
TIXML_LOG	src/util/tinyxml/tinyxmlparser.cpp	36;"	d	file:
TIXML_MAJOR_VERSION	include/despot/util/tinyxml/tinyxml.h	/^const int TIXML_MAJOR_VERSION = 2;$/;"	m	namespace:despot::util::tinyxml
TIXML_MINOR_VERSION	include/despot/util/tinyxml/tinyxml.h	/^const int TIXML_MINOR_VERSION = 5;$/;"	m	namespace:despot::util::tinyxml
TIXML_NO_ATTRIBUTE	include/despot/util/tinyxml/tinyxml.h	/^	TIXML_SUCCESS, TIXML_NO_ATTRIBUTE, TIXML_WRONG_TYPE$/;"	e	enum:despot::util::tinyxml::__anon12
TIXML_NO_ERROR	include/despot/util/tinyxml/tinyxml.h	/^		TIXML_NO_ERROR = 0,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon13
TIXML_PATCH_VERSION	include/despot/util/tinyxml/tinyxml.h	/^const int TIXML_PATCH_VERSION = 3;$/;"	m	namespace:despot::util::tinyxml
TIXML_SAFE	include/despot/util/tinyxml/tinyxml.h	59;"	d
TIXML_SNPRINTF	include/despot/util/tinyxml/tinyxml.h	64;"	d
TIXML_SNPRINTF	include/despot/util/tinyxml/tinyxml.h	70;"	d
TIXML_SNPRINTF	include/despot/util/tinyxml/tinyxml.h	76;"	d
TIXML_SNSCANF	include/despot/util/tinyxml/tinyxml.h	65;"	d
TIXML_SNSCANF	include/despot/util/tinyxml/tinyxml.h	71;"	d
TIXML_SNSCANF	include/despot/util/tinyxml/tinyxml.h	77;"	d
TIXML_SSCANF	include/despot/util/tinyxml/tinyxml.h	66;"	d
TIXML_SSCANF	include/despot/util/tinyxml/tinyxml.h	72;"	d
TIXML_SSCANF	include/despot/util/tinyxml/tinyxml.h	78;"	d
TIXML_SSCANF	include/despot/util/tinyxml/tinyxml.h	80;"	d
TIXML_STRING	include/despot/util/tinyxml/tinyxml.h	49;"	d
TIXML_STRING	include/despot/util/tinyxml/tinyxml.h	52;"	d
TIXML_STRING_INCLUDED	include/despot/util/tinyxml/tinystr.h	40;"	d
TIXML_SUCCESS	include/despot/util/tinyxml/tinyxml.h	/^	TIXML_SUCCESS, TIXML_NO_ATTRIBUTE, TIXML_WRONG_TYPE$/;"	e	enum:despot::util::tinyxml::__anon12
TIXML_UTF_LEAD_0	src/util/tinyxml/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	m	namespace:despot::util::tinyxml	file:
TIXML_UTF_LEAD_1	src/util/tinyxml/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	m	namespace:despot::util::tinyxml	file:
TIXML_UTF_LEAD_2	src/util/tinyxml/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	m	namespace:despot::util::tinyxml	file:
TIXML_WRONG_TYPE	include/despot/util/tinyxml/tinyxml.h	/^	TIXML_SUCCESS, TIXML_NO_ATTRIBUTE, TIXML_WRONG_TYPE$/;"	e	enum:despot::util::tinyxml::__anon12
TUI	examples/cpp_models/adventurer/src/main.cpp	/^	TUI() {$/;"	f	class:TUI
TUI	examples/cpp_models/adventurer/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	examples/cpp_models/bridge/src/main.cpp	/^	TUI() {$/;"	f	class:TUI
TUI	examples/cpp_models/bridge/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	examples/cpp_models/chain/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	examples/cpp_models/chain/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	examples/cpp_models/localnavigation/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	examples/cpp_models/localnavigation/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	examples/cpp_models/navigation/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	examples/cpp_models/navigation/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	examples/cpp_models/pathfollowing/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	examples/cpp_models/pathfollowing/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	examples/cpp_models/pocman/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	examples/cpp_models/pocman/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	examples/cpp_models/reg_demo/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	examples/cpp_models/reg_demo/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	examples/cpp_models/rock_sample/src/fvrs/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	examples/cpp_models/rock_sample/src/fvrs/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	examples/cpp_models/rock_sample/src/rock_sample/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	examples/cpp_models/rock_sample/src/rock_sample/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	examples/cpp_models/simpleNavi/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	examples/cpp_models/simpleNavi/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	examples/cpp_models/simple_rock_sample/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	examples/cpp_models/simple_rock_sample/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	examples/cpp_models/tag/src/laser_tag/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	examples/cpp_models/tag/src/laser_tag/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	examples/cpp_models/tag/src/noisy_laser_tag/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	examples/cpp_models/tag/src/noisy_laser_tag/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	examples/cpp_models/tag/src/tag/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	examples/cpp_models/tag/src/tag/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	examples/cpp_models/tiger/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	examples/cpp_models/tiger/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	examples/pomdpx_models/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	examples/pomdpx_models/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TYPECOUNT	include/despot/util/tinyxml/tinyxml.h	/^		DOCUMENT, ELEMENT, COMMENT, UNKNOWN, TEXT, DECLARATION, TYPECOUNT$/;"	e	enum:despot::util::tinyxml::TiXmlNode::NodeType
TabSize	include/despot/util/tinyxml/tinyxml.h	/^	int TabSize() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
TabularCPT	include/despot/pomdpx/parser/function.h	/^class TabularCPT: public CPT {$/;"	c	namespace:despot
TabularCPT	src/pomdpx/parser/function.cpp	/^TabularCPT::TabularCPT(NamedVar* child, vector<NamedVar*> parents) {$/;"	f	class:despot::TabularCPT
Tag	examples/cpp_models/tag/src/tag/tag.cpp	/^Tag::Tag() {$/;"	f	class:despot::Tag
Tag	examples/cpp_models/tag/src/tag/tag.cpp	/^Tag::Tag(string params_file) :$/;"	f	class:despot::Tag
Tag	examples/cpp_models/tag/src/tag/tag.h	/^class Tag: public BaseTag {$/;"	c	namespace:despot
TagAction	examples/cpp_models/tag/src/base/base_tag.h	/^	inline int TagAction() const {$/;"	f	class:despot::BaseTag
TagBelief	examples/cpp_models/tag/src/base/base_tag.cpp	/^TagBelief::TagBelief(vector<State*> particles, const BaseTag* model,$/;"	f	class:despot::TagBelief
TagBelief	examples/cpp_models/tag/src/base/base_tag.h	/^class TagBelief: public ParticleBelief {$/;"	c	namespace:despot
TagBlindBeliefPolicy	examples/cpp_models/tag/src/base/base_tag.cpp	/^	TagBlindBeliefPolicy(const BaseTag* model, Belief* belief = NULL) :$/;"	f	class:despot::TagBlindBeliefPolicy
TagBlindBeliefPolicy	examples/cpp_models/tag/src/base/base_tag.cpp	/^class TagBlindBeliefPolicy: public BeliefLowerBound {$/;"	c	namespace:despot	file:
TagHistoryModePolicy	examples/cpp_models/tag/src/base/base_tag.cpp	/^	TagHistoryModePolicy(const DSPOMDP* model, ParticleLowerBound* bound) :$/;"	f	class:despot::TagHistoryModePolicy
TagHistoryModePolicy	examples/cpp_models/tag/src/base/base_tag.cpp	/^class TagHistoryModePolicy: public Policy {$/;"	c	namespace:despot	file:
TagManhattanUpperBound	examples/cpp_models/tag/src/base/base_tag.cpp	/^	TagManhattanUpperBound(const BaseTag* model) :$/;"	f	class:despot::TagManhattanUpperBound
TagManhattanUpperBound	examples/cpp_models/tag/src/base/base_tag.cpp	/^class TagManhattanUpperBound: public ParticleUpperBound, public BeliefUpperBound {$/;"	c	namespace:despot	file:
TagPOMCPPrior	examples/cpp_models/tag/src/base/base_tag.cpp	/^	TagPOMCPPrior(const DSPOMDP* model) :$/;"	f	class:despot::TagPOMCPPrior
TagPOMCPPrior	examples/cpp_models/tag/src/base/base_tag.cpp	/^class TagPOMCPPrior: public POMCPPrior {$/;"	c	namespace:despot	file:
TagSHRPolicy	examples/cpp_models/tag/src/base/base_tag.cpp	/^	TagSHRPolicy(const DSPOMDP* model, ParticleLowerBound* bound) :$/;"	f	class:despot::TagSHRPolicy
TagSHRPolicy	examples/cpp_models/tag/src/base/base_tag.cpp	/^class TagSHRPolicy: public Policy { \/\/ Smart History-based Rollout$/;"	c	namespace:despot	file:
TagSPParticleUpperBound	examples/cpp_models/tag/src/base/base_tag.cpp	/^	TagSPParticleUpperBound(const BaseTag* model) :$/;"	f	class:despot::TagSPParticleUpperBound
TagSPParticleUpperBound	examples/cpp_models/tag/src/base/base_tag.cpp	/^class TagSPParticleUpperBound: public ParticleUpperBound { \/\/ Shortest path$/;"	c	namespace:despot	file:
TagState	examples/cpp_models/tag/src/base/base_tag.cpp	/^TagState::TagState() {$/;"	f	class:despot::TagState
TagState	examples/cpp_models/tag/src/base/base_tag.cpp	/^TagState::TagState(int _state_id) {$/;"	f	class:despot::TagState
TagState	examples/cpp_models/tag/src/base/base_tag.h	/^class TagState: public State {$/;"	c	namespace:despot
Tau	examples/cpp_models/adventurer/src/adventurer.cpp	/^Belief* Adventurer::Tau(const Belief* belief, int action, OBS_TYPE obs) const {$/;"	f	class:despot::Adventurer
Tau	examples/cpp_models/bridge/src/bridge.cpp	/^Belief* Bridge::Tau(const Belief* belief, int action, OBS_TYPE obs) const {$/;"	f	class:despot::Bridge
Tau	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^Belief* BaseRockSample::Tau(const Belief* belief, int action,$/;"	f	class:despot::BaseRockSample
Tau	examples/cpp_models/tag/src/base/base_tag.cpp	/^Belief* BaseTag::Tau(const Belief* belief, int action, OBS_TYPE obs) const {$/;"	f	class:despot::BaseTag
TemporaryWriter	include/despot/util/optionparser.h	/^		TemporaryWriter(const Temporary& u) :$/;"	f	struct:despot::option::PrintUsageImplementation::TemporaryWriter
TemporaryWriter	include/despot/util/optionparser.h	/^	struct TemporaryWriter: public IStringWriter {$/;"	s	struct:despot::option::PrintUsageImplementation
TerminalPattern	include/despot/pomdpx/parser/parser.h	/^struct TerminalPattern {$/;"	s	namespace:despot
TestSortByKey	src/test/util_test.cpp	/^void TestSortByKey() {$/;"	f	namespace:despot
TestSortByValue	src/test/util_test.cpp	/^void TestSortByValue() {$/;"	f	namespace:despot
Text	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlText* Text() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
TiXmlAttribute	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
TiXmlAttribute	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute() :$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
TiXmlAttribute	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute(const char * _name, const char * _value) {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
TiXmlAttribute	include/despot/util/tinyxml/tinyxml.h	/^class TiXmlAttribute: public TiXmlBase {$/;"	c	namespace:despot::util::tinyxml
TiXmlAttributeSet	include/despot/util/tinyxml/tinyxml.h	/^class TiXmlAttributeSet {$/;"	c	namespace:despot::util::tinyxml
TiXmlAttributeSet	src/util/tinyxml/tinyxml.cpp	/^TiXmlAttributeSet::TiXmlAttributeSet() {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
TiXmlBase	include/despot/pomdpx/parser/parser.h	/^  typedef util::tinyxml::TiXmlBase TiXmlBase;$/;"	t	class:despot::Parser
TiXmlBase	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlBase() :$/;"	f	class:despot::util::tinyxml::TiXmlBase
TiXmlBase	include/despot/util/tinyxml/tinyxml.h	/^class TiXmlBase {$/;"	c	namespace:despot::util::tinyxml
TiXmlComment	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlComment() :$/;"	f	class:despot::util::tinyxml::TiXmlComment
TiXmlComment	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlComment(const char* _value) :$/;"	f	class:despot::util::tinyxml::TiXmlComment
TiXmlComment	include/despot/util/tinyxml/tinyxml.h	/^class TiXmlComment: public TiXmlNode {$/;"	c	namespace:despot::util::tinyxml
TiXmlComment	src/util/tinyxml/tinyxml.cpp	/^TiXmlComment::TiXmlComment(const TiXmlComment& copy) :$/;"	f	class:despot::util::tinyxml::TiXmlComment
TiXmlCursor	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlCursor() {$/;"	f	struct:despot::util::tinyxml::TiXmlCursor
TiXmlCursor	include/despot/util/tinyxml/tinyxml.h	/^struct TiXmlCursor {$/;"	s	namespace:despot::util::tinyxml
TiXmlDeclaration	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlDeclaration() :$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
TiXmlDeclaration	include/despot/util/tinyxml/tinyxml.h	/^class TiXmlDeclaration: public TiXmlNode {$/;"	c	namespace:despot::util::tinyxml
TiXmlDeclaration	src/util/tinyxml/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const std::string& _version,$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
TiXmlDeclaration	src/util/tinyxml/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration(const TiXmlDeclaration& copy) :$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
TiXmlDeclaration	src/util/tinyxml/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration(const char * _version,$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
TiXmlDocument	include/despot/util/tinyxml/tinyxml.h	/^class TiXmlDocument: public TiXmlNode {$/;"	c	namespace:despot::util::tinyxml
TiXmlDocument	src/util/tinyxml/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const std::string& documentName ) : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:despot::util::tinyxml::TiXmlDocument
TiXmlDocument	src/util/tinyxml/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument() :$/;"	f	class:despot::util::tinyxml::TiXmlDocument
TiXmlDocument	src/util/tinyxml/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument(const TiXmlDocument& copy) :$/;"	f	class:despot::util::tinyxml::TiXmlDocument
TiXmlDocument	src/util/tinyxml/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument(const char * documentName) :$/;"	f	class:despot::util::tinyxml::TiXmlDocument
TiXmlElement	include/despot/pomdpx/parser/parser.h	/^  typedef util::tinyxml::TiXmlElement TiXmlElement;$/;"	t	class:despot::Parser
TiXmlElement	include/despot/util/tinyxml/tinyxml.h	/^class TiXmlElement: public TiXmlNode {$/;"	c	namespace:despot::util::tinyxml
TiXmlElement	src/util/tinyxml/tinyxml.cpp	/^TiXmlElement::TiXmlElement( const std::string& _value )$/;"	f	class:despot::util::tinyxml::TiXmlElement
TiXmlElement	src/util/tinyxml/tinyxml.cpp	/^TiXmlElement::TiXmlElement(const TiXmlElement& copy) :$/;"	f	class:despot::util::tinyxml::TiXmlElement
TiXmlElement	src/util/tinyxml/tinyxml.cpp	/^TiXmlElement::TiXmlElement(const char * _value) :$/;"	f	class:despot::util::tinyxml::TiXmlElement
TiXmlEncoding	include/despot/util/tinyxml/tinyxml.h	/^enum TiXmlEncoding {$/;"	g	namespace:despot::util::tinyxml
TiXmlFOpen	src/util/tinyxml/tinyxml.cpp	/^FILE* TiXmlFOpen(const char* filename, const char* mode) {$/;"	f	namespace:despot::util::tinyxml
TiXmlHandle	include/despot/pomdpx/parser/parser.h	/^  typedef util::tinyxml::TiXmlHandle TiXmlHandle;$/;"	t	class:despot::Parser
TiXmlHandle	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlHandle(TiXmlNode* _node) {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
TiXmlHandle	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlHandle(const TiXmlHandle& ref) {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
TiXmlHandle	include/despot/util/tinyxml/tinyxml.h	/^class TiXmlHandle {$/;"	c	namespace:despot::util::tinyxml
TiXmlNode	include/despot/util/tinyxml/tinyxml.h	/^class TiXmlNode: public TiXmlBase {$/;"	c	namespace:despot::util::tinyxml
TiXmlNode	src/util/tinyxml/tinyxml.cpp	/^TiXmlNode::TiXmlNode(NodeType _type) :$/;"	f	class:despot::util::tinyxml::TiXmlNode
TiXmlOutStream	include/despot/util/tinyxml/tinystr.h	/^class TiXmlOutStream: public TiXmlString {$/;"	c	namespace:despot::util::tinyxml
TiXmlParsingData	src/util/tinyxml/tinyxmlparser.cpp	/^	TiXmlParsingData(const char* start, int _tabsize, int row, int col) {$/;"	f	class:despot::util::tinyxml::TiXmlParsingData	file:
TiXmlParsingData	src/util/tinyxml/tinyxmlparser.cpp	/^class TiXmlParsingData {$/;"	c	namespace:despot::util::tinyxml	file:
TiXmlPrinter	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlPrinter() :$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
TiXmlPrinter	include/despot/util/tinyxml/tinyxml.h	/^class TiXmlPrinter: public TiXmlVisitor {$/;"	c	namespace:despot::util::tinyxml
TiXmlString	include/despot/util/tinyxml/tinystr.h	/^	TIXML_EXPLICIT TiXmlString(const char * copy) :$/;"	f	class:despot::util::tinyxml::TiXmlString
TiXmlString	include/despot/util/tinyxml/tinystr.h	/^	TIXML_EXPLICIT TiXmlString(const char * str, size_type len) :$/;"	f	class:despot::util::tinyxml::TiXmlString
TiXmlString	include/despot/util/tinyxml/tinystr.h	/^	TiXmlString() :$/;"	f	class:despot::util::tinyxml::TiXmlString
TiXmlString	include/despot/util/tinyxml/tinystr.h	/^	TiXmlString(const TiXmlString & copy) :$/;"	f	class:despot::util::tinyxml::TiXmlString
TiXmlString	include/despot/util/tinyxml/tinystr.h	/^class TiXmlString {$/;"	c	namespace:despot::util::tinyxml
TiXmlText	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlText( const std::string& initValue ) : TiXmlNode (TiXmlNode::TEXT)$/;"	f	class:despot::util::tinyxml::TiXmlText
TiXmlText	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlText(const TiXmlText& copy) :$/;"	f	class:despot::util::tinyxml::TiXmlText
TiXmlText	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlText(const char * initValue) :$/;"	f	class:despot::util::tinyxml::TiXmlText
TiXmlText	include/despot/util/tinyxml/tinyxml.h	/^class TiXmlText: public TiXmlNode {$/;"	c	namespace:despot::util::tinyxml
TiXmlUnknown	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlUnknown() :$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
TiXmlUnknown	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlUnknown(const TiXmlUnknown& copy) :$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
TiXmlUnknown	include/despot/util/tinyxml/tinyxml.h	/^class TiXmlUnknown: public TiXmlNode {$/;"	c	namespace:despot::util::tinyxml
TiXmlVisitor	include/despot/util/tinyxml/tinyxml.h	/^class TiXmlVisitor {$/;"	c	namespace:despot::util::tinyxml
Tiger	examples/cpp_models/tiger/src/tiger.cpp	/^Tiger::Tiger() {$/;"	f	class:despot::Tiger
Tiger	examples/cpp_models/tiger/src/tiger.h	/^class Tiger: public DSPOMDP {$/;"	c	namespace:despot
TigerState	examples/cpp_models/tiger/src/tiger.cpp	/^TigerState::TigerState() :$/;"	f	class:despot::TigerState
TigerState	examples/cpp_models/tiger/src/tiger.cpp	/^TigerState::TigerState(int position) :$/;"	f	class:despot::TigerState
TigerState	examples/cpp_models/tiger/src/tiger.h	/^class TigerState: public State {$/;"	c	namespace:despot
Timer	include/despot/util/timer.h	/^	Timer(int millis) {$/;"	f	class:despot::Timer
Timer	include/despot/util/timer.h	/^class Timer {$/;"	c	namespace:despot
ToComment	include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlComment* ToComment() {$/;"	f	class:despot::util::tinyxml::TiXmlComment
ToComment	include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlComment* ToComment() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToComment	include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlComment* ToComment() const {$/;"	f	class:despot::util::tinyxml::TiXmlComment
ToComment	include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlComment* ToComment() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToDeclaration	include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlDeclaration* ToDeclaration() {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
ToDeclaration	include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlDeclaration* ToDeclaration() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToDeclaration	include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
ToDeclaration	include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToDocument	include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlDocument* ToDocument() {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
ToDocument	include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlDocument* ToDocument() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToDocument	include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlDocument* ToDocument() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
ToDocument	include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlDocument* ToDocument() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToElement	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* ToElement() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
ToElement	include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlElement* ToElement() {$/;"	f	class:despot::util::tinyxml::TiXmlElement
ToElement	include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlElement* ToElement() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToElement	include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlElement* ToElement() const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
ToElement	include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlElement* ToElement() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToLower	include/despot/util/tinyxml/tinyxml.h	/^	inline static int ToLower(int v, TiXmlEncoding encoding) {$/;"	f	class:despot::util::tinyxml::TiXmlBase
ToNode	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* ToNode() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
ToText	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlText* ToText() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
ToText	include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlText* ToText() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToText	include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlText* ToText() {$/;"	f	class:despot::util::tinyxml::TiXmlText
ToText	include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlText* ToText() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToText	include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlText* ToText() const {$/;"	f	class:despot::util::tinyxml::TiXmlText
ToUnknown	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlUnknown* ToUnknown() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
ToUnknown	include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlUnknown* ToUnknown() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToUnknown	include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlUnknown* ToUnknown() {$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
ToUnknown	include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlUnknown* ToUnknown() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToUnknown	include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlUnknown* ToUnknown() const {$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
Tokenize	src/util/util.cpp	/^vector<string> Tokenize(const string& str, const string& delimiters) {$/;"	f	namespace:despot
Tokenize	src/util/util.cpp	/^vector<string> Tokenize(string line, char delim) {$/;"	f	namespace:despot
Track	include/despot/core/globals.h	/^inline void Track(std::string addr, std::string loc) {$/;"	f	namespace:despot::Globals
Track	src/util/exec_tracker.cpp	/^void ExecTracker::Track(string addr, string position) {$/;"	f	class:despot::ExecTracker
TransitionProbability	examples/cpp_models/adventurer/src/adventurer.cpp	/^const vector<State>& Adventurer::TransitionProbability(int s, int a) const {$/;"	f	class:despot::Adventurer
TransitionProbability	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^const vector<State>& Navigation::TransitionProbability(int s, int a) const {$/;"	f	class:despot::Navigation
TransitionProbability	examples/cpp_models/navigation/src/navigation.cpp	/^const vector<State>& Navigation::TransitionProbability(int s, int a) const {$/;"	f	class:despot::Navigation
TransitionProbability	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^const vector<State>& Navigation::TransitionProbability(int s, int a) const {$/;"	f	class:despot::Navigation
TransitionProbability	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^const vector<State>& RegDemo::TransitionProbability(int s, int a) const {$/;"	f	class:despot::RegDemo
TransitionProbability	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^const vector<State>& BaseRockSample::TransitionProbability(int s, int a) const {$/;"	f	class:despot::BaseRockSample
TransitionProbability	examples/cpp_models/tag/src/base/base_tag.cpp	/^const vector<State>& BaseTag::TransitionProbability(int s, int a) const {$/;"	f	class:despot::BaseTag
TransitionProbability	src/pomdpx/pomdpx.cpp	/^const vector<State>& POMDPX::TransitionProbability(int s, int a) const {$/;"	f	class:despot::POMDPX
Trial	src/solver/despot.cpp	/^VNode* DESPOT::Trial(VNode* root, RandomStreams& streams,$/;"	f	class:despot::DESPOT
TrivialBeliefLowerBound	include/despot/core/lower_bound.h	/^class TrivialBeliefLowerBound: public BeliefLowerBound {$/;"	c	namespace:despot
TrivialBeliefLowerBound	src/core/lower_bound.cpp	/^TrivialBeliefLowerBound::TrivialBeliefLowerBound(const DSPOMDP* model,$/;"	f	class:despot::TrivialBeliefLowerBound
TrivialBeliefUpperBound	include/despot/core/upper_bound.h	/^class TrivialBeliefUpperBound: public BeliefUpperBound {$/;"	c	namespace:despot
TrivialBeliefUpperBound	src/core/upper_bound.cpp	/^TrivialBeliefUpperBound::TrivialBeliefUpperBound(const DSPOMDP* model) :$/;"	f	class:despot::TrivialBeliefUpperBound
TrivialParticleLowerBound	include/despot/core/lower_bound.h	/^class TrivialParticleLowerBound: public ParticleLowerBound {$/;"	c	namespace:despot
TrivialParticleLowerBound	src/core/lower_bound.cpp	/^TrivialParticleLowerBound::TrivialParticleLowerBound(const DSPOMDP* model) :$/;"	f	class:despot::TrivialParticleLowerBound
TrivialParticleUpperBound	include/despot/core/upper_bound.h	/^class TrivialParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot
TrivialParticleUpperBound	src/core/upper_bound.cpp	/^TrivialParticleUpperBound::TrivialParticleUpperBound(const DSPOMDP* model) :$/;"	f	class:despot::TrivialParticleUpperBound
Truncate	include/despot/core/history.h	/^	void Truncate(int d) {$/;"	f	class:despot::History
Type	include/despot/util/tinyxml/tinyxml.h	/^	int Type() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
UNKNOWN	include/despot/util/tinyxml/tinyxml.h	/^		DOCUMENT, ELEMENT, COMMENT, UNKNOWN, TEXT, DECLARATION, TYPECOUNT$/;"	e	enum:despot::util::tinyxml::TiXmlNode::NodeType
UPPER_BOUND_H	include/despot/core/upper_bound.h	2;"	d
UTIL_H	include/despot/util/util.h	2;"	d
UTIL_TEST_H	include/despot/test/util_test.h	2;"	d
UniformPOMCPPrior	include/despot/solver/pomcp.h	/^class UniformPOMCPPrior: public POMCPPrior {$/;"	c	namespace:despot
UniformPOMCPPrior	src/solver/pomcp.cpp	/^UniformPOMCPPrior::UniformPOMCPPrior(const DSPOMDP* model) :$/;"	f	class:despot::UniformPOMCPPrior
Unknown	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlUnknown* Unknown() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
UnsetFlag	include/despot/util/util.h	/^inline void UnsetFlag(int& flags, int bit) {$/;"	f	namespace:despot
Untrack	include/despot/core/globals.h	/^inline void Untrack(std::string addr) {$/;"	f	namespace:despot::Globals
Untrack	src/util/exec_tracker.cpp	/^void ExecTracker::Untrack(string addr) {$/;"	f	class:despot::ExecTracker
Update	examples/cpp_models/chain/src/chain.cpp	/^void FullChainBelief::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::FullChainBelief
Update	examples/cpp_models/chain/src/chain.cpp	/^void SemiChainBelief::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::SemiChainBelief
Update	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void NavigationBelief::Update(int action, OBS_TYPE obs){$/;"	f	class:despot::NavigationBelief
Update	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void NavigationBelief::Update(int action, OBS_TYPE obs){$/;"	f	class:despot::NavigationBelief
Update	examples/cpp_models/pocman/src/pocman.cpp	/^void PocmanBelief::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::PocmanBelief
Update	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	void Update(int action, OBS_TYPE obs) { \/\/ TODO: Not complete yet$/;"	f	class:despot::RockSampleBelief
Update	examples/cpp_models/tag/src/base/base_tag.cpp	/^void TagBelief::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::TagBelief
Update	src/core/belief.cpp	/^void ParticleBelief::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::ParticleBelief
Update	src/core/policy.cpp	/^void BlindPolicy::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::BlindPolicy
Update	src/core/policy.cpp	/^void RandomPolicy::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::RandomPolicy
Update	src/core/solver.cpp	/^void Solver::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::Solver
Update	src/pomdpx/pomdpx.cpp	/^	void Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::POMDPXBelief
Update	src/solver/aems.cpp	/^void AEMS::Update(QNode* qnode) {$/;"	f	class:despot::AEMS
Update	src/solver/aems.cpp	/^void AEMS::Update(VNode* vnode) {$/;"	f	class:despot::AEMS
Update	src/solver/aems.cpp	/^void AEMS::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::AEMS
Update	src/solver/despot.cpp	/^void DESPOT::Update(QNode* qnode) {$/;"	f	class:despot::DESPOT
Update	src/solver/despot.cpp	/^void DESPOT::Update(VNode* vnode) {$/;"	f	class:despot::DESPOT
Update	src/solver/despot.cpp	/^void DESPOT::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::DESPOT
Update	src/solver/pomcp.cpp	/^void DPOMCP::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::DPOMCP
Update	src/solver/pomcp.cpp	/^void POMCP::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::POMCP
UpdateTimeInfo	src/evaluator.cpp	/^void IPPCEvaluator::UpdateTimeInfo(string instance) {$/;"	f	class:despot::IPPCEvaluator
UpdateTimePerMove	src/evaluator.cpp	/^void IPPCEvaluator::UpdateTimePerMove(double step_time) {$/;"	f	class:despot::IPPCEvaluator
UpdateTimePerMove	src/evaluator.cpp	/^void POMDPEvaluator::UpdateTimePerMove(double step_time) {$/;"	f	class:despot::POMDPEvaluator
UpperBoundAction	src/solver/pomcp.cpp	/^int POMCP::UpperBoundAction(const VNode* vnode, double explore_constant) {$/;"	f	class:despot::POMCP
VARIABLE_H	include/despot/pomdpx/parser/variable.h	2;"	d
VERBOSE	include/despot/util/logging.h	/^	static const int NONE, ERROR, WARN, INFO, DEBUG, VERBOSE;$/;"	m	class:despot::logging
VERBOSE	src/util/logging.cpp	/^const int logging::VERBOSE = 5;$/;"	m	class:despot::logging	file:
VNode	include/despot/core/node.h	/^class VNode {$/;"	c	namespace:despot
VNode	src/core/node.cpp	/^VNode::VNode(Belief* belief, int depth, QNode* parent, OBS_TYPE edge) :$/;"	f	class:despot::VNode
VNode	src/core/node.cpp	/^VNode::VNode(int count, double value, int depth, QNode* parent, OBS_TYPE edge) :$/;"	f	class:despot::VNode
VNode	src/core/node.cpp	/^VNode::VNode(vector<State*>& particles, int depth, QNode* parent,$/;"	f	class:despot::VNode
VPATH	Makefile	/^VPATH = $(shell find -L $(INCDIR) $(SRCDIR) -type d \\( ! -name '.*' \\))$/;"	m
Validate	examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::Validate(const State& state) const {$/;"	f	class:despot::Pocman
Validate	src/pomdpx/parser/function.cpp	/^bool HierarchyCPT::Validate() const {$/;"	f	class:despot::HierarchyCPT
Validate	src/pomdpx/parser/function.cpp	/^bool TabularCPT::Validate() const {$/;"	f	class:despot::TabularCPT
Value	examples/cpp_models/chain/src/chain.cpp	/^	ValuedAction Value(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::MeanMDPScenarioLowerBound
Value	examples/cpp_models/chain/src/chain.cpp	/^	double Value(const State& s) const {$/;"	f	class:despot::ApproxMDPChainParticleUpperBound
Value	examples/cpp_models/chain/src/chain.cpp	/^	double Value(const State& s) const {$/;"	f	class:despot::OneStepLookaheadChainParticleUpperBound
Value	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	ValuedAction Value(const vector<State*>& particles) const {$/;"	f	class:despot::LocalLegalParticleLowerBound
Value	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	double Value(const State& state) const {$/;"	f	class:despot::LocalnavigationParticleUpperBound
Value	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	double Value(const vector<State*>& particles,$/;"	f	class:despot::LocalApproxScenarioUpperBound
Value	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	ValuedAction Value(const vector<State*>& particles) const {$/;"	f	class:despot::LocalLegalParticleLowerBound
Value	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	double Value(const State& state) const {$/;"	f	class:despot::LocalnavigationParticleUpperBound
Value	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	double Value(const vector<State*>& particles,$/;"	f	class:despot::LocalApproxScenarioUpperBound
Value	examples/cpp_models/pocman/src/pocman.cpp	/^	ValuedAction Value(const vector<State*>& particles) const {$/;"	f	class:despot::PocmanLegalParticleLowerBound
Value	examples/cpp_models/pocman/src/pocman.cpp	/^	double Value(const State& state) const {$/;"	f	class:despot::PocmanSmartParticleUpperBound
Value	examples/cpp_models/pocman/src/pocman.cpp	/^	double Value(const vector<State*>& particles,$/;"	f	class:despot::PocmanApproxScenarioUpperBound
Value	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	ValuedAction Value(const Belief* belief) const {$/;"	f	class:despot::RockSampleEastBeliefPolicy
Value	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	ValuedAction Value(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::RockSampleENTScenarioLowerBound
Value	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	ValuedAction Value(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::RockSampleEastScenarioLowerBound
Value	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	ValuedAction Value(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::RockSampleMMAPStateScenarioLowerBound
Value	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	double Value(const Belief* belief) const {$/;"	f	class:despot::RockSampleMDPBeliefUpperBound
Value	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	double Value(const State& state) const {$/;"	f	class:despot::RockSampleApproxParticleUpperBound
Value	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	double Value(const State& state) const {$/;"	f	class:despot::RockSampleMDPParticleUpperBound
Value	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	double Value(const State& state) const {$/;"	f	class:despot::RockSampleParticleUpperBound1
Value	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	double Value(const State& state) const {$/;"	f	class:despot::RockSampleParticleUpperBound2
Value	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^	double Value(const State& s) const {$/;"	f	class:despot::SimpleNaviParticleUpperBound
Value	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^	double Value(const State& s) const {$/;"	f	class:despot::SimpleRockSampleParticleUpperBound
Value	examples/cpp_models/tag/src/base/base_tag.cpp	/^	ValuedAction Value(const Belief* belief) const {$/;"	f	class:despot::TagBlindBeliefPolicy
Value	examples/cpp_models/tag/src/base/base_tag.cpp	/^	double Value(const Belief* belief) const {$/;"	f	class:despot::TagManhattanUpperBound
Value	examples/cpp_models/tag/src/base/base_tag.cpp	/^	double Value(const State& s) const {$/;"	f	class:despot::TagManhattanUpperBound
Value	examples/cpp_models/tag/src/base/base_tag.cpp	/^	double Value(const State& s) const {$/;"	f	class:despot::TagSPParticleUpperBound
Value	include/despot/util/tinyxml/tinyxml.h	/^	const char *Value() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
Value	include/despot/util/tinyxml/tinyxml.h	/^	const char* Value() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
Value	src/core/lower_bound.cpp	/^ValuedAction POMCPScenarioLowerBound::Value(const vector<State*>& particles,$/;"	f	class:despot::POMCPScenarioLowerBound
Value	src/core/lower_bound.cpp	/^ValuedAction ParticleLowerBound::Value(const vector<State*>& particles,$/;"	f	class:despot::ParticleLowerBound
Value	src/core/lower_bound.cpp	/^ValuedAction TrivialBeliefLowerBound::Value(const Belief* belief) const {$/;"	f	class:despot::TrivialBeliefLowerBound
Value	src/core/lower_bound.cpp	/^ValuedAction TrivialParticleLowerBound::Value($/;"	f	class:despot::TrivialParticleLowerBound
Value	src/core/policy.cpp	/^ValuedAction Policy::Value(const vector<State*>& particles,$/;"	f	class:despot::Policy
Value	src/core/upper_bound.cpp	/^double LookaheadUpperBound::Value(const vector<State*>& particles,$/;"	f	class:despot::LookaheadUpperBound
Value	src/core/upper_bound.cpp	/^double MDPUpperBound::Value(const Belief* belief) const {$/;"	f	class:despot::MDPUpperBound
Value	src/core/upper_bound.cpp	/^double MDPUpperBound::Value(const State& state) const {$/;"	f	class:despot::MDPUpperBound
Value	src/core/upper_bound.cpp	/^double ParticleUpperBound::Value(const vector<State*>& particles,$/;"	f	class:despot::ParticleUpperBound
Value	src/core/upper_bound.cpp	/^double TrivialBeliefUpperBound::Value(const Belief* belief) const {$/;"	f	class:despot::TrivialBeliefUpperBound
Value	src/core/upper_bound.cpp	/^double TrivialParticleUpperBound::Value(const State& state) const {$/;"	f	class:despot::TrivialParticleUpperBound
Value	src/core/upper_bound.cpp	/^double TrivialParticleUpperBound::Value(const vector<State*>& particles,$/;"	f	class:despot::TrivialParticleUpperBound
ValueStr	include/despot/util/tinyxml/tinyxml.h	/^	const std::string& ValueStr() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
ValueStr	include/despot/util/tinyxml/tinyxml.h	/^	const std::string& ValueStr() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ValueTStr	include/despot/util/tinyxml/tinyxml.h	/^	const TIXML_STRING& ValueTStr() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ValuedAction	include/despot/core/policy.h	/^struct ValuedAction {$/;"	s	namespace:despot
ValuedAction	src/core/lower_bound.cpp	/^ValuedAction::ValuedAction() :$/;"	f	class:despot::ValuedAction
ValuedAction	src/core/lower_bound.cpp	/^ValuedAction::ValuedAction(int _action, double _value) :$/;"	f	class:despot::ValuedAction
Variable	include/despot/pomdpx/parser/variable.h	/^class Variable {$/;"	c	namespace:despot
Variable	src/pomdpx/parser/variable.cpp	/^Variable::Variable() {$/;"	f	class:despot::Variable
Version	include/despot/util/tinyxml/tinyxml.h	/^	const char *Version() const {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
Visit	include/despot/util/tinyxml/tinyxml.h	/^	virtual bool Visit(const TiXmlComment& \/*comment*\/) {$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
Visit	include/despot/util/tinyxml/tinyxml.h	/^	virtual bool Visit(const TiXmlDeclaration& \/*declaration*\/) {$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
Visit	include/despot/util/tinyxml/tinyxml.h	/^	virtual bool Visit(const TiXmlText& \/*text*\/) {$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
Visit	include/despot/util/tinyxml/tinyxml.h	/^	virtual bool Visit(const TiXmlUnknown& \/*unknown*\/) {$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
Visit	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::Visit(const TiXmlComment& comment) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
Visit	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::Visit(const TiXmlDeclaration& declaration) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
Visit	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::Visit(const TiXmlText& text) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
Visit	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::Visit(const TiXmlUnknown& unknown) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
VisitEnter	include/despot/util/tinyxml/tinyxml.h	/^	virtual bool VisitEnter(const TiXmlDocument& \/*doc*\/) {$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
VisitEnter	include/despot/util/tinyxml/tinyxml.h	/^	virtual bool VisitEnter(const TiXmlElement& \/*element*\/,$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
VisitEnter	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter(const TiXmlDocument&) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
VisitEnter	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter(const TiXmlElement& element,$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
VisitExit	include/despot/util/tinyxml/tinyxml.h	/^	virtual bool VisitExit(const TiXmlDocument& \/*doc*\/) {$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
VisitExit	include/despot/util/tinyxml/tinyxml.h	/^	virtual bool VisitExit(const TiXmlElement& \/*element*\/) {$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
VisitExit	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::VisitExit(const TiXmlDocument&) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
VisitExit	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::VisitExit(const TiXmlElement& element) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
WARN	include/despot/util/logging.h	/^	static const int NONE, ERROR, WARN, INFO, DEBUG, VERBOSE;$/;"	m	class:despot::logging
WARN	src/util/logging.cpp	/^const int logging::WARN = 2;$/;"	m	class:despot::logging	file:
WEST	include/despot/util/coord.h	/^		SOUTH, EAST, NORTH, WEST, NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST$/;"	e	enum:despot::Compass::__anon15
WEU	src/solver/despot.cpp	/^double DESPOT::WEU(VNode* vnode) {$/;"	f	class:despot::DESPOT
WEU	src/solver/despot.cpp	/^double DESPOT::WEU(VNode* vnode, double xi) {$/;"	f	class:despot::DESPOT
Weight	src/core/node.cpp	/^double QNode::Weight() const {$/;"	f	class:despot::QNode
Weight	src/core/node.cpp	/^double VNode::Weight() const {$/;"	f	class:despot::VNode
Weight	src/core/pomdp.cpp	/^double State::Weight(const vector<State*>& particles) {$/;"	f	class:despot::State
XML_INPUT_ERROR	include/despot/pomdpx/parser/parser.h	22;"	d
__builtin_clz	include/despot/util/optionparser.h	234;"	d
action	include/despot/core/policy.h	/^	int action;$/;"	m	struct:despot::ValuedAction
action_	include/despot/core/policy.h	/^	int action_;$/;"	m	class:despot::BlindPolicy
action_cmd	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^    std_msgs::Int32  action_cmd;$/;"	m	class:despot::Navigation
action_probs_	include/despot/core/policy.h	/^	std::vector<double> action_probs_;$/;"	m	class:despot::RandomPolicy
action_vars_	include/despot/pomdpx/parser/parser.h	/^	mutable std::vector<ActionVar> action_vars_;$/;"	m	class:despot::Parser
actions_	include/despot/core/history.h	/^  std::vector<int> actions_;$/;"	m	class:despot::History
add	include/despot/util/optionparser.h	/^	void add(bool gnu, const Descriptor usage[], int argc, char** argv,$/;"	f	struct:despot::option::Stats
add	include/despot/util/optionparser.h	/^	void add(const Descriptor usage[], int argc, char** argv, int min_abbr_len =$/;"	f	struct:despot::option::Stats
add	include/despot/util/optionparser.h	/^	void add(const Descriptor usage[], int argc, const char** argv,$/;"	f	struct:despot::option::Stats
add	include/despot/util/optionparser.h	/^inline void Stats::add(bool gnu, const Descriptor usage[], int argc,$/;"	f	class:despot::option::Stats
allocated_	include/despot/util/memorypool.h	/^	bool allocated_;$/;"	m	class:despot::MemoryObject
allocated_time	include/despot/evaluator.h	/^	static double allocated_time;$/;"	m	class:despot::EvalLog
allocated_time	src/evaluator.cpp	/^double EvalLog::allocated_time = 1.0;$/;"	m	class:despot::EvalLog	file:
alpha	src/util/dirichlet.cpp	/^vector<double> Dirichlet::alpha() {$/;"	f	class:despot::Dirichlet
alpha_	examples/cpp_models/chain/src/chain.h	/^	double alpha_;$/;"	m	class:despot::Chain
alpha_	examples/cpp_models/chain/src/chain.h	/^	std::vector<std::vector<double> > alpha_;$/;"	m	class:despot::SemiChainBelief
alpha_	examples/cpp_models/chain/src/chain.h	/^	std::vector<std::vector<std::vector<double> > > alpha_;$/;"	m	class:despot::FullChainBelief
alpha_	include/despot/util/dirichlet.h	/^  std::vector<double> alpha_;$/;"	m	class:despot::Dirichlet
alpha_vectors_	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	std::vector<std::vector<double> > alpha_vectors_; \/\/ For blind policy$/;"	m	class:despot::BaseRockSample
alpha_vectors_	examples/cpp_models/tag/src/base/base_tag.cpp	/^	vector<vector<double> > alpha_vectors_;$/;"	m	class:despot::TagBlindBeliefPolicy	file:
append	include/despot/util/optionparser.h	/^	void append(Option* new_last) {$/;"	f	class:despot::option::Option
append	src/util/tinyxml/tinystr.cpp	/^TiXmlString& TiXmlString::append(const char* str, size_type len) {$/;"	f	class:despot::util::tinyxml::TiXmlString
arg	include/despot/util/optionparser.h	/^	const char* arg;$/;"	m	class:despot::option::Option
assign	src/util/tinyxml/tinystr.cpp	/^TiXmlString& TiXmlString::assign(const char* str, size_type len) {$/;"	f	class:despot::util::tinyxml::TiXmlString
at	include/despot/util/tinyxml/tinystr.h	/^	const char& at(size_type index) const {$/;"	f	class:despot::util::tinyxml::TiXmlString
attributeSet	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttributeSet attributeSet;$/;"	m	class:despot::util::tinyxml::TiXmlElement
belief	examples/cpp_models/tag/src/base/base_tag.cpp	/^	void belief(Belief* belief) {$/;"	f	class:despot::TagHistoryModePolicy
belief	src/core/node.cpp	/^Belief* VNode::belief() const {$/;"	f	class:despot::VNode
belief	src/core/solver.cpp	/^Belief* Solver::belief() {$/;"	f	class:despot::Solver
belief	src/core/solver.cpp	/^void Solver::belief(Belief* b) {$/;"	f	class:despot::Solver
belief	src/solver/aems.cpp	/^void AEMS::belief(Belief* b) {$/;"	f	class:despot::AEMS
belief	src/solver/despot.cpp	/^void DESPOT::belief(Belief* b) {$/;"	f	class:despot::DESPOT
belief	src/solver/pomcp.cpp	/^void DPOMCP::belief(Belief* b) {$/;"	f	class:despot::DPOMCP
belief	src/solver/pomcp.cpp	/^void POMCP::belief(Belief* b) {$/;"	f	class:despot::POMCP
belief_	include/despot/core/node.h	/^	Belief* belief_; \/\/ Used in AEMS$/;"	m	class:despot::VNode
belief_	include/despot/core/solver.h	/^	Belief* belief_;$/;"	m	class:despot::Solver
belief_type_	include/despot/evaluator.h	/^	std::string belief_type_;$/;"	m	class:despot::Evaluator
blind_alpha_	include/despot/core/mdp.h	/^	std::vector<std::vector<double> > blind_alpha_; \/\/ For blind policy$/;"	m	class:despot::MDP
bounds_	include/despot/core/upper_bound.h	/^	std::vector<std::vector<std::vector<double> > > bounds_;$/;"	m	class:despot::LookaheadUpperBound
buf_empty	include/despot/util/optionparser.h	/^		bool buf_empty() {$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
buf_full	include/despot/util/optionparser.h	/^		bool buf_full() {$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
buf_next	include/despot/util/optionparser.h	/^		void buf_next() {$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
buf_store	include/despot/util/optionparser.h	/^		void buf_store(const char* data, int len) {$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
buffer	include/despot/util/optionparser.h	/^	Option* buffer;$/;"	m	class:despot::option::Parser::StoreOptionAction
buffer	include/despot/util/tinyxml/tinyxml.h	/^	bool simpleTextPrint;TIXML_STRING buffer;TIXML_STRING indent;TIXML_STRING lineBreak;$/;"	m	class:despot::util::tinyxml::TiXmlPrinter
buffer_	include/despot/util/logging.h	/^	log_buf buffer_;$/;"	m	class:despot::log_ostream
buffer_max	include/despot/util/optionparser.h	/^	unsigned buffer_max;$/;"	m	struct:despot::option::Stats
buffer_max	include/despot/util/optionparser.h	/^	unsigned* buffer_max;$/;"	m	class:despot::option::Stats::CountOptionsAction
bufmask	include/despot/util/optionparser.h	/^		static const int bufmask = 15; \/\/!< Must be a power of 2 minus 1.$/;"	m	class:despot::option::PrintUsageImplementation::LineWrapper
bufmax	include/despot/util/optionparser.h	/^	int bufmax; \/\/! Number of slots in @c buffer. @c -1 means "large enou.h>.$/;"	m	class:despot::option::Parser::StoreOptionAction
builtin_clz	include/despot/util/optionparser.h	/^	static int builtin_clz(unsigned x)$/;"	f	struct:despot::option::MSC_Builtin_CLZ
c_str	include/despot/util/tinyxml/tinystr.h	/^	const char * c_str() const {$/;"	f	class:despot::util::tinyxml::TiXmlString
capacity	include/despot/util/tinyxml/tinystr.h	/^		size_type size, capacity;$/;"	m	struct:despot::util::tinyxml::TiXmlString::Rep
capacity	include/despot/util/tinyxml/tinystr.h	/^	size_type capacity() const {$/;"	f	class:despot::util::tinyxml::TiXmlString
cdata	include/despot/util/tinyxml/tinyxml.h	/^	bool cdata; \/\/ true if this should be input and output as a CDATA style text element$/;"	m	class:despot::util::tinyxml::TiXmlText
cells_	include/despot/util/floor.h	/^  std::vector<Coord> cells_;$/;"	m	class:despot::Floor
chain_model_	examples/cpp_models/chain/src/chain.cpp	/^	const Chain* chain_model_;$/;"	m	class:despot::MeanMDPPolicy	file:
chain_model_	examples/cpp_models/chain/src/chain.cpp	/^	const Chain* chain_model_;$/;"	m	class:despot::MeanMDPScenarioLowerBound	file:
chase_prob_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	double chase_prob_, defensive_slip_;$/;"	m	class:despot::Navigation
chase_prob_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double chase_prob_, defensive_slip_;$/;"	m	class:despot::Navigation
chase_prob_	examples/cpp_models/pocman/src/pocman.h	/^	double food_prob_, chase_prob_, defensive_slip_;$/;"	m	class:despot::Pocman
check_arg	include/despot/util/optionparser.h	/^	const CheckArg check_arg;$/;"	m	struct:despot::option::Descriptor
child	src/pomdpx/parser/function.cpp	/^const NamedVar* Function::child() const {$/;"	f	class:despot::Function
child_	include/despot/pomdpx/parser/function.h	/^	NamedVar* child_;$/;"	m	class:despot::Function
children	src/core/node.cpp	/^const vector<QNode*>& VNode::children() const {$/;"	f	class:despot::VNode
children	src/core/node.cpp	/^map<OBS_TYPE, VNode*>& QNode::children() {$/;"	f	class:despot::QNode
children	src/core/node.cpp	/^vector<QNode*>& VNode::children() {$/;"	f	class:despot::VNode
children_	include/despot/core/node.h	/^	std::map<OBS_TYPE, VNode*> children_;$/;"	m	class:despot::QNode
children_	include/despot/core/node.h	/^	std::vector<QNode*> children_;$/;"	m	class:despot::VNode
chr	include/despot/util/tinyxml/tinyxml.h	/^		char chr;$/;"	m	struct:despot::util::tinyxml::TiXmlBase::Entity
chunk_iterator_	include/despot/util/memorypool.h	/^	typedef typename std::vector<Chunk*>::iterator chunk_iterator_;$/;"	t	class:despot::MemoryPool
chunks_	include/despot/util/memorypool.h	/^	std::vector<Chunk*> chunks_;$/;"	m	class:despot::MemoryPool
clear	include/despot/util/tinyxml/tinystr.h	/^	void clear() {$/;"	f	class:despot::util::tinyxml::TiXmlString
client_	include/despot/evaluator.h	/^	Client* client_;$/;"	m	class:despot::IPPCEvaluator
closeConnection	src/ippc/client.cpp	/^void Client::closeConnection() {$/;"	f	class:despot::Client
col	include/despot/util/optionparser.h	/^		int col; \/\/!< Index of current column.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
col	include/despot/util/tinyxml/tinyxml.h	/^	int col; \/\/ 0 based.$/;"	m	struct:despot::util::tinyxml::TiXmlCursor
column	include/despot/util/optionparser.h	/^		int column() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
condenseWhiteSpace	include/despot/util/tinyxml/tinyxml.h	/^	static bool condenseWhiteSpace;$/;"	m	class:despot::util::tinyxml::TiXmlBase
condenseWhiteSpace	src/util/tinyxml/tinyxml.cpp	/^bool TiXmlBase::condenseWhiteSpace = true;$/;"	m	class:despot::util::tinyxml::TiXmlBase	file:
config	src/core/globals.cpp	/^Config config;$/;"	m	namespace:despot::Globals	file:
connectToServer	src/ippc/client.cpp	/^void Client::connectToServer() {$/;"	f	class:despot::Client
costmapvec	examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<float> costmapvec;$/;"	m	class:despot::Navigation
costmapvec	examples/cpp_models/navigation/src/navigation.h	/^	std::vector<float> costmapvec;$/;"	m	class:despot::Navigation
costmapvec	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<float> costmapvec;$/;"	m	class:despot::Navigation
count	include/despot/util/optionparser.h	/^	int count() {$/;"	f	class:despot::option::Option
count	src/core/node.cpp	/^int QNode::count() const {$/;"	f	class:despot::QNode
count	src/core/node.cpp	/^int VNode::count() const {$/;"	f	class:despot::VNode
count	src/core/node.cpp	/^void QNode::count(int c) {$/;"	f	class:despot::QNode
count	src/core/node.cpp	/^void VNode::count(int c) {$/;"	f	class:despot::VNode
count_	include/despot/core/node.h	/^	int count_; \/\/ Number of visits on the node$/;"	m	class:despot::QNode
count_	include/despot/core/node.h	/^	int count_; \/\/ Number of visits on the node$/;"	m	class:despot::VNode
cpts_	include/despot/pomdpx/parser/function.h	/^  std::vector<TabularCPT*> cpts_;$/;"	m	class:despot::HierarchyCPT
createActionMes	src/ippc/client.cpp	/^string Client::createActionMes(const string actionName,$/;"	f	class:despot::Client
createRoundRequestMes	src/ippc/client.cpp	/^string Client::createRoundRequestMes() {$/;"	f	class:despot::Client
createSessionRequestMes	src/ippc/client.cpp	/^string Client::createSessionRequestMes(string problemName) {$/;"	f	class:despot::Client
creation_loc_	include/despot/util/exec_tracker.h	/^  std::map<std::string, std::string> creation_loc_;$/;"	m	class:despot::ExecTracker
cur_state_	examples/cpp_models/chain/src/chain.h	/^	int cur_state_;$/;"	m	class:despot::FullChainBelief
cur_state_	examples/cpp_models/chain/src/chain.h	/^	int cur_state_;$/;"	m	class:despot::SemiChainBelief
curr_inst_budget	include/despot/evaluator.h	/^	static double curr_inst_budget; \/\/ Total time in seconds given for current instance$/;"	m	class:despot::EvalLog
curr_inst_budget	src/evaluator.cpp	/^double EvalLog::curr_inst_budget = 0;$/;"	m	class:despot::EvalLog	file:
curr_inst_remaining_budget	include/despot/evaluator.h	/^	static double curr_inst_remaining_budget; \/\/ Remaining time in seconds for current instance$/;"	m	class:despot::EvalLog
curr_inst_remaining_budget	src/evaluator.cpp	/^double EvalLog::curr_inst_remaining_budget = 0;$/;"	m	class:despot::EvalLog	file:
curr_inst_remaining_steps	include/despot/evaluator.h	/^	static int curr_inst_remaining_steps;$/;"	m	class:despot::EvalLog
curr_inst_remaining_steps	src/evaluator.cpp	/^int EvalLog::curr_inst_remaining_steps = 0;$/;"	m	class:despot::EvalLog	file:
curr_inst_start_time	include/despot/evaluator.h	/^	static double curr_inst_start_time;$/;"	m	class:despot::EvalLog
curr_inst_start_time	src/evaluator.cpp	/^double EvalLog::curr_inst_start_time = 0;$/;"	m	class:despot::EvalLog	file:
curr_inst_steps	include/despot/evaluator.h	/^	static int curr_inst_steps;$/;"	m	class:despot::EvalLog
curr_inst_steps	src/evaluator.cpp	/^int EvalLog::curr_inst_steps = 0;$/;"	m	class:despot::EvalLog	file:
curr_inst_target_time	include/despot/evaluator.h	/^	static double curr_inst_target_time; \/\/ Targetted amount of time used for each step$/;"	m	class:despot::EvalLog
curr_inst_target_time	src/evaluator.cpp	/^double EvalLog::curr_inst_target_time = 0;$/;"	m	class:despot::EvalLog	file:
curr_name	include/despot/pomdpx/parser/variable.h	/^	inline const std::string& curr_name() const {$/;"	f	class:despot::StateVar
curr_name	include/despot/pomdpx/parser/variable.h	/^	inline void curr_name(std::string str) {$/;"	f	class:despot::StateVar
curr_name_	include/despot/pomdpx/parser/variable.h	/^	std::string curr_name_;$/;"	m	class:despot::StateVar
curr_state_vars_	include/despot/pomdpx/parser/parser.h	/^	mutable std::vector<StateVar> curr_state_vars_;$/;"	m	class:despot::Parser
curr_value	include/despot/pomdpx/parser/variable.h	/^	int curr_value;$/;"	m	class:despot::Variable
current_	examples/cpp_models/adventurer/src/adventurer.cpp	/^Adventurer* Adventurer::current_ = NULL;$/;"	m	class:despot::Adventurer	file:
current_	examples/cpp_models/adventurer/src/adventurer.h	/^	static Adventurer* current_;$/;"	m	class:despot::Adventurer
current_	examples/cpp_models/tag/src/base/base_tag.cpp	/^BaseTag* BaseTag::current_ = NULL;$/;"	m	class:despot::BaseTag	file:
current_	examples/cpp_models/tag/src/base/base_tag.h	/^	static BaseTag* current_;$/;"	m	class:despot::BaseTag
current_	include/despot/pomdpx/pomdpx.h	/^	static POMDPX* current_;$/;"	m	class:despot::POMDPX
current_	src/pomdpx/pomdpx.cpp	/^POMDPX* POMDPX::current_ = NULL;$/;"	m	class:despot::POMDPX	file:
cursor	src/util/tinyxml/tinyxmlparser.cpp	/^	TiXmlCursor cursor;$/;"	m	class:despot::util::tinyxml::TiXmlParsingData	file:
data	include/despot/util/optionparser.h	/^		const char* data() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
data	include/despot/util/tinyxml/tinystr.h	/^	const char * data() const {$/;"	f	class:despot::util::tinyxml::TiXmlString
datbuf	include/despot/util/optionparser.h	/^		const char* datbuf[bufmask + 1];$/;"	m	class:despot::option::PrintUsageImplementation::LineWrapper
default_action	include/despot/config.h	/^  std::string default_action;$/;"	m	struct:despot::Config
default_action_	examples/cpp_models/adventurer/src/adventurer.h	/^	std::vector<int> default_action_;$/;"	m	class:despot::Adventurer
default_action_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<int> default_action_;$/;"	m	class:despot::Navigation
default_action_	examples/cpp_models/navigation/src/navigation.h	/^	std::vector<int> default_action_;$/;"	m	class:despot::Navigation
default_action_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<int> default_action_;$/;"	m	class:despot::Navigation
default_action_	examples/cpp_models/reg_demo/src/reg_demo.h	/^	mutable std::vector<int> default_action_;$/;"	m	class:despot::RegDemo
default_action_	examples/cpp_models/tag/src/base/base_tag.h	/^	mutable std::vector<int> default_action_;$/;"	m	class:despot::BaseTag
default_action_	include/despot/pomdpx/pomdpx.h	/^	mutable std::vector<int> default_action_;$/;"	m	class:despot::POMDPX
default_move	src/core/node.cpp	/^ValuedAction VNode::default_move() const {$/;"	f	class:despot::VNode
default_move	src/core/node.cpp	/^void VNode::default_move(ValuedAction move) {$/;"	f	class:despot::VNode
default_move_	include/despot/core/node.h	/^	ValuedAction default_move_; \/\/ Value and action given by default policy$/;"	m	class:despot::VNode
default_out	include/despot/util/logging.h	63;"	d
default_value	include/despot/core/node.h	/^	double default_value;$/;"	m	class:despot::QNode
defensive_slip_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	double chase_prob_, defensive_slip_;$/;"	m	class:despot::Navigation
defensive_slip_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double chase_prob_, defensive_slip_;$/;"	m	class:despot::Navigation
defensive_slip_	examples/cpp_models/pocman/src/pocman.h	/^	double food_prob_, chase_prob_, defensive_slip_;$/;"	m	class:despot::Pocman
depth	include/despot/util/tinyxml/tinyxml.h	/^	int depth;$/;"	m	class:despot::util::tinyxml::TiXmlPrinter
depth	src/core/node.cpp	/^int VNode::depth() const {$/;"	f	class:despot::VNode
depth	src/core/node.cpp	/^void VNode::depth(int d) {$/;"	f	class:despot::VNode
depth_	include/despot/core/node.h	/^	int depth_;$/;"	m	class:despot::VNode
desc	include/despot/util/optionparser.h	/^	const Descriptor* desc;$/;"	m	class:despot::option::Option
despot	examples/cpp_models/adventurer/src/adventurer.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/adventurer/src/adventurer.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/bridge/src/bridge.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/bridge/src/bridge.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/chain/src/chain.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/chain/src/chain.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/localnavigation/src/localnavigation.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/navigation/src/navigation.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/navigation/src/navigation.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/pocman/src/pocman.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/pocman/src/pocman.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/reg_demo/src/reg_demo.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/rock_sample/src/fvrs/fvrs.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/rock_sample/src/fvrs/fvrs.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/rock_sample/src/rock_sample/rock_sample.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/rock_sample/src/rock_sample/rock_sample.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/simpleNavi/src/simpleNavi.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/tag/src/base/base_tag.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/tag/src/base/base_tag.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/tag/src/laser_tag/laser_tag.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/tag/src/tag/tag.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/tag/src/tag/tag.h	/^namespace despot {$/;"	n
despot	examples/cpp_models/tiger/src/tiger.cpp	/^namespace despot {$/;"	n	file:
despot	examples/cpp_models/tiger/src/tiger.h	/^namespace despot {$/;"	n
despot	include/despot/config.h	/^namespace despot {$/;"	n
despot	include/despot/core/belief.h	/^namespace despot {$/;"	n
despot	include/despot/core/globals.h	/^namespace despot {$/;"	n
despot	include/despot/core/history.h	/^namespace despot {$/;"	n
despot	include/despot/core/lower_bound.h	/^namespace despot {$/;"	n
despot	include/despot/core/mdp.h	/^namespace despot {$/;"	n
despot	include/despot/core/node.h	/^namespace despot {$/;"	n
despot	include/despot/core/policy.h	/^namespace despot {$/;"	n
despot	include/despot/core/pomdp.h	/^namespace despot {$/;"	n
despot	include/despot/core/solver.h	/^namespace despot {$/;"	n
despot	include/despot/core/upper_bound.h	/^namespace despot {$/;"	n
despot	include/despot/evaluator.h	/^namespace despot {$/;"	n
despot	include/despot/ippc/client.h	/^namespace despot {$/;"	n
despot	include/despot/pomdpx/parser/function.h	/^namespace despot {$/;"	n
despot	include/despot/pomdpx/parser/parser.h	/^namespace despot {$/;"	n
despot	include/despot/pomdpx/parser/variable.h	/^namespace despot {$/;"	n
despot	include/despot/pomdpx/pomdpx.h	/^namespace despot {$/;"	n
despot	include/despot/random_streams.h	/^namespace despot {$/;"	n
despot	include/despot/simple_tui.h	/^namespace despot {$/;"	n
despot	include/despot/solver/aems.h	/^namespace despot {$/;"	n
despot	include/despot/solver/despot.h	/^namespace despot {$/;"	n
despot	include/despot/solver/pomcp.h	/^namespace despot {$/;"	n
despot	include/despot/test/util_test.h	/^namespace despot {$/;"	n
despot	include/despot/util/coord.h	/^namespace despot {$/;"	n
despot	include/despot/util/dirichlet.h	/^namespace despot {$/;"	n
despot	include/despot/util/exec_tracker.h	/^namespace despot {$/;"	n
despot	include/despot/util/floor.h	/^namespace despot {$/;"	n
despot	include/despot/util/gamma.h	/^namespace despot {$/;"	n
despot	include/despot/util/grid.h	/^namespace despot {$/;"	n
despot	include/despot/util/logging.h	/^namespace despot {$/;"	n
despot	include/despot/util/memorypool.h	/^namespace despot {$/;"	n
despot	include/despot/util/optionparser.h	/^namespace despot {$/;"	n
despot	include/despot/util/random.h	/^namespace despot {$/;"	n
despot	include/despot/util/seeds.h	/^namespace despot {$/;"	n
despot	include/despot/util/timer.h	/^namespace despot {$/;"	n
despot	include/despot/util/tinyxml/tinystr.h	/^namespace despot {$/;"	n
despot	include/despot/util/tinyxml/tinyxml.h	/^namespace despot {$/;"	n
despot	include/despot/util/util.h	/^namespace despot {$/;"	n
despot	src/core/belief.cpp	/^namespace despot {$/;"	n	file:
despot	src/core/globals.cpp	/^namespace despot {$/;"	n	file:
despot	src/core/lower_bound.cpp	/^namespace despot {$/;"	n	file:
despot	src/core/mdp.cpp	/^namespace despot {$/;"	n	file:
despot	src/core/node.cpp	/^namespace despot {$/;"	n	file:
despot	src/core/policy.cpp	/^namespace despot {$/;"	n	file:
despot	src/core/pomdp.cpp	/^namespace despot {$/;"	n	file:
despot	src/core/solver.cpp	/^namespace despot {$/;"	n	file:
despot	src/core/upper_bound.cpp	/^namespace despot {$/;"	n	file:
despot	src/evaluator.cpp	/^namespace despot {$/;"	n	file:
despot	src/ippc/client.cpp	/^namespace despot {$/;"	n	file:
despot	src/pomdpx/parser/function.cpp	/^namespace despot {$/;"	n	file:
despot	src/pomdpx/parser/parser.cpp	/^namespace despot {$/;"	n	file:
despot	src/pomdpx/parser/variable.cpp	/^namespace despot {$/;"	n	file:
despot	src/pomdpx/pomdpx.cpp	/^namespace despot {$/;"	n	file:
despot	src/random_streams.cpp	/^namespace despot {$/;"	n	file:
despot	src/simple_tui.cpp	/^namespace despot {$/;"	n	file:
despot	src/solver/aems.cpp	/^namespace despot {$/;"	n	file:
despot	src/solver/despot.cpp	/^namespace despot {$/;"	n	file:
despot	src/solver/pomcp.cpp	/^namespace despot {$/;"	n	file:
despot	src/test/util_test.cpp	/^namespace despot {$/;"	n	file:
despot	src/util/coord.cpp	/^namespace despot {$/;"	n	file:
despot	src/util/dirichlet.cpp	/^namespace despot {$/;"	n	file:
despot	src/util/exec_tracker.cpp	/^namespace despot {$/;"	n	file:
despot	src/util/floor.cpp	/^namespace despot {$/;"	n	file:
despot	src/util/gamma.cpp	/^namespace despot {$/;"	n	file:
despot	src/util/logging.cpp	/^namespace despot {$/;"	n	file:
despot	src/util/random.cpp	/^namespace despot {$/;"	n	file:
despot	src/util/seeds.cpp	/^namespace despot {$/;"	n	file:
despot	src/util/tinyxml/tinystr.cpp	/^namespace despot {$/;"	n	file:
despot	src/util/tinyxml/tinyxml.cpp	/^namespace despot {$/;"	n	file:
despot	src/util/tinyxml/tinyxmlerror.cpp	/^namespace despot {$/;"	n	file:
despot	src/util/tinyxml/tinyxmlparser.cpp	/^namespace despot {$/;"	n	file:
despot	src/util/util.cpp	/^namespace despot {$/;"	n	file:
disableBufferedIO	src/simple_tui.cpp	/^void disableBufferedIO(void) {$/;"	f	namespace:despot
discount	include/despot/config.h	/^	double discount;$/;"	m	struct:despot::Config
discounted_round_rewards_	include/despot/evaluator.h	/^	std::vector<double> discounted_round_rewards_;$/;"	m	class:despot::Evaluator
dist_	include/despot/util/floor.h	/^	std::vector<std::vector<double> > dist_;$/;"	m	class:despot::Floor
document	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlDocument* document; \/\/ A pointer back to a document, for error reporting.$/;"	m	class:despot::util::tinyxml::TiXmlAttribute
done	include/despot/util/timer.h	/^	bool done;$/;"	m	class:despot::Timer
edge	src/core/node.cpp	/^OBS_TYPE VNode::edge() {$/;"	f	class:despot::VNode
edge	src/core/node.cpp	/^int QNode::edge() {$/;"	f	class:despot::QNode
edge_	include/despot/core/node.h	/^	OBS_TYPE edge_;$/;"	m	class:despot::VNode
edge_	include/despot/core/node.h	/^	int edge_;$/;"	m	class:despot::QNode
empty	include/despot/util/tinyxml/tinystr.h	/^	bool empty() const {$/;"	f	class:despot::util::tinyxml::TiXmlString
enable_selfloop_cache_	include/despot/pomdpx/parser/parser.h	/^	bool enable_selfloop_cache_;$/;"	m	class:despot::Parser
encoding	include/despot/util/tinyxml/tinyxml.h	/^	TIXML_STRING version;TIXML_STRING encoding;TIXML_STRING standalone;$/;"	m	class:despot::util::tinyxml::TiXmlDeclaration
entity	include/despot/util/tinyxml/tinyxml.h	/^	static Entity entity[NUM_ENTITY];$/;"	m	class:despot::util::tinyxml::TiXmlBase
entity	src/util/tinyxml/tinyxmlparser.cpp	/^TiXmlBase::Entity TiXmlBase::entity[NUM_ENTITY] = { { "&amp;", 5, '&' }, {$/;"	m	class:despot::util::tinyxml::TiXmlBase	file:
erf	src/util/util.cpp	/^double erf(double x) {$/;"	f	namespace:despot
err	include/despot/util/optionparser.h	/^	bool err; \/\/!< @internal @brief see error()$/;"	m	class:despot::option::Parser
error	include/despot/util/optionparser.h	/^	bool error() {$/;"	f	class:despot::option::Parser
error	include/despot/util/tinyxml/tinyxml.h	/^	bool error;$/;"	m	class:despot::util::tinyxml::TiXmlDocument
errorDesc	include/despot/util/tinyxml/tinyxml.h	/^	int errorId;TIXML_STRING errorDesc;$/;"	m	class:despot::util::tinyxml::TiXmlDocument
errorId	include/despot/util/tinyxml/tinyxml.h	/^	int errorId;TIXML_STRING errorDesc;$/;"	m	class:despot::util::tinyxml::TiXmlDocument
errorLocation	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlCursor errorLocation;$/;"	m	class:despot::util::tinyxml::TiXmlDocument
errorString	include/despot/util/tinyxml/tinyxml.h	/^	static const char* errorString[TIXML_ERROR_STRING_COUNT];$/;"	m	class:despot::util::tinyxml::TiXmlBase
errorString	src/util/tinyxml/tinyxmlerror.cpp	/^const char * TiXmlBase::errorString[TIXML_ERROR_STRING_COUNT] =$/;"	m	class:despot::util::tinyxml::TiXmlBase	file:
exploration_constant	include/despot/solver/pomcp.h	/^	inline double exploration_constant() const {$/;"	f	class:despot::POMCPPrior
exploration_constant	include/despot/solver/pomcp.h	/^	inline void exploration_constant(double constant) {$/;"	f	class:despot::POMCPPrior
exploration_constant_	include/despot/solver/pomcp.h	/^	double exploration_constant_;$/;"	m	class:despot::POMCPPrior
explore_constant_	include/despot/core/lower_bound.h	/^	double explore_constant_;$/;"	m	class:despot::POMCPScenarioLowerBound
eyecontact	examples/cpp_models/localnavigation/src/localnavigation.h	/^	int eyecontact;$/;"	m	class:despot::NavigationState
eyecontact	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<int> eyecontact;$/;"	m	class:despot::NavigationState
fd	include/despot/util/optionparser.h	/^		int fd;$/;"	m	struct:despot::option::PrintUsageImplementation::SyscallWriter
file_name_	include/despot/pomdpx/parser/parser.h	/^  std::string file_name_;$/;"	m	class:despot::Parser
final_lb	include/despot/core/solver.h	/^	double initial_lb, initial_ub, final_lb, final_ub;$/;"	m	struct:despot::SearchStatistics
final_ub	include/despot/core/solver.h	/^	double initial_lb, initial_ub, final_lb, final_ub;$/;"	m	struct:despot::SearchStatistics
find	include/despot/util/tinyxml/tinystr.h	/^	size_type find(char lookup) const {$/;"	f	class:despot::util::tinyxml::TiXmlString
find	include/despot/util/tinyxml/tinystr.h	/^	size_type find(char tofind, size_type offset) const {$/;"	f	class:despot::util::tinyxml::TiXmlString
finish	include/despot/util/tinyxml/tinystr.h	/^	char* finish() const {$/;"	f	class:despot::util::tinyxml::TiXmlString
finished	include/despot/util/optionparser.h	/^	bool finished(int numargs, const char** args) {$/;"	f	class:despot::option::Parser::StoreOptionAction
finished	include/despot/util/optionparser.h	/^	virtual bool finished(int numargs, const char** args) {$/;"	f	struct:despot::option::Parser::Action
finished	include/despot/util/timer.h	/^	bool finished() {$/;"	f	class:despot::Timer
first	include/despot/util/optionparser.h	/^	Option* first() {$/;"	f	class:despot::option::Option
firstChild	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* firstChild;$/;"	m	class:despot::util::tinyxml::TiXmlNode
first_action_	examples/cpp_models/tag/src/base/base_tag.cpp	/^	int first_action_;$/;"	m	class:despot::TagHistoryModePolicy	file:
flag_bits_	examples/cpp_models/navigation/src/navigation.cpp	/^int Navigation::flag_bits_ = 3;$/;"	m	class:despot::Navigation	file:
flag_bits_	examples/cpp_models/navigation/src/navigation.h	/^	static int flag_bits_;$/;"	m	class:despot::Navigation
flag_size_	examples/cpp_models/navigation/src/navigation.cpp	/^int Navigation::flag_size_ = 8;$/;"	m	class:despot::Navigation	file:
flag_size_	examples/cpp_models/navigation/src/navigation.h	/^	static int flag_size_; \/\/ first 3 bits in state index: first_step_done, second_step_done, min-x$/;"	m	class:despot::Navigation
floor	examples/cpp_models/tag/src/base/base_tag.cpp	/^const Floor& BaseTag::floor() const {$/;"	f	class:despot::BaseTag
floor_	examples/cpp_models/tag/src/base/base_tag.cpp	/^	Floor floor_;$/;"	m	class:despot::TagHistoryModePolicy	file:
floor_	examples/cpp_models/tag/src/base/base_tag.cpp	/^	Floor floor_;$/;"	m	class:despot::TagSHRPolicy	file:
floor_	examples/cpp_models/tag/src/base/base_tag.h	/^	Floor floor_;$/;"	m	class:despot::BaseTag
floor_	include/despot/util/floor.h	/^	int** floor_;$/;"	m	class:despot::Floor
flush	include/despot/util/optionparser.h	/^		void flush(IStringWriter& write) {$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
food	examples/cpp_models/pocman/src/pocman.h	/^	std::vector<bool> food; \/\/ bit vector$/;"	m	class:despot::PocmanState
food_prob_	examples/cpp_models/pocman/src/pocman.h	/^	double food_prob_, chase_prob_, defensive_slip_;$/;"	m	class:despot::Pocman
freelist_	include/despot/util/memorypool.h	/^	std::vector<T*> freelist_;$/;"	m	class:despot::MemoryPool
fwrite	include/despot/util/optionparser.h	/^		Function* fwrite;$/;"	m	struct:despot::option::PrintUsageImplementation::StreamWriter
gausscdf	src/util/util.cpp	/^double gausscdf(double x, double mean, double sigma) {$/;"	f	namespace:despot
getStepReward	src/ippc/client.cpp	/^double Client::getStepReward(string mes) {$/;"	f	class:despot::Client
get_time_second	include/despot/util/util.h	/^inline double get_time_second() {$/;"	f	namespace:despot
ghost_dir	examples/cpp_models/pocman/src/pocman.h	/^	std::vector<int> ghost_dir;$/;"	m	class:despot::PocmanState
ghost_home_	examples/cpp_models/pocman/src/pocman.h	/^	Coord pocman_home_, ghost_home_;$/;"	m	class:despot::Pocman
ghost_pos	examples/cpp_models/pocman/src/pocman.h	/^	std::vector<Coord> ghost_pos;$/;"	m	class:despot::PocmanState
ghost_range_	examples/cpp_models/pocman/src/pocman.h	/^	int num_ghosts_, passage_y_, ghost_range_, smell_range_, hear_range_;$/;"	m	class:despot::Pocman
goal_pos	examples/cpp_models/localnavigation/src/localnavigation.h	/^	Coord goal_pos;$/;"	m	class:despot::NavigationState
goal_pos	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	Coord goal_pos;$/;"	m	class:despot::NavigationState
goal_pos_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	int goal_pos_, trap_pos_;$/;"	m	class:despot::Navigation
goal_pos_	examples/cpp_models/navigation/src/navigation.h	/^	int goal_pos_, trap_pos_;$/;"	m	class:despot::Navigation
goal_pos_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int goal_pos_, trap_pos_;$/;"	m	class:despot::Navigation
goal_prob_	examples/cpp_models/adventurer/src/adventurer.h	/^  std::vector<double> goal_prob_;$/;"	m	class:despot::Adventurer
goal_reward_	examples/cpp_models/adventurer/src/adventurer.h	/^	std::vector<double> goal_reward_;$/;"	m	class:despot::Adventurer
goal_reward_	examples/cpp_models/reg_demo/src/reg_demo.h	/^	double goal_reward_;$/;"	m	class:despot::RegDemo
grid_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const Grid<int>& grid_;$/;"	m	class:despot::RockSampleENTScenarioLowerBound	file:
grid_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const Grid<int>& grid_;$/;"	m	class:despot::RockSampleEastScenarioLowerBound	file:
grid_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const Grid<int>& grid_;$/;"	m	class:despot::RockSampleMMAPStateScenarioLowerBound	file:
grid_	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	Grid<int> grid_;$/;"	m	class:despot::BaseRockSample
grid_	include/despot/util/grid.h	/^  std::vector<T> grid_;$/;"	m	class:despot::Grid
half_efficiency_distance_	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	double half_efficiency_distance_;$/;"	m	class:despot::BaseRockSample
has_terminal_	include/despot/pomdpx/parser/parser.h	/^	bool has_terminal_;$/;"	m	class:despot::Parser
head	include/despot/util/optionparser.h	/^		int head; \/\/!< @brief index for next write$/;"	m	class:despot::option::PrintUsageImplementation::LineWrapper
hear_range_	examples/cpp_models/pocman/src/pocman.h	/^	int num_ghosts_, passage_y_, ghost_range_, smell_range_, hear_range_;$/;"	m	class:despot::Pocman
help	include/despot/util/optionparser.h	/^	const char* help;$/;"	m	struct:despot::option::Descriptor
helper	include/despot/util/timer.h	/^	static void* helper(void* context) {$/;"	f	class:despot::Timer
history	include/despot/solver/pomcp.h	/^	inline virtual const History& history() const {$/;"	f	class:despot::POMCPPrior
history	include/despot/solver/pomcp.h	/^	inline virtual void history(History h) {$/;"	f	class:despot::POMCPPrior
history_	include/despot/core/belief.h	/^	History history_;$/;"	m	class:despot::Belief
history_	include/despot/core/solver.h	/^	History history_;$/;"	m	class:despot::Solver
history_	include/despot/solver/pomcp.h	/^	History history_;$/;"	m	class:despot::POMCPPrior
hit_target_line	include/despot/util/optionparser.h	/^		bool hit_target_line; \/\/!< Flag whether we encountered a part with line index target_line_in_block in the current cell.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
host_info	include/despot/ippc/client.h	/^	struct addrinfo host_info; \/\/ The struct that getaddrinfo() fills up with data.^M$/;"	m	class:despot::Client	typeref:struct:despot::Client::addrinfo
host_info_list	include/despot/ippc/client.h	/^	struct addrinfo *host_info_list;$/;"	m	class:despot::Client	typeref:struct:despot::Client::addrinfo
hostname_	include/despot/evaluator.h	/^	std::string hostname_;$/;"	m	class:despot::IPPCEvaluator
indent	include/despot/util/optionparser.h	/^	static void indent(IStringWriter& write, int& x, int want_x) {$/;"	f	struct:despot::option::PrintUsageImplementation
indent	include/despot/util/tinyxml/tinyxml.h	/^	bool simpleTextPrint;TIXML_STRING buffer;TIXML_STRING indent;TIXML_STRING lineBreak;$/;"	m	class:despot::util::tinyxml::TiXmlPrinter
index	include/despot/util/optionparser.h	/^	const unsigned index;$/;"	m	struct:despot::option::Descriptor
index	include/despot/util/optionparser.h	/^	int index() const {$/;"	f	class:despot::option::Option
index_	include/despot/pomdpx/parser/variable.h	/^	std::map<std::string, int> index_;$/;"	m	class:despot::Variable
indexer_	include/despot/core/policy.h	/^	const StateIndexer& indexer_;$/;"	m	class:despot::ModeStatePolicy
indexer_	include/despot/core/upper_bound.h	/^	const StateIndexer& indexer_;$/;"	m	class:despot::LookaheadUpperBound
indexer_	include/despot/core/upper_bound.h	/^	const StateIndexer& indexer_;$/;"	m	class:despot::MDPUpperBound
inferencer_	include/despot/core/policy.h	/^	const MMAPInferencer& inferencer_;$/;"	m	class:despot::MMAPStatePolicy
init	include/despot/util/optionparser.h	/^	void init(const Descriptor* desc_, const char* name_, const char* arg_) {$/;"	f	class:despot::option::Option
init	include/despot/util/tinyxml/tinystr.h	/^	void init(size_type sz) {$/;"	f	class:despot::util::tinyxml::TiXmlString
init	include/despot/util/tinyxml/tinystr.h	/^	void init(size_type sz, size_type cap) {$/;"	f	class:despot::util::tinyxml::TiXmlString
initial_belief_funcs_	include/despot/pomdpx/parser/parser.h	/^  std::vector<TabularCPT> initial_belief_funcs_;$/;"	m	class:despot::Parser
initial_depth_	include/despot/core/policy.h	/^	mutable int initial_depth_;$/;"	m	class:despot::Policy
initial_lb	include/despot/core/solver.h	/^	double initial_lb, initial_ub, final_lb, final_ub;$/;"	m	struct:despot::SearchStatistics
initial_particles_	include/despot/core/belief.h	/^	std::vector<State*> initial_particles_;$/;"	m	class:despot::ParticleBelief
initial_ub	include/despot/core/solver.h	/^	double initial_lb, initial_ub, final_lb, final_ub;$/;"	m	struct:despot::SearchStatistics
initializeSocket	src/ippc/client.cpp	/^void Client::initializeSocket() {$/;"	f	class:despot::Client
instance_	include/despot/evaluator.h	/^	std::string instance_;$/;"	m	class:despot::IPPCEvaluator
instr	include/despot/util/optionparser.h	/^	static bool instr(char ch, const char* st) {$/;"	f	class:despot::option::Parser
isFirst	include/despot/util/optionparser.h	/^	bool isFirst() const {$/;"	f	class:despot::option::Option
isLast	include/despot/util/optionparser.h	/^	bool isLast() const {$/;"	f	class:despot::option::Option
isTagged	include/despot/util/optionparser.h	/^	static bool isTagged(Option* ptr) {$/;"	f	class:despot::option::Option
isWideChar	include/despot/util/optionparser.h	/^	static bool isWideChar(unsigned ch) {$/;"	f	struct:despot::option::PrintUsageImplementation
is_identity_	include/despot/pomdpx/parser/parser.h	/^	std::vector<std::vector<bool> > is_identity_; \/\/ is_identity_[s][a] = true iff transition_funcs_[s] is an identity for action a$/;"	m	class:despot::Parser
is_small_	include/despot/pomdpx/pomdpx.h	/^	bool is_small_;$/;"	m	class:despot::POMDPX
k_	include/despot/util/gamma.h	/^	double k_;$/;"	m	class:despot::Gamma
last	include/despot/util/optionparser.h	/^	Option* last() {$/;"	f	class:despot::option::Option
lastChild	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* lastChild;$/;"	m	class:despot::util::tinyxml::TiXmlNode
legal_	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	mutable vector<int> legal_;$/;"	m	class:despot::LocalnaviSmartPolicy	file:
legal_	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	mutable vector<int> legal_;$/;"	m	class:despot::LocalnaviSmartPolicy	file:
legal_	examples/cpp_models/pocman/src/pocman.cpp	/^	mutable vector<int> legal_;$/;"	m	class:despot::PocmanSmartPolicy	file:
legal_actions	src/solver/pomcp.cpp	/^const vector<int>& POMCPPrior::legal_actions() const {$/;"	f	class:despot::POMCPPrior
legal_actions_	include/despot/solver/pomcp.h	/^	std::vector<int> legal_actions_;$/;"	m	class:despot::POMCPPrior
len	include/despot/util/optionparser.h	/^		int len; \/\/!< Length of the current part (that ptr points at) in BYTES$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
lenbuf	include/despot/util/optionparser.h	/^		int lenbuf[bufmask + 1];$/;"	m	class:despot::option::PrintUsageImplementation::LineWrapper
length	include/despot/util/optionparser.h	/^		int length() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
length	include/despot/util/tinyxml/tinystr.h	/^	size_type length() const {$/;"	f	class:despot::util::tinyxml::TiXmlString
less	include/despot/core/history.h	/^struct less<despot::History> {$/;"	s	namespace:std
level	src/util/logging.cpp	/^int logging::level() {$/;"	f	class:despot::logging
level	src/util/logging.cpp	/^void logging::level(int verbosity) {$/;"	f	class:despot::logging
likelihood	include/despot/core/node.h	/^	double likelihood; \/\/ Used in AEMS$/;"	m	class:despot::VNode
likelihood	include/despot/core/node.h	/^	double likelihood;$/;"	m	class:despot::QNode
line	include/despot/util/optionparser.h	/^		int line() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
lineBreak	include/despot/util/tinyxml/tinyxml.h	/^	bool simpleTextPrint;TIXML_STRING buffer;TIXML_STRING indent;TIXML_STRING lineBreak;$/;"	m	class:despot::util::tinyxml::TiXmlPrinter
line_in_block	include/despot/util/optionparser.h	/^		int line_in_block; \/\/!< Line index within the current cell of the current part.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
localmap	examples/cpp_models/localnavigation/src/localnavigation.h	/^	Grid<int> localmap;$/;"	m	class:despot::Navigation
localmap	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	Grid<int> localmap;$/;"	m	class:despot::Navigation
location	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlCursor location;$/;"	m	class:despot::util::tinyxml::TiXmlBase
log_	include/despot/evaluator.h	/^	EvalLog log_;$/;"	m	class:despot::IPPCEvaluator
log_buf	include/despot/util/logging.h	/^	class log_buf: public std::stringbuf {$/;"	c	class:despot::log_ostream
log_buf	src/util/logging.cpp	/^log_ostream::log_buf::log_buf(ostream& out, string marker) :$/;"	f	class:despot::log_ostream::log_buf
log_file_	include/despot/evaluator.h	/^	std::string log_file_;$/;"	m	class:despot::EvalLog
log_ostream	include/despot/util/logging.h	/^class log_ostream: public std::ostream {$/;"	c	namespace:despot
log_ostream	src/util/logging.cpp	/^log_ostream::log_ostream(ostream& out, string marker) :$/;"	f	class:despot::log_ostream
logd	include/despot/util/logging.h	60;"	d
loge	include/despot/util/logging.h	57;"	d
logging	include/despot/util/logging.h	/^class logging {$/;"	c	namespace:despot
logi	include/despot/util/logging.h	59;"	d
logv	include/despot/util/logging.h	61;"	d
logw	include/despot/util/logging.h	58;"	d
longest_trial_length	include/despot/core/solver.h	/^	int longest_trial_length;$/;"	m	struct:despot::SearchStatistics
longopt	include/despot/util/optionparser.h	/^	const char* const longopt;$/;"	m	struct:despot::option::Descriptor
lower	include/despot/util/util.h	/^inline std::string lower(std::string str) {$/;"	f	namespace:despot
lower_bound	src/core/node.cpp	/^double QNode::lower_bound() const {$/;"	f	class:despot::QNode
lower_bound	src/core/node.cpp	/^double VNode::lower_bound() const {$/;"	f	class:despot::VNode
lower_bound	src/core/node.cpp	/^void QNode::lower_bound(double value) {$/;"	f	class:despot::QNode
lower_bound	src/core/node.cpp	/^void VNode::lower_bound(double value) {$/;"	f	class:despot::VNode
lower_bound	src/solver/despot.cpp	/^ScenarioLowerBound* DESPOT::lower_bound() const {$/;"	f	class:despot::DESPOT
lower_bound_	include/despot/core/node.h	/^	double lower_bound_;$/;"	m	class:despot::QNode
lower_bound_	include/despot/core/node.h	/^	double lower_bound_;$/;"	m	class:despot::VNode
lower_bound_	include/despot/solver/aems.h	/^	BeliefLowerBound* lower_bound_;$/;"	m	class:despot::AEMS
lower_bound_	include/despot/solver/despot.h	/^	ScenarioLowerBound* lower_bound_;$/;"	m	class:despot::DESPOT
m_Beliefout	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::ofstream m_Beliefout;$/;"	m	class:despot::Navigation
m_Round_num	include/despot/core/pomdp.h	/^	int m_Round_num;$/;"	m	class:despot::DSPOMDP
m_fileout	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::ofstream m_fileout;$/;"	m	class:despot::Navigation
m_last_action	include/despot/core/pomdp.h	/^	int m_last_action;$/;"	m	class:despot::DSPOMDP
m_xsize	examples/cpp_models/localnavigation/src/localnavigation.h	/^	int m_xsize, m_ysize;$/;"	m	class:despot::Navigation
m_xsize	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int m_xsize, m_ysize;$/;"	m	class:despot::Navigation
m_ysize	examples/cpp_models/localnavigation/src/localnavigation.h	/^	int m_xsize, m_ysize;$/;"	m	class:despot::Navigation
m_ysize	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int m_xsize, m_ysize;$/;"	m	class:despot::Navigation
main	examples/cpp_models/adventurer/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cpp_models/bridge/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cpp_models/chain/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cpp_models/localnavigation/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cpp_models/navigation/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cpp_models/pathfollowing/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cpp_models/pocman/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cpp_models/reg_demo/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cpp_models/rock_sample/src/fvrs/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cpp_models/rock_sample/src/rock_sample/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cpp_models/simpleNavi/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cpp_models/simple_rock_sample/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cpp_models/tag/src/laser_tag/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cpp_models/tag/src/noisy_laser_tag/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cpp_models/tag/src/tag/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/cpp_models/tiger/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	examples/pomdpx_models/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
map_	include/despot/pomdpx/parser/function.h	/^  std::vector<std::map<int, double> > map_; \/\/ map_[parents][child]$/;"	m	class:despot::Function
marker_	include/despot/util/logging.h	/^		std::string marker_;$/;"	m	class:despot::log_ostream::log_buf
markers_	include/despot/util/logging.h	/^	static const std::string markers_[];$/;"	m	class:despot::logging
markers_	src/util/logging.cpp	/^const string logging::markers_[] = { "NONE", "ERROR", "WARN", "INFO", "DEBUG",$/;"	m	class:despot::logging	file:
max_goal_reward_	examples/cpp_models/adventurer/src/adventurer.h	/^	double max_goal_reward_;$/;"	m	class:despot::Adventurer
max_iter_	src/pomdpx/pomdpx.cpp	/^	int max_iter_;$/;"	m	class:despot::POMDPXBelief	file:
max_line_in_block	include/despot/util/optionparser.h	/^		int max_line_in_block; \/\/!< Greatest index of a line within the block. This is the number of \\\\v within the cell with the most \\\\vs.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
max_policy_sim_len	include/despot/config.h	/^	int max_policy_sim_len; \/\/ Maximum number of steps for simulating the default policy$/;"	m	struct:despot::Config
max_reward_action_	include/despot/pomdpx/pomdpx.h	/^	ValuedAction max_reward_action_;$/;"	m	class:despot::POMDPX
maze_	examples/cpp_models/pocman/src/pocman.h	/^	Grid<int> maze_;$/;"	m	class:despot::Pocman
mdp_policy_	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	mutable std::vector<ValuedAction> mdp_policy_;$/;"	m	class:despot::BaseRockSample
mdp_policy_	examples/cpp_models/simpleNavi/src/simpleNavi.h	/^	mutable std::vector<ValuedAction> mdp_policy_;$/;"	m	class:despot::SimpleNavi
mdp_policy_	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^	mutable std::vector<ValuedAction> mdp_policy_;$/;"	m	class:despot::SimpleRockSample
mdp_state	examples/cpp_models/chain/src/chain.h	/^	int mdp_state;$/;"	m	class:despot::ChainState
mdp_transitions_	examples/cpp_models/chain/src/chain.h	/^  std::vector<std::vector<std::vector<double> > > mdp_transitions_; \/\/mdp_transitions_[s1][a][s2] = P(s2|s1,a)$/;"	m	class:despot::ChainState
memory_pool_	examples/cpp_models/adventurer/src/adventurer.h	/^	mutable MemoryPool<AdventurerState> memory_pool_;$/;"	m	class:despot::Adventurer
memory_pool_	examples/cpp_models/bridge/src/bridge.h	/^	mutable MemoryPool<BridgeState> memory_pool_;$/;"	m	class:despot::Bridge
memory_pool_	examples/cpp_models/chain/src/chain.h	/^	mutable MemoryPool<ChainState> memory_pool_;$/;"	m	class:despot::Chain
memory_pool_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	mutable MemoryPool<NavigationState> memory_pool_;$/;"	m	class:despot::Navigation
memory_pool_	examples/cpp_models/navigation/src/navigation.h	/^	mutable MemoryPool<NavigationState> memory_pool_;$/;"	m	class:despot::Navigation
memory_pool_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	mutable MemoryPool<NavigationState> memory_pool_;$/;"	m	class:despot::Navigation
memory_pool_	examples/cpp_models/pocman/src/pocman.h	/^	mutable MemoryPool<PocmanState> memory_pool_;$/;"	m	class:despot::Pocman
memory_pool_	examples/cpp_models/reg_demo/src/reg_demo.h	/^	mutable MemoryPool<RegDemoState> memory_pool_;$/;"	m	class:despot::RegDemo
memory_pool_	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	mutable MemoryPool<RockSampleState> memory_pool_;$/;"	m	class:despot::BaseRockSample
memory_pool_	examples/cpp_models/simpleNavi/src/simpleNavi.h	/^	mutable MemoryPool<SimpleState> memory_pool_;$/;"	m	class:despot::SimpleNavi
memory_pool_	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^	mutable MemoryPool<SimpleState> memory_pool_;$/;"	m	class:despot::SimpleRockSample
memory_pool_	examples/cpp_models/tag/src/base/base_tag.h	/^	mutable MemoryPool<TagState> memory_pool_;$/;"	m	class:despot::BaseTag
memory_pool_	examples/cpp_models/tiger/src/tiger.h	/^	mutable MemoryPool<TigerState> memory_pool_;$/;"	m	class:despot::Tiger
memory_pool_	include/despot/pomdpx/pomdpx.h	/^	mutable MemoryPool<POMDPXState> memory_pool_;$/;"	m	class:despot::POMDPX
millis	include/despot/util/timer.h	/^	int millis;$/;"	m	class:despot::Timer
min_reward_action_	include/despot/pomdpx/pomdpx.h	/^	ValuedAction min_reward_action_;$/;"	m	class:despot::POMDPX
model	include/despot/evaluator.h	/^	inline DSPOMDP* model() {$/;"	f	class:despot::Evaluator
model	include/despot/evaluator.h	/^	inline void model(DSPOMDP* m) {$/;"	f	class:despot::Evaluator
model_	include/despot/core/belief.h	/^	const DSPOMDP* model_;$/;"	m	class:despot::Belief
model_	include/despot/core/solver.h	/^	const DSPOMDP* model_;$/;"	m	class:despot::Solver
model_	include/despot/core/upper_bound.h	/^	const DSPOMDP* model_;$/;"	m	class:despot::LookaheadUpperBound
model_	include/despot/core/upper_bound.h	/^	const DSPOMDP* model_;$/;"	m	class:despot::TrivialBeliefUpperBound
model_	include/despot/core/upper_bound.h	/^	const DSPOMDP* model_;$/;"	m	class:despot::TrivialParticleUpperBound
model_	include/despot/core/upper_bound.h	/^	const MDP* model_;$/;"	m	class:despot::MDPUpperBound
model_	include/despot/evaluator.h	/^	DSPOMDP* model_;$/;"	m	class:despot::Evaluator
model_	include/despot/solver/aems.h	/^	const BeliefMDP* model_;$/;"	m	class:despot::AEMS
model_	include/despot/solver/pomcp.h	/^	const DSPOMDP* model_;$/;"	m	class:despot::POMCPPrior
model_	src/pomdpx/pomdpx.cpp	/^	const POMDPX* model_;$/;"	m	class:despot::POMDPXBelief	file:
name	include/despot/pomdpx/parser/variable.h	/^	inline const std::string& name() const {$/;"	f	class:despot::NamedVar
name	include/despot/pomdpx/parser/variable.h	/^	inline void name(std::string str) {$/;"	f	class:despot::NamedVar
name	include/despot/util/optionparser.h	/^	const char* name;$/;"	m	class:despot::option::Option
name	include/despot/util/tinyxml/tinyxml.h	/^	TIXML_STRING name;TIXML_STRING value;$/;"	m	class:despot::util::tinyxml::TiXmlAttribute
name_	include/despot/pomdpx/parser/variable.h	/^	std::string name_;$/;"	m	class:despot::NamedVar
namelen	include/despot/util/optionparser.h	/^	int namelen;$/;"	m	class:despot::option::Option
navigation_	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^		const Navigation* navigation_;$/;"	m	class:despot::LocalApproxScenarioUpperBound	file:
navigation_	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	const Navigation* navigation_;$/;"	m	class:despot::LocalLegalParticleLowerBound	file:
navigation_	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	const Navigation* navigation_;$/;"	m	class:despot::LocalNaviPOMCPPrior	file:
navigation_	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	const Navigation* navigation_;$/;"	m	class:despot::LocalnaviSmartPolicy	file:
navigation_	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	const Navigation* navigation_;$/;"	m	class:despot::LocalnavigationParticleUpperBound	file:
navigation_	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^		const Navigation* navigation_;$/;"	m	class:despot::LocalApproxScenarioUpperBound	file:
navigation_	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	const Navigation* navigation_;$/;"	m	class:despot::LocalLegalParticleLowerBound	file:
navigation_	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	const Navigation* navigation_;$/;"	m	class:despot::LocalNaviPOMCPPrior	file:
navigation_	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	const Navigation* navigation_;$/;"	m	class:despot::LocalnaviSmartPolicy	file:
navigation_	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	const Navigation* navigation_;$/;"	m	class:despot::LocalnavigationParticleUpperBound	file:
next	include/despot/util/optionparser.h	/^		bool next() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
next	include/despot/util/optionparser.h	/^	Option* next() {$/;"	f	class:despot::option::Option
next	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* next;$/;"	m	class:despot::util::tinyxml::TiXmlAttribute
next	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* next;$/;"	m	class:despot::util::tinyxml::TiXmlNode
nextRow	include/despot/util/optionparser.h	/^		bool nextRow() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
nextTable	include/despot/util/optionparser.h	/^		bool nextTable() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
next_	include/despot/util/optionparser.h	/^	Option* next_;$/;"	m	class:despot::option::Option
nextwrap	include/despot/util/optionparser.h	/^	Option* nextwrap() {$/;"	f	class:despot::option::Option
node	examples/cpp_models/localnavigation/src/localnavigation.h	/^	ros::NodeHandle node;$/;"	m	class:despot::Navigation
node	examples/cpp_models/navigation/src/navigation.h	/^	ros::NodeHandle node;$/;"	m	class:despot::Navigation
node	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	ros::NodeHandle node;$/;"	m	class:despot::Navigation
node	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* node;$/;"	m	class:despot::util::tinyxml::TiXmlHandle
noise	include/despot/config.h	/^	double noise;$/;"	m	struct:despot::Config
noise_sigma_	examples/cpp_models/tag/src/laser_tag/laser_tag.h	/^	double noise_sigma_;$/;"	m	class:despot::LaserTag
noise_sigma_	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.h	/^	double noise_sigma_;$/;"	m	class:despot::NoisyLaserTag
noisy_transition_funcs_	include/despot/pomdpx/parser/parser.h	/^  std::vector<CPT*> noisy_transition_funcs_;$/;"	m	class:despot::Parser
nonOption	include/despot/util/optionparser.h	/^	const char* nonOption(int i) {$/;"	f	class:despot::option::Parser
nonOptions	include/despot/util/optionparser.h	/^	const char** nonOptions() {$/;"	f	class:despot::option::Parser
nonOptionsCount	include/despot/util/optionparser.h	/^	int nonOptionsCount() {$/;"	f	class:despot::option::Parser
nonop_args	include/despot/util/optionparser.h	/^	const char** nonop_args; \/\/!< @internal @brief see nonOptions()$/;"	m	class:despot::option::Parser
nonop_count	include/despot/util/optionparser.h	/^	int nonop_count; \/\/!< @internal @brief see nonOptionsCount()$/;"	m	class:despot::option::Parser
npos	include/despot/util/tinyxml/tinystr.h	/^	static const size_type npos; \/\/ = -1;$/;"	m	class:despot::util::tinyxml::TiXmlString
npos	src/util/tinyxml/tinystr.cpp	/^const TiXmlString::size_type TiXmlString::npos =$/;"	m	class:despot::util::tinyxml::TiXmlString	file:
nullrep_	include/despot/util/tinyxml/tinystr.h	/^	static Rep nullrep_;$/;"	m	class:despot::util::tinyxml::TiXmlString
nullrep_	src/util/tinyxml/tinystr.cpp	/^TiXmlString::Rep TiXmlString::nullrep_ = { 0, 0, { '\\0' } };$/;"	m	class:despot::util::tinyxml::TiXmlString	file:
num_allocated	include/despot/util/memorypool.h	/^	int num_allocated() const {$/;"	f	class:despot::MemoryPool
num_allocated_	include/despot/util/memorypool.h	/^	int num_allocated_;$/;"	m	class:despot::MemoryPool
num_assigned_seeds_	include/despot/util/seeds.h	/^	static int num_assigned_seeds_;$/;"	m	class:despot::Seeds
num_assigned_seeds_	src/util/seeds.cpp	/^int Seeds::num_assigned_seeds_ = 0;$/;"	m	class:despot::Seeds	file:
num_cols	src/util/floor.cpp	/^int Floor::num_cols() const {$/;"	f	class:despot::Floor
num_cols_	include/despot/util/floor.h	/^	int num_rows_, num_cols_;$/;"	m	class:despot::Floor
num_expanded_nodes	include/despot/core/solver.h	/^	int num_expanded_nodes;$/;"	m	struct:despot::SearchStatistics
num_food	examples/cpp_models/pocman/src/pocman.h	/^	int num_food;$/;"	m	class:despot::PocmanState
num_ghosts_	examples/cpp_models/pocman/src/pocman.h	/^	int num_ghosts_, passage_y_, ghost_range_, smell_range_, hear_range_;$/;"	m	class:despot::Pocman
num_goals_	examples/cpp_models/adventurer/src/adventurer.h	/^	int num_goals_;$/;"	m	class:despot::Adventurer
num_of_completed_runs	include/despot/evaluator.h	/^	std::vector<int> num_of_completed_runs;$/;"	m	class:despot::EvalLog
num_particles	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^int NavigationBelief::num_particles = 5000;$/;"	m	class:despot::NavigationBelief	file:
num_particles	examples/cpp_models/localnavigation/src/localnavigation.h	/^	static int num_particles;$/;"	m	class:despot::NavigationBelief
num_particles	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^int NavigationBelief::num_particles = 5000;$/;"	m	class:despot::NavigationBelief	file:
num_particles	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	static int num_particles;$/;"	m	class:despot::NavigationBelief
num_particles	examples/cpp_models/pocman/src/pocman.cpp	/^int PocmanBelief::num_particles = 50000;$/;"	m	class:despot::PocmanBelief	file:
num_particles	examples/cpp_models/pocman/src/pocman.h	/^	static int num_particles;$/;"	m	class:despot::PocmanBelief
num_particles_	include/despot/core/belief.h	/^	int num_particles_;$/;"	m	class:despot::ParticleBelief
num_particles_after_search	include/despot/core/solver.h	/^	int num_particles_after_search;$/;"	m	struct:despot::SearchStatistics
num_particles_before_search	include/despot/core/solver.h	/^	int num_particles_before_search;$/;"	m	struct:despot::SearchStatistics
num_peds_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	int num_peds_, passage_y_, pedes_range_;$/;"	m	class:despot::Navigation
num_peds_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int num_peds_, passage_y_, pedes_range_;$/;"	m	class:despot::Navigation
num_policy_nodes	include/despot/core/solver.h	/^	int num_policy_nodes;$/;"	m	struct:despot::SearchStatistics
num_rocks_	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	int size_, num_rocks_;$/;"	m	class:despot::BaseRockSample
num_rows	src/util/floor.cpp	/^int Floor::num_rows() const {$/;"	f	class:despot::Floor
num_rows_	include/despot/util/floor.h	/^	int num_rows_, num_cols_;$/;"	m	class:despot::Floor
num_scenarios	include/despot/config.h	/^	int num_scenarios;$/;"	m	struct:despot::Config
num_tree_nodes	include/despot/core/solver.h	/^	int num_tree_nodes;$/;"	m	struct:despot::SearchStatistics
num_tree_particles	include/despot/core/solver.h	/^	int num_tree_particles;$/;"	m	struct:despot::SearchStatistics
num_trials	include/despot/core/solver.h	/^	int num_trials;$/;"	m	struct:despot::SearchStatistics
obs_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<OBS_TYPE> obs_;		 \/\/ obs_[y * xsize_ + x]$/;"	m	class:despot::Navigation
obs_	examples/cpp_models/navigation/src/navigation.h	/^	std::vector<OBS_TYPE> obs_; \/\/ obs_[y * xsize_ + x]$/;"	m	class:despot::Navigation
obs_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<OBS_TYPE> obs_;		 \/\/ obs_[y * xsize_ + x]$/;"	m	class:despot::Navigation
obs_	examples/cpp_models/reg_demo/src/reg_demo.h	/^	std::vector<OBS_TYPE> obs_;$/;"	m	class:despot::RegDemo
obs_	examples/cpp_models/tag/src/tag/tag.h	/^  std::vector<OBS_TYPE> obs_;$/;"	m	class:despot::Tag
obs_funcs_	include/despot/pomdpx/parser/parser.h	/^	std::vector<CPT*> obs_funcs_;$/;"	m	class:despot::Parser
obs_noise_	examples/cpp_models/adventurer/src/adventurer.h	/^	double obs_noise_;$/;"	m	class:despot::Adventurer
obs_vars_	include/despot/pomdpx/parser/parser.h	/^	mutable std::vector<ObsVar> obs_vars_;$/;"	m	class:despot::Parser
observations_	include/despot/core/history.h	/^	std::vector<OBS_TYPE> observations_;$/;"	m	class:despot::History
observed	include/despot/pomdpx/parser/variable.h	/^	inline const bool observed() const {$/;"	f	class:despot::StateVar
observed	include/despot/pomdpx/parser/variable.h	/^	inline void observed(bool o) {$/;"	f	class:despot::StateVar
observed_	include/despot/pomdpx/parser/variable.h	/^	bool observed_;$/;"	m	class:despot::StateVar
op_count	include/despot/util/optionparser.h	/^	int op_count; \/\/!< @internal @brief see optionsCount()$/;"	m	class:despot::option::Parser
operator !=	include/despot/util/tinyxml/tinystr.h	/^inline bool operator !=(const TiXmlString & a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator !=	include/despot/util/tinyxml/tinystr.h	/^inline bool operator !=(const TiXmlString & a, const char* b) {$/;"	f	namespace:despot::util::tinyxml
operator !=	include/despot/util/tinyxml/tinystr.h	/^inline bool operator !=(const char* a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator !=	src/util/coord.cpp	/^bool operator!=(const Coord& first, const Coord& second) {$/;"	f	namespace:despot
operator ()	include/despot/core/history.h	/^	bool operator()(const despot::History& h1, const despot::History& h2) const {$/;"	f	struct:std::less
operator ()	include/despot/core/pomdp.h	/^	State* operator()(int state_id, double weight) {$/;"	f	class:despot::State
operator ()	include/despot/util/grid.h	/^	T& operator()(const Coord& coord) {$/;"	f	class:despot::Grid
operator ()	include/despot/util/grid.h	/^	T& operator()(int index) {$/;"	f	class:despot::Grid
operator ()	include/despot/util/grid.h	/^	T& operator()(int x, int y) {$/;"	f	class:despot::Grid
operator ()	include/despot/util/grid.h	/^	const T& operator()(const Coord& coord) const {$/;"	f	class:despot::Grid
operator ()	include/despot/util/grid.h	/^	const T& operator()(int index) const {$/;"	f	class:despot::Grid
operator ()	include/despot/util/grid.h	/^	const T& operator()(int x, int y) const {$/;"	f	class:despot::Grid
operator ()	include/despot/util/optionparser.h	/^		virtual void operator()(const char* str, int size) {$/;"	f	struct:despot::option::PrintUsageImplementation::FunctionWriter
operator ()	include/despot/util/optionparser.h	/^		virtual void operator()(const char* str, int size) {$/;"	f	struct:despot::option::PrintUsageImplementation::OStreamWriter
operator ()	include/despot/util/optionparser.h	/^		virtual void operator()(const char* str, int size) {$/;"	f	struct:despot::option::PrintUsageImplementation::StreamWriter
operator ()	include/despot/util/optionparser.h	/^		virtual void operator()(const char* str, int size) {$/;"	f	struct:despot::option::PrintUsageImplementation::SyscallWriter
operator ()	include/despot/util/optionparser.h	/^		virtual void operator()(const char* str, int size) {$/;"	f	struct:despot::option::PrintUsageImplementation::TemporaryWriter
operator ()	include/despot/util/optionparser.h	/^		virtual void operator()(const char*, int) {$/;"	f	struct:despot::option::PrintUsageImplementation::IStringWriter
operator *	src/util/coord.cpp	/^Coord Coord::operator*(int v) const {$/;"	f	class:despot::Coord
operator +	src/util/coord.cpp	/^const Coord operator+(const Coord& first, const Coord& second) {$/;"	f	namespace:despot
operator +	src/util/tinyxml/tinystr.cpp	/^TiXmlString operator +(const TiXmlString & a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator +	src/util/tinyxml/tinystr.cpp	/^TiXmlString operator +(const TiXmlString & a, const char* b) {$/;"	f	namespace:despot::util::tinyxml
operator +	src/util/tinyxml/tinystr.cpp	/^TiXmlString operator +(const char* a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator +=	include/despot/util/tinyxml/tinystr.h	/^	TiXmlString& operator +=(char single) {$/;"	f	class:despot::util::tinyxml::TiXmlString
operator +=	include/despot/util/tinyxml/tinystr.h	/^	TiXmlString& operator +=(const TiXmlString & suffix) {$/;"	f	class:despot::util::tinyxml::TiXmlString
operator +=	include/despot/util/tinyxml/tinystr.h	/^	TiXmlString& operator +=(const char * suffix) {$/;"	f	class:despot::util::tinyxml::TiXmlString
operator +=	src/util/coord.cpp	/^Coord& operator+=(Coord& left, const Coord& right) {$/;"	f	namespace:despot
operator <	include/despot/util/tinyxml/tinystr.h	/^inline bool operator <(const TiXmlString & a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator <	include/despot/util/tinyxml/tinyxml.h	/^	bool operator<(const TiXmlAttribute& rhs) const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
operator <	include/despot/util/util.h	/^bool operator<(const std::vector<T>& first, const std::vector<T>& second) {$/;"	f	namespace:despot
operator <<	examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^ostream& operator<<(ostream& os, const LaserTag& lasertag) {$/;"	f	namespace:despot
operator <<	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^ostream& operator<<(ostream& os, const NoisyLaserTag& lasertag) {$/;"	f	namespace:despot
operator <<	include/despot/core/history.h	/^	friend std::ostream& operator<<(std::ostream& os, const History& history) {$/;"	f	class:despot::History
operator <<	include/despot/util/tinyxml/tinystr.h	/^	TiXmlOutStream & operator <<(const TiXmlString & in) {$/;"	f	class:despot::util::tinyxml::TiXmlOutStream
operator <<	include/despot/util/tinyxml/tinystr.h	/^	TiXmlOutStream & operator <<(const char * in) {$/;"	f	class:despot::util::tinyxml::TiXmlOutStream
operator <<	include/despot/util/util.h	/^std::ostream& operator<<(std::ostream& os, std::pair<K, V> p) {$/;"	f	namespace:despot
operator <<	include/despot/util/util.h	/^std::ostream& operator<<(std::ostream& os, std::vector<T> vec) {$/;"	f	namespace:despot
operator <<	src/core/belief.cpp	/^ostream& operator<<(ostream& os, const Belief& belief) {$/;"	f	namespace:despot
operator <<	src/core/lower_bound.cpp	/^ostream& operator<<(ostream& os, const ValuedAction& va) {$/;"	f	namespace:despot
operator <<	src/core/pomdp.cpp	/^ostream& operator<<(ostream& os, const State& state) {$/;"	f	namespace:despot
operator <<	src/core/solver.cpp	/^ostream& operator<<(ostream& os, const SearchStatistics& statistics) {$/;"	f	namespace:despot
operator <<	src/pomdpx/parser/function.cpp	/^ostream& operator<<(ostream& os, const Function& func) {$/;"	f	namespace:despot
operator <<	src/pomdpx/parser/function.cpp	/^ostream& operator<<(std::ostream& os, const HierarchyCPT& hcpt) {$/;"	f	namespace:despot
operator <<	src/pomdpx/parser/parser.cpp	/^ostream& operator<<(ostream& out, const Parser& parser) {$/;"	f	namespace:despot
operator <<	src/pomdpx/parser/variable.cpp	/^ostream& operator<<(ostream& os, const StateVar& var) {$/;"	f	namespace:despot
operator <<	src/pomdpx/parser/variable.cpp	/^ostream& operator<<(ostream& os, const Variable& var) {$/;"	f	namespace:despot
operator <<	src/pomdpx/parser/variable.cpp	/^ostream& operator<<(std::ostream& os, const NamedVar& var) {$/;"	f	namespace:despot
operator <<	src/random_streams.cpp	/^ostream& operator<<(ostream& os, const RandomStreams& stream) {$/;"	f	namespace:despot
operator <<	src/util/coord.cpp	/^ostream& operator<<(ostream& os, const Coord& coord) {$/;"	f	namespace:despot
operator <<	src/util/tinyxml/tinyxml.cpp	/^std::ostream& operator<< (std::ostream & out, const TiXmlNode & base)$/;"	f	namespace:despot::util::tinyxml
operator <<	src/util/tinyxml/tinyxml.cpp	/^std::string& operator<< (std::string& out, const TiXmlNode& base )$/;"	f	namespace:despot::util::tinyxml
operator <=	include/despot/util/tinyxml/tinystr.h	/^inline bool operator <=(const TiXmlString & a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator =	include/despot/util/optionparser.h	/^	void operator=(const Option& orig) {$/;"	f	class:despot::option::Option
operator =	include/despot/util/tinyxml/tinystr.h	/^	TiXmlString& operator =(const TiXmlString & copy) {$/;"	f	class:despot::util::tinyxml::TiXmlString
operator =	include/despot/util/tinyxml/tinystr.h	/^	TiXmlString& operator =(const char * copy) {$/;"	f	class:despot::util::tinyxml::TiXmlString
operator =	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlHandle operator=(const TiXmlHandle& ref) {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
operator =	include/despot/util/tinyxml/tinyxml.h	/^	void operator=(const TiXmlText& base) {$/;"	f	class:despot::util::tinyxml::TiXmlText
operator =	include/despot/util/tinyxml/tinyxml.h	/^	void operator=(const TiXmlUnknown& copy) {$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
operator =	src/pomdpx/parser/parser.cpp	/^Parser& Parser::operator=(const Parser& parser) {$/;"	f	class:despot::Parser
operator =	src/util/tinyxml/tinyxml.cpp	/^void TiXmlComment::operator=(const TiXmlComment& base) {$/;"	f	class:despot::util::tinyxml::TiXmlComment
operator =	src/util/tinyxml/tinyxml.cpp	/^void TiXmlDeclaration::operator=(const TiXmlDeclaration& copy) {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
operator =	src/util/tinyxml/tinyxml.cpp	/^void TiXmlDocument::operator=(const TiXmlDocument& copy) {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
operator =	src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::operator=(const TiXmlElement& base) {$/;"	f	class:despot::util::tinyxml::TiXmlElement
operator ==	include/despot/util/tinyxml/tinystr.h	/^inline bool operator ==(const TiXmlString & a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator ==	include/despot/util/tinyxml/tinystr.h	/^inline bool operator ==(const TiXmlString & a, const char* b) {$/;"	f	namespace:despot::util::tinyxml
operator ==	include/despot/util/tinyxml/tinystr.h	/^inline bool operator ==(const char* a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator ==	include/despot/util/tinyxml/tinyxml.h	/^	bool operator==(const TiXmlAttribute& rhs) const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
operator ==	src/util/coord.cpp	/^bool operator==(const Coord& first, const Coord& second) {$/;"	f	namespace:despot
operator >	include/despot/util/tinyxml/tinystr.h	/^inline bool operator>(const TiXmlString & a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator >	include/despot/util/tinyxml/tinyxml.h	/^	bool operator>(const TiXmlAttribute& rhs) const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
operator >	src/util/tinyxml/tinyxml.cpp	/^std::istream& operator> > (std::istream & in, TiXmlNode & base)$/;"	f	namespace:despot::util::tinyxml
operator >=	include/despot/util/tinyxml/tinystr.h	/^inline bool operator >=(const TiXmlString & a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator Option*	include/despot/util/optionparser.h	/^	operator Option*() {$/;"	f	class:despot::option::Option
operator []	include/despot/util/tinyxml/tinystr.h	/^	char& operator [](size_type index) const {$/;"	f	class:despot::util::tinyxml::TiXmlString
operator const Option*	include/despot/util/optionparser.h	/^	operator const Option*() const {$/;"	f	class:despot::option::Option
opp_	examples/cpp_models/tag/src/base/base_tag.h	/^	std::vector<int> opp_; \/\/ opp_[s]: opponent cell index for state s$/;"	m	class:despot::BaseTag
option	include/despot/util/optionparser.h	/^namespace option {$/;"	n	namespace:despot
options	include/despot/util/optionparser.h	/^	Option* options;$/;"	m	class:despot::option::Parser::StoreOptionAction
optionsCount	include/despot/util/optionparser.h	/^	int optionsCount() {$/;"	f	class:despot::option::Parser
options_max	include/despot/util/optionparser.h	/^	unsigned options_max;$/;"	m	struct:despot::option::Stats
ostream	include/despot/util/optionparser.h	/^		OStream& ostream;$/;"	m	struct:despot::option::PrintUsageImplementation::OStreamWriter
out	include/despot/evaluator.h	/^	inline void out(std::ostream* o) {$/;"	f	class:despot::Evaluator
out_	include/despot/evaluator.h	/^	std::ostream* out_;$/;"	m	class:despot::Evaluator
out_	include/despot/util/logging.h	/^    std::ostream& out_;$/;"	m	class:despot::log_ostream::log_buf
output	include/despot/util/optionparser.h	/^		void output(IStringWriter& write, const char* data, int len) {$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
parent	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* parent;$/;"	m	class:despot::util::tinyxml::TiXmlNode
parent	src/core/node.cpp	/^QNode* VNode::parent() {$/;"	f	class:despot::VNode
parent	src/core/node.cpp	/^VNode* QNode::parent() {$/;"	f	class:despot::QNode
parent	src/core/node.cpp	/^void QNode::parent(VNode* parent) {$/;"	f	class:despot::QNode
parent	src/core/node.cpp	/^void VNode::parent(QNode* parent) {$/;"	f	class:despot::VNode
parent_	include/despot/core/node.h	/^	QNode* parent_;$/;"	m	class:despot::VNode
parent_	include/despot/core/node.h	/^	VNode* parent_;$/;"	m	class:despot::QNode
parents	src/pomdpx/parser/function.cpp	/^const vector<NamedVar*>& Function::parents() const {$/;"	f	class:despot::Function
parents_	include/despot/pomdpx/parser/function.h	/^  std::vector<NamedVar*> parents_;$/;"	m	class:despot::Function
parse	include/despot/util/optionparser.h	/^	void parse(bool gnu, const Descriptor usage[], int argc, char** argv,$/;"	f	class:despot::option::Parser
parse	include/despot/util/optionparser.h	/^	void parse(const Descriptor usage[], int argc, char** argv,$/;"	f	class:despot::option::Parser
parse	include/despot/util/optionparser.h	/^	void parse(const Descriptor usage[], int argc, const char** argv,$/;"	f	class:despot::option::Parser
parse	include/despot/util/optionparser.h	/^inline void Parser::parse(bool gnu, const Descriptor usage[], int argc,$/;"	f	class:despot::option::Parser
parser	include/despot/pomdpx/pomdpx.h	/^	inline Parser* parser() const {$/;"	f	class:despot::POMDPX
parser	include/despot/util/optionparser.h	/^	Parser& parser;$/;"	m	class:despot::option::Parser::StoreOptionAction
parser_	include/despot/pomdpx/pomdpx.h	/^	Parser* parser_;$/;"	m	class:despot::POMDPX
particle_lower_bound	src/core/policy.cpp	/^ParticleLowerBound* Policy::particle_lower_bound() const {$/;"	f	class:despot::Policy
particle_lower_bound_	include/despot/core/policy.h	/^	ParticleLowerBound* particle_lower_bound_;$/;"	m	class:despot::Policy
particle_upper_bound_	include/despot/core/upper_bound.h	/^	ParticleUpperBound* particle_upper_bound_;$/;"	m	class:despot::LookaheadUpperBound
particles	src/core/belief.cpp	/^const vector<State*>& ParticleBelief::particles() const {$/;"	f	class:despot::ParticleBelief
particles	src/core/node.cpp	/^const vector<State*>& VNode::particles() const {$/;"	f	class:despot::VNode
particles_	include/despot/core/belief.h	/^	std::vector<State*> particles_;$/;"	m	class:despot::ParticleBelief
particles_	include/despot/core/node.h	/^  std::vector<State*> particles_; \/\/ Used in DESPOT$/;"	m	class:despot::VNode
passage_y_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	int num_peds_, passage_y_, pedes_range_;$/;"	m	class:despot::Navigation
passage_y_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int num_peds_, passage_y_, pedes_range_;$/;"	m	class:despot::Navigation
passage_y_	examples/cpp_models/pocman/src/pocman.h	/^	int num_ghosts_, passage_y_, ghost_range_, smell_range_, hear_range_;$/;"	m	class:despot::Pocman
path_index	examples/cpp_models/localnavigation/src/localnavigation.h	/^	int path_index;$/;"	m	class:despot::Navigation
path_index	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int path_index;$/;"	m	class:despot::Navigation
paths_	examples/cpp_models/tag/src/base/base_tag.cpp	/^	mutable vector<map<OBS_TYPE, vector<int> > > paths_;$/;"	m	class:despot::TagHistoryModePolicy	file:
ped_dir	examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<int>   ped_dir;$/;"	m	class:despot::NavigationState
ped_dir	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<int>   ped_dir;$/;"	m	class:despot::NavigationState
ped_path1	examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<Coord> ped_path1;$/;"	m	class:despot::Navigation
ped_path1	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<Coord> ped_path1;$/;"	m	class:despot::Navigation
ped_pathdir	examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<int> ped_pathdir;	$/;"	m	class:despot::Navigation
ped_pathdir	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<int> ped_pathdir;	$/;"	m	class:despot::Navigation
ped_pos	examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<Coord> ped_pos;$/;"	m	class:despot::NavigationState
ped_pos	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<Coord> ped_pos;$/;"	m	class:despot::NavigationState
pedes_range_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	int num_peds_, passage_y_, pedes_range_;$/;"	m	class:despot::Navigation
pedes_range_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int num_peds_, passage_y_, pedes_range_;$/;"	m	class:despot::Navigation
perform	include/despot/util/optionparser.h	/^	bool perform(Option& option) {$/;"	f	class:despot::option::Parser::StoreOptionAction
perform	include/despot/util/optionparser.h	/^	bool perform(Option&) {$/;"	f	class:despot::option::Stats::CountOptionsAction
perform	include/despot/util/optionparser.h	/^	virtual bool perform(Option&) {$/;"	f	struct:despot::option::Parser::Action
plan_time_ratio	include/despot/evaluator.h	/^	static double plan_time_ratio;$/;"	m	class:despot::EvalLog
plan_time_ratio	src/evaluator.cpp	/^double EvalLog::plan_time_ratio = 1.0;$/;"	m	class:despot::EvalLog	file:
pocman_	examples/cpp_models/pocman/src/pocman.cpp	/^	const Pocman* pocman_;$/;"	m	class:despot::PocmanApproxScenarioUpperBound	file:
pocman_	examples/cpp_models/pocman/src/pocman.cpp	/^	const Pocman* pocman_;$/;"	m	class:despot::PocmanLegalParticleLowerBound	file:
pocman_	examples/cpp_models/pocman/src/pocman.cpp	/^	const Pocman* pocman_;$/;"	m	class:despot::PocmanPOMCPPrior	file:
pocman_	examples/cpp_models/pocman/src/pocman.cpp	/^	const Pocman* pocman_;$/;"	m	class:despot::PocmanSmartParticleUpperBound	file:
pocman_	examples/cpp_models/pocman/src/pocman.cpp	/^	const Pocman* pocman_;$/;"	m	class:despot::PocmanSmartPolicy	file:
pocman_	examples/cpp_models/pocman/src/pocman.h	/^	const Pocman* pocman_;$/;"	m	class:despot::PocmanBelief
pocman_home_	examples/cpp_models/pocman/src/pocman.h	/^	Coord pocman_home_, ghost_home_;$/;"	m	class:despot::Pocman
pocman_pos	examples/cpp_models/pocman/src/pocman.h	/^	Coord pocman_pos;$/;"	m	class:despot::PocmanState
policy	examples/cpp_models/chain/src/chain.h	/^	std::vector<ValuedAction> policy;\/\/ optimal policy$/;"	m	class:despot::ChainState
policy	src/core/mdp.cpp	/^const vector<ValuedAction>& MDP::policy() const {$/;"	f	class:despot::MDP
policy_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	vector<ValuedAction> policy_;$/;"	m	class:despot::RockSampleMDPBeliefUpperBound	file:
policy_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	vector<ValuedAction> policy_;$/;"	m	class:despot::RockSampleMDPParticleUpperBound	file:
policy_	include/despot/core/mdp.h	/^	std::vector<ValuedAction> policy_;$/;"	m	class:despot::MDP
policy_	include/despot/core/policy.h	/^	const StatePolicy& policy_;$/;"	m	class:despot::MMAPStatePolicy
policy_	include/despot/core/policy.h	/^	const StatePolicy& policy_;$/;"	m	class:despot::MajorityActionPolicy
policy_	include/despot/core/policy.h	/^	const StatePolicy& policy_;$/;"	m	class:despot::ModeStatePolicy
policy_	include/despot/core/upper_bound.h	/^	std::vector<ValuedAction> policy_;$/;"	m	class:despot::MDPUpperBound
pomdpx_	include/despot/evaluator.h	/^	POMDPX* pomdpx_;$/;"	m	class:despot::IPPCEvaluator
pomdpx_model_	src/pomdpx/pomdpx.cpp	/^	const POMDPX* pomdpx_model_;$/;"	m	class:despot::POMDPXGreedyActionPolicy	file:
port_	include/despot/evaluator.h	/^	std::string port_;$/;"	m	class:despot::IPPCEvaluator
position	examples/cpp_models/bridge/src/bridge.h	/^	int position;$/;"	m	class:despot::BridgeState
position	src/random_streams.cpp	/^int RandomStreams::position() const {$/;"	f	class:despot::RandomStreams
position	src/random_streams.cpp	/^void RandomStreams::position(int value) const {$/;"	f	class:despot::RandomStreams
position_	include/despot/random_streams.h	/^	mutable int position_;$/;"	m	class:despot::RandomStreams
power_num_steps_	examples/cpp_models/pocman/src/pocman.h	/^	int power_num_steps_;$/;"	m	class:despot::Pocman
power_steps	examples/cpp_models/localnavigation/src/localnavigation.h	/^	int power_steps;$/;"	m	class:despot::NavigationState
power_steps	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int power_steps;$/;"	m	class:despot::NavigationState
power_steps	examples/cpp_models/pocman/src/pocman.h	/^	int power_steps;$/;"	m	class:despot::PocmanState
preferred_	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	mutable vector<int> preferred_;$/;"	m	class:despot::LocalnaviSmartPolicy	file:
preferred_	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	mutable vector<int> preferred_;$/;"	m	class:despot::LocalnaviSmartPolicy	file:
preferred_	examples/cpp_models/pocman/src/pocman.cpp	/^	mutable vector<int> preferred_;$/;"	m	class:despot::PocmanSmartPolicy	file:
preferred_actions	src/solver/pomcp.cpp	/^const vector<int>& POMCPPrior::preferred_actions() const {$/;"	f	class:despot::POMCPPrior
preferred_actions_	include/despot/solver/pomcp.h	/^	std::vector<int> preferred_actions_;$/;"	m	class:despot::POMCPPrior
prev	include/despot/util/optionparser.h	/^	Option* prev() {$/;"	f	class:despot::option::Option
prev	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* prev;$/;"	m	class:despot::util::tinyxml::TiXmlAttribute
prev	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* prev;$/;"	m	class:despot::util::tinyxml::TiXmlNode
prev_	include/despot/util/optionparser.h	/^	Option* prev_;$/;"	m	class:despot::option::Option
prev_name	include/despot/pomdpx/parser/variable.h	/^	inline const std::string& prev_name() const {$/;"	f	class:despot::StateVar
prev_name	include/despot/pomdpx/parser/variable.h	/^	inline void prev_name(std::string str) {$/;"	f	class:despot::StateVar
prev_name_	include/despot/pomdpx/parser/variable.h	/^	std::string prev_name_;$/;"	m	class:despot::StateVar
prev_state_vars_	include/despot/pomdpx/parser/parser.h	/^	mutable std::vector<StateVar> prev_state_vars_;$/;"	m	class:despot::Parser
prevwrap	include/despot/util/optionparser.h	/^	Option* prevwrap() {$/;"	f	class:despot::option::Option
printError	include/despot/util/optionparser.h	/^	static void printError(const char* msg1, const option::Option& opt,$/;"	f	struct:despot::option::Arg
printUsage	include/despot/util/optionparser.h	/^	static void printUsage(IStringWriter& write, const Descriptor usage[],$/;"	f	struct:despot::option::PrintUsageImplementation
printUsage	include/despot/util/optionparser.h	/^void printUsage(Function* prn, Stream* stream, const Descriptor usage[],$/;"	f	namespace:despot::option
printUsage	include/despot/util/optionparser.h	/^void printUsage(Function* prn, const Descriptor usage[], int width = 80,$/;"	f	namespace:despot::option
printUsage	include/despot/util/optionparser.h	/^void printUsage(OStream& prn, const Descriptor usage[], int width = 80,$/;"	f	namespace:despot::option
printUsage	include/despot/util/optionparser.h	/^void printUsage(Syscall* prn, int fd, const Descriptor usage[], int width = 80,$/;"	f	namespace:despot::option
printUsage	include/despot/util/optionparser.h	/^void printUsage(const Temporary& prn, const Descriptor usage[], int width = 80,$/;"	f	namespace:despot::option
prior_	include/despot/core/belief.h	/^	Belief* prior_;$/;"	m	class:despot::ParticleBelief
prior_	include/despot/core/lower_bound.h	/^	POMCPPrior* prior_;$/;"	m	class:despot::POMCPScenarioLowerBound
prior_	include/despot/solver/pomcp.h	/^	POMCPPrior* prior_;$/;"	m	class:despot::POMCP
process	include/despot/util/optionparser.h	/^		void process(IStringWriter& write, const char* data, int len) {$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
processRoundEndMes	src/ippc/client.cpp	/^double Client::processRoundEndMes(string mes) {$/;"	f	class:despot::Client
processRoundInitMes	src/ippc/client.cpp	/^void Client::processRoundInitMes(string mes) {$/;"	f	class:despot::Client
processSessionEndMes	src/ippc/client.cpp	/^double Client::processSessionEndMes(string mes) {$/;"	f	class:despot::Client
processSessionInitMes	src/ippc/client.cpp	/^int Client::processSessionInitMes(string mes) {$/;"	f	class:despot::Client
processTurnMes	src/ippc/client.cpp	/^map<string, string> Client::processTurnMes(string mes) {$/;"	f	class:despot::Client
pruning_constant	include/despot/config.h	/^	double pruning_constant;$/;"	m	struct:despot::Config
ptr	include/despot/util/optionparser.h	/^		const char* ptr; \/\/!< Ptr to current part within the current row.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
quit	include/despot/util/tinyxml/tinystr.h	/^	void quit() {$/;"	f	class:despot::util::tinyxml::TiXmlString
random_	include/despot/evaluator.h	/^	Random random_;$/;"	m	class:despot::POMDPEvaluator
reading_distributions_	examples/cpp_models/tag/src/laser_tag/laser_tag.h	/^	std::vector<std::vector<std::vector<double> > > reading_distributions_;$/;"	m	class:despot::LaserTag
reading_distributions_	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.h	/^	std::vector<std::vector<std::vector<double> > > reading_distributions_;$/;"	m	class:despot::NoisyLaserTag
recvMessage	src/ippc/client.cpp	/^string Client::recvMessage() {$/;"	f	class:despot::Client
recvMessageTwice	src/ippc/client.cpp	/^string Client::recvMessageTwice() {$/;"	f	class:despot::Client
reg_model_	examples/cpp_models/adventurer/src/adventurer.cpp	/^	const Adventurer* reg_model_;$/;"	m	class:despot::AdventurerPOMCPPrior	file:
regdemo_model_	examples/cpp_models/adventurer/src/adventurer.cpp	/^	const Adventurer* regdemo_model_;$/;"	m	class:despot::AdventurerSmartPolicy	file:
rep_	include/despot/util/tinyxml/tinystr.h	/^	Rep * rep_;$/;"	m	class:despot::util::tinyxml::TiXmlString
repeat	src/util/util.cpp	/^string repeat(string str, int n) {$/;"	f	namespace:despot
reserve	src/util/tinyxml/tinystr.cpp	/^void TiXmlString::reserve(size_type cap) {$/;"	f	class:despot::util::tinyxml::TiXmlString
restartRow	include/despot/util/optionparser.h	/^		void restartRow() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
restartTable	include/despot/util/optionparser.h	/^		void restartTable() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
reuse	src/solver/pomcp.cpp	/^void POMCP::reuse(bool r) {$/;"	f	class:despot::POMCP
reuse_	include/despot/solver/aems.h	/^	bool reuse_;$/;"	m	class:despot::AEMS
reuse_	include/despot/solver/pomcp.h	/^	bool reuse_;$/;"	m	class:despot::POMCP
reward_	include/despot/evaluator.h	/^	double reward_;$/;"	m	class:despot::Evaluator
reward_clear_level_	examples/cpp_models/pocman/src/pocman.h	/^	double reward_clear_level_, reward_default_, reward_die_;$/;"	m	class:despot::Pocman
reward_collision_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_die;$/;"	m	class:despot::Navigation
reward_collision_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_stop;$/;"	m	class:despot::Navigation
reward_default_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_die;$/;"	m	class:despot::Navigation
reward_default_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_stop;$/;"	m	class:despot::Navigation
reward_default_	examples/cpp_models/pocman/src/pocman.h	/^	double reward_clear_level_, reward_default_, reward_die_;$/;"	m	class:despot::Pocman
reward_die	examples/cpp_models/localnavigation/src/localnavigation.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_die;$/;"	m	class:despot::Navigation
reward_die_	examples/cpp_models/pocman/src/pocman.h	/^	double reward_clear_level_, reward_default_, reward_die_;$/;"	m	class:despot::Pocman
reward_eat_food_	examples/cpp_models/pocman/src/pocman.h	/^	double reward_eat_food_, reward_eat_ghost_, reward_hit_wall_;$/;"	m	class:despot::Pocman
reward_eat_ghost_	examples/cpp_models/pocman/src/pocman.h	/^	double reward_eat_food_, reward_eat_ghost_, reward_hit_wall_;$/;"	m	class:despot::Pocman
reward_funcs_	include/despot/pomdpx/parser/parser.h	/^	std::vector<Function> reward_funcs_;$/;"	m	class:despot::Parser
reward_goal	examples/cpp_models/localnavigation/src/localnavigation.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_die;$/;"	m	class:despot::Navigation
reward_goal	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_stop;$/;"	m	class:despot::Navigation
reward_hit_wall_	examples/cpp_models/pocman/src/pocman.h	/^	double reward_eat_food_, reward_eat_ghost_, reward_hit_wall_;$/;"	m	class:despot::Pocman
reward_static_obs_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_die;$/;"	m	class:despot::Navigation
reward_static_obs_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_stop;$/;"	m	class:despot::Navigation
reward_stop	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_stop;$/;"	m	class:despot::Navigation
reward_vars_	include/despot/pomdpx/parser/parser.h	/^	mutable std::vector<RewardVar> reward_vars_;$/;"	m	class:despot::Parser
rewards	include/despot/evaluator.h	/^	inline std::vector<double> rewards() {$/;"	f	class:despot::Evaluator
rewards	include/despot/evaluator.h	/^	inline void rewards(std::vector<double> rewards) {$/;"	f	class:despot::Evaluator
rewards_	include/despot/pomdpx/pomdpx.h	/^	mutable std::vector<std::vector<double> > rewards_;$/;"	m	class:despot::POMDPX
rob_	examples/cpp_models/tag/src/base/base_tag.h	/^	std::vector<int> rob_; \/\/ rob_[s]: robot cell index for state s$/;"	m	class:despot::BaseTag
robot_path	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<Coord> robot_path;$/;"	m	class:despot::Navigation
robot_pos	examples/cpp_models/localnavigation/src/localnavigation.h	/^	Coord robot_pos;$/;"	m	class:despot::NavigationState
robot_pos	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	Coord robot_pos;$/;"	m	class:despot::NavigationState
robot_pos_unknown_	examples/cpp_models/tag/src/base/base_tag.h	/^  bool robot_pos_unknown_;$/;"	m	class:despot::BaseTag
rock_order_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	vector<vector<int> > rock_order_;$/;"	m	class:despot::RockSampleMMAPStateScenarioLowerBound	file:
rock_pos_	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	std::vector<Coord> rock_pos_;$/;"	m	class:despot::BaseRockSample
rock_state_	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	RockSampleState* rock_state_;$/;"	m	class:despot::BaseRockSample
rock_status	examples/cpp_models/simpleNavi/src/simpleNavi.h	/^	int rock_status; \/\/ 1 is good, and 0 is bad$/;"	m	class:despot::SimpleState
rock_status	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^	int rock_status; \/\/ 1 is good, and 0 is bad$/;"	m	class:despot::SimpleState
root_	include/despot/solver/aems.h	/^	VNode* root_;$/;"	m	class:despot::AEMS
root_	include/despot/solver/despot.h	/^	VNode* root_;$/;"	m	class:despot::DESPOT
root_	include/despot/solver/pomcp.h	/^	VNode* root_;$/;"	m	class:despot::POMCP
root_seed	include/despot/config.h	/^	unsigned int root_seed;$/;"	m	struct:despot::Config
root_seed	src/util/seeds.cpp	/^void Seeds::root_seed(unsigned value) {$/;"	f	class:despot::Seeds
root_seed_	include/despot/util/seeds.h	/^	static unsigned root_seed_;$/;"	m	class:despot::Seeds
root_seed_	src/util/seeds.cpp	/^unsigned Seeds::root_seed_ = 0;$/;"	m	class:despot::Seeds	file:
roudndNUM	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^static int roudndNUM=0;$/;"	v	file:
round_num	examples/cpp_models/localnavigation/src/localnavigation.h	/^	int round_num;$/;"	m	class:despot::Navigation
rover_position	examples/cpp_models/simpleNavi/src/simpleNavi.h	/^	int rover_position; \/\/ positions are numbered 0, 1, 2 from left to right$/;"	m	class:despot::SimpleState
rover_position	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^	int rover_position; \/\/ positions are numbered 0, 1, 2 from left to right$/;"	m	class:despot::SimpleState
row	include/despot/util/tinyxml/tinyxml.h	/^	int row; \/\/ 0 based.$/;"	m	struct:despot::util::tinyxml::TiXmlCursor
rowdesc	include/despot/util/optionparser.h	/^		const Descriptor* rowdesc; \/\/!< The Descriptor that contains the current row.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
rowstart	include/despot/util/optionparser.h	/^		const char* rowstart; \/\/!< Ptr to 1st character of current row within rowdesc->help.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
rs_model_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleApproxParticleUpperBound	file:
rs_model_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleBelief	file:
rs_model_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleENTScenarioLowerBound	file:
rs_model_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleEastBeliefPolicy	file:
rs_model_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleEastScenarioLowerBound	file:
rs_model_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleMDPBeliefUpperBound	file:
rs_model_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleMDPParticleUpperBound	file:
rs_model_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleMMAPStateScenarioLowerBound	file:
rs_model_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSamplePOMCPPrior	file:
rs_model_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleParticleUpperBound1	file:
rs_model_	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleParticleUpperBound2	file:
run	src/simple_tui.cpp	/^int SimpleTUI::run(int argc, char *argv[]) {$/;"	f	class:despot::SimpleTUI
runned_instances	include/despot/evaluator.h	/^  std::vector<std::string> runned_instances;$/;"	m	class:despot::EvalLog
same_loc_obs_	examples/cpp_models/tag/src/base/base_tag.h	/^	OBS_TYPE same_loc_obs_;$/;"	m	class:despot::BaseTag
saveLastAction	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::saveLastAction(State& state_,int action){$/;"	f	class:despot::Navigation
saveLastAction	include/despot/core/pomdp.h	/^	virtual void saveLastAction(State& state,int action)$/;"	f	class:despot::DSPOMDP
scenario_id	include/despot/core/pomdp.h	/^	int scenario_id;$/;"	m	class:despot::State
screenLength	include/despot/util/optionparser.h	/^		int screenLength() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
screenlen	include/despot/util/optionparser.h	/^		int screenlen; \/\/!< Length of the current part in screen columns (taking narrow\/wide chars into account).$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
search_depth	include/despot/config.h	/^	int search_depth;$/;"	m	struct:despot::Config
seed	src/util/random.cpp	/^unsigned Random::seed() {$/;"	f	class:despot::Random
seed_	include/despot/util/random.h	/^	unsigned seed_;$/;"	m	class:despot::Random
seed_gen_	include/despot/util/seeds.h	/^	static Random seed_gen_;$/;"	m	class:despot::Seeds
seed_gen_	src/util/seeds.cpp	/^Random Seeds::seed_gen_ = Random((unsigned) 0);$/;"	m	class:despot::Seeds	file:
selfloop_state_queue_	include/despot/pomdpx/parser/parser.h	/^	mutable std::queue<std::vector<int> > selfloop_state_queue_;$/;"	m	class:despot::Parser
selfloop_state_set_	include/despot/pomdpx/parser/parser.h	/^	mutable std::set<std::vector<int> > selfloop_state_set_;$/;"	m	class:despot::Parser
sendMessage	src/ippc/client.cpp	/^void Client::sendMessage(string sendbuf) {$/;"	f	class:despot::Client
sendcmd	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^bool Navigation::sendcmd()$/;"	f	class:despot::Navigation
sentinel	include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute sentinel;$/;"	m	class:despot::util::tinyxml::TiXmlAttributeSet
setHostName	src/ippc/client.cpp	/^void Client::setHostName(string hostname) {$/;"	f	class:despot::Client
setPort	src/ippc/client.cpp	/^void Client::setPort(string port) {$/;"	f	class:despot::Client
set_size	include/despot/util/tinyxml/tinystr.h	/^	void set_size(size_type sz) {$/;"	f	class:despot::util::tinyxml::TiXmlString
setbuf	src/util/logging.cpp	/^streambuf* log_ostream::log_buf::setbuf(char* s, streamsize n) {$/;"	f	class:despot::log_ostream::log_buf
shift	include/despot/util/optionparser.h	/^	static void shift(const char** args, int count) {$/;"	f	class:despot::option::Parser
shortopt	include/despot/util/optionparser.h	/^	const char* const shortopt;$/;"	m	struct:despot::option::Descriptor
silence	include/despot/config.h	/^	bool silence;$/;"	m	struct:despot::Config
sim_len	include/despot/config.h	/^	int sim_len; \/\/ Number of steps to run the simulation for.$/;"	m	struct:despot::Config
simpleTextPrint	include/despot/util/tinyxml/tinyxml.h	/^	bool simpleTextPrint;TIXML_STRING buffer;TIXML_STRING indent;TIXML_STRING lineBreak;$/;"	m	class:despot::util::tinyxml::TiXmlPrinter
size	include/despot/util/tinyxml/tinystr.h	/^		size_type size, capacity;$/;"	m	struct:despot::util::tinyxml::TiXmlString::Rep
size	include/despot/util/tinyxml/tinystr.h	/^	size_type size() const {$/;"	f	class:despot::util::tinyxml::TiXmlString
size_	examples/cpp_models/adventurer/src/adventurer.h	/^	int size_;$/;"	m	class:despot::Adventurer
size_	examples/cpp_models/reg_demo/src/reg_demo.h	/^	int size_;$/;"	m	class:despot::RegDemo
size_	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	int size_, num_rocks_;$/;"	m	class:despot::BaseRockSample
size_type	include/despot/util/tinyxml/tinystr.h	/^	typedef size_t size_type;$/;"	t	class:despot::util::tinyxml::TiXmlString
smell_range_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	int smell_range_;$/;"	m	class:despot::Navigation
smell_range_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int smell_range_;$/;"	m	class:despot::Navigation
smell_range_	examples/cpp_models/pocman/src/pocman.h	/^	int num_ghosts_, passage_y_, ghost_range_, smell_range_, hear_range_;$/;"	m	class:despot::Pocman
socketfd	include/despot/ippc/client.h	/^	int socketfd;$/;"	m	class:despot::Client
solver	include/despot/evaluator.h	/^	inline Solver* solver() {$/;"	f	class:despot::Evaluator
solver	include/despot/evaluator.h	/^	inline void solver(Solver* s) {$/;"	f	class:despot::Evaluator
solver_	include/despot/evaluator.h	/^	Solver* solver_;$/;"	m	class:despot::Evaluator
sparse_values_	include/despot/pomdpx/parser/function.h	/^  std::vector<std::vector<std::pair<int, double> > > sparse_values_;$/;"	m	class:despot::TabularCPT
split_	include/despot/core/belief.h	/^	bool split_;$/;"	m	class:despot::ParticleBelief
stamp	src/util/tinyxml/tinyxmlparser.cpp	/^	const char* stamp;$/;"	m	class:despot::util::tinyxml::TiXmlParsingData	file:
standalone	include/despot/util/tinyxml/tinyxml.h	/^	TIXML_STRING version;TIXML_STRING encoding;TIXML_STRING standalone;$/;"	m	class:despot::util::tinyxml::TiXmlDeclaration
start	include/despot/util/timer.h	/^	void start() {$/;"	f	class:despot::Timer
start	include/despot/util/tinyxml/tinystr.h	/^	char* start() const {$/;"	f	class:despot::util::tinyxml::TiXmlString
start_clockt_	include/despot/evaluator.h	/^	clock_t start_clockt_;$/;"	m	class:despot::Evaluator
start_pos_	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	Coord start_pos_;$/;"	m	class:despot::BaseRockSample
start_time	include/despot/evaluator.h	/^	static time_t start_time;$/;"	m	class:despot::EvalLog
start_time	src/evaluator.cpp	/^time_t EvalLog::start_time = 0;$/;"	m	class:despot::EvalLog	file:
state_	include/despot/evaluator.h	/^	State* state_;$/;"	m	class:despot::Evaluator
state_id	include/despot/core/pomdp.h	/^	int state_id;$/;"	m	class:despot::State
state_ids	include/despot/pomdpx/parser/parser.h	/^  std::vector<int> state_ids;$/;"	m	struct:despot::TerminalPattern
state_indexer	src/core/belief.cpp	/^void ParticleBelief::state_indexer(const StateIndexer* indexer) {$/;"	f	class:despot::ParticleBelief
state_indexer_	include/despot/core/belief.h	/^	const StateIndexer* state_indexer_;$/;"	m	class:despot::ParticleBelief
state_probs_	examples/cpp_models/tag/src/base/base_tag.cpp	/^	mutable vector<double> state_probs_;$/;"	m	class:despot::TagHistoryModePolicy	file:
state_probs_	include/despot/core/policy.h	/^	mutable std::vector<double> state_probs_;$/;"	m	class:despot::ModeStatePolicy
state_vals	include/despot/pomdpx/parser/parser.h	/^  std::set<std::vector<int> > state_vals;$/;"	m	struct:despot::TerminalPattern
statesVec_callback	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::statesVec_callback(const std_msgs::Int32MultiArray::ConstPtr &msg)$/;"	f	class:despot::Navigation
states_	examples/cpp_models/adventurer/src/adventurer.h	/^  std::vector<AdventurerState*> states_;$/;"	m	class:despot::Adventurer
states_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<NavigationState*> states_;$/;"	m	class:despot::Navigation
states_	examples/cpp_models/navigation/src/navigation.h	/^	std::vector<NavigationState*> states_;$/;"	m	class:despot::Navigation
states_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<NavigationState*> states_;$/;"	m	class:despot::Navigation
states_	examples/cpp_models/reg_demo/src/reg_demo.h	/^	std::vector<RegDemoState*> states_;$/;"	m	class:despot::RegDemo
states_	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	std::vector<RockSampleState*> states_;$/;"	m	class:despot::BaseRockSample
states_	examples/cpp_models/simpleNavi/src/simpleNavi.h	/^	std::vector<SimpleState*> states_;$/;"	m	class:despot::SimpleNavi
states_	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^	std::vector<SimpleState*> states_;$/;"	m	class:despot::SimpleRockSample
states_	examples/cpp_models/tag/src/base/base_tag.h	/^	std::vector<TagState*> states_;$/;"	m	class:despot::BaseTag
states_	include/despot/pomdpx/pomdpx.h	/^	std::vector<POMDPXState*> states_;$/;"	m	class:despot::POMDPX
statistics_	include/despot/solver/aems.h	/^	SearchStatistics statistics_;$/;"	m	class:despot::AEMS
statistics_	include/despot/solver/despot.h	/^	SearchStatistics statistics_;$/;"	m	class:despot::DESPOT
std	include/despot/core/history.h	/^namespace std {$/;"	n
step	include/despot/evaluator.h	/^	inline int step() {$/;"	f	class:despot::Evaluator
stepSize	examples/cpp_models/localnavigation/src/localnavigation.h	/^	int stepSize;				\/\/velocity$/;"	m	class:despot::NavigationState
stepSize	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int stepSize;				\/\/velocity$/;"	m	class:despot::NavigationState
step_	include/despot/evaluator.h	/^	int step_;$/;"	m	class:despot::Evaluator
step_reward	include/despot/core/node.h	/^	double step_reward;$/;"	m	class:despot::QNode
str	include/despot/util/tinyxml/tinystr.h	/^		char str[1];$/;"	m	struct:despot::util::tinyxml::TiXmlString::Rep
str	include/despot/util/tinyxml/tinyxml.h	/^		const char* str;$/;"	m	struct:despot::util::tinyxml::TiXmlBase::Entity
strLength	include/despot/util/tinyxml/tinyxml.h	/^		unsigned int strLength;$/;"	m	struct:despot::util::tinyxml::TiXmlBase::Entity
stream	include/despot/util/optionparser.h	/^		Stream* stream;$/;"	m	struct:despot::option::PrintUsageImplementation::StreamWriter
stream	src/util/logging.cpp	/^log_ostream& logging::stream(int level) {$/;"	f	class:despot::logging
stream	src/util/logging.cpp	/^void logging::stream(int level, ostream& out) {$/;"	f	class:despot::logging
streams_	include/despot/random_streams.h	/^  std::vector<std::vector<double> > streams_; \/\/ streams_[i] is associated with i-th particle$/;"	m	class:despot::RandomStreams
streams_	include/despot/util/logging.h	/^	static std::vector<log_ostream*> streams_;$/;"	m	class:despot::logging
streams_	src/util/logging.cpp	/^vector<log_ostream*> logging::streams_ = logging::InitializeLogStreams();$/;"	m	class:despot::logging	file:
streq	include/despot/util/optionparser.h	/^	static bool streq(const char* st1, const char* st2) {$/;"	f	class:despot::option::Parser
streqabbr	include/despot/util/optionparser.h	/^	static bool streqabbr(const char* st1, const char* st2, long long min) {$/;"	f	class:despot::option::Parser
swap	include/despot/util/tinyxml/tinystr.h	/^	void swap(TiXmlString& other) {$/;"	f	class:despot::util::tinyxml::TiXmlString
sync	src/util/logging.cpp	/^int log_ostream::log_buf::sync() {$/;"	f	class:despot::log_ostream::log_buf
tablestart	include/despot/util/optionparser.h	/^		const Descriptor* tablestart; \/\/!< The 1st descriptor of the current table.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
tabsize	include/despot/util/tinyxml/tinyxml.h	/^	int tabsize;$/;"	m	class:despot::util::tinyxml::TiXmlDocument
tabsize	src/util/tinyxml/tinyxmlparser.cpp	/^	int tabsize;$/;"	m	class:despot::util::tinyxml::TiXmlParsingData	file:
tag	include/despot/util/optionparser.h	/^	static Option* tag(Option* ptr) {$/;"	f	class:despot::option::Option
tag_model_	examples/cpp_models/tag/src/base/base_tag.cpp	/^	const BaseTag* tag_model_;$/;"	m	class:despot::TagBlindBeliefPolicy	file:
tag_model_	examples/cpp_models/tag/src/base/base_tag.cpp	/^	const BaseTag* tag_model_;$/;"	m	class:despot::TagHistoryModePolicy	file:
tag_model_	examples/cpp_models/tag/src/base/base_tag.cpp	/^	const BaseTag* tag_model_;$/;"	m	class:despot::TagManhattanUpperBound	file:
tag_model_	examples/cpp_models/tag/src/base/base_tag.cpp	/^	const BaseTag* tag_model_;$/;"	m	class:despot::TagPOMCPPrior	file:
tag_model_	examples/cpp_models/tag/src/base/base_tag.cpp	/^	const BaseTag* tag_model_;$/;"	m	class:despot::TagSHRPolicy	file:
tag_model_	examples/cpp_models/tag/src/base/base_tag.cpp	/^	const BaseTag* tag_model_;$/;"	m	class:despot::TagSPParticleUpperBound	file:
tag_model_	examples/cpp_models/tag/src/base/base_tag.h	/^	const BaseTag* tag_model_;$/;"	m	class:despot::TagBelief
tail	include/despot/util/optionparser.h	/^		int tail; \/\/!< @brief index for next read - 1 (i.e. increment tail BEFORE read)$/;"	m	class:despot::option::PrintUsageImplementation::LineWrapper
target_finish_time	include/despot/evaluator.h	/^	inline double target_finish_time() {$/;"	f	class:despot::Evaluator
target_finish_time	include/despot/evaluator.h	/^	inline void target_finish_time(double t) {$/;"	f	class:despot::Evaluator
target_finish_time_	include/despot/evaluator.h	/^	double target_finish_time_;$/;"	m	class:despot::Evaluator
target_line_in_block	include/despot/util/optionparser.h	/^		int target_line_in_block; \/\/!< Line index of the parts we should return to the user on this iteration.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
terminal_reward_funcs_	include/despot/pomdpx/parser/parser.h	/^	std::vector<Function> terminal_reward_funcs_;$/;"	m	class:despot::Parser
terminal_reward_vars_	include/despot/pomdpx/parser/parser.h	/^	mutable std::vector<RewardVar> terminal_reward_vars_;$/;"	m	class:despot::Parser
terminal_state_patterns_	include/despot/pomdpx/parser/parser.h	/^  std::vector<TerminalPattern> terminal_state_patterns_;$/;"	m	class:despot::Parser
text	examples/cpp_models/adventurer/src/adventurer.cpp	/^string AdventurerState::text() const {$/;"	f	class:despot::AdventurerState
text	examples/cpp_models/bridge/src/bridge.cpp	/^string BridgeState::text() const {$/;"	f	class:despot::BridgeState
text	examples/cpp_models/chain/src/chain.cpp	/^string ChainState::text() const {$/;"	f	class:despot::ChainState
text	examples/cpp_models/chain/src/chain.cpp	/^string FullChainBelief::text() const {$/;"	f	class:despot::FullChainBelief
text	examples/cpp_models/chain/src/chain.cpp	/^string SemiChainBelief::text() const {$/;"	f	class:despot::SemiChainBelief
text	examples/cpp_models/localnavigation/src/localnavigation.cpp	/^string NavigationState::text() const {$/;"	f	class:despot::NavigationState
text	examples/cpp_models/navigation/src/navigation.cpp	/^string NavigationState::text() const {$/;"	f	class:despot::NavigationState
text	examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^string NavigationState::text() const {$/;"	f	class:despot::NavigationState
text	examples/cpp_models/reg_demo/src/reg_demo.cpp	/^string RegDemoState::text() const {$/;"	f	class:despot::RegDemoState
text	examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^string RockSampleState::text() const {$/;"	f	class:despot::RockSampleState
text	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^string SimpleState::text() const {$/;"	f	class:despot::SimpleState
text	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^string SimpleState::text() const {$/;"	f	class:despot::SimpleState
text	examples/cpp_models/tag/src/base/base_tag.cpp	/^string TagState::text() const {$/;"	f	class:despot::TagState
text	examples/cpp_models/tiger/src/tiger.cpp	/^string TigerState::text() const {$/;"	f	class:despot::TigerState
text	src/core/belief.cpp	/^string Belief::text() const {$/;"	f	class:despot::Belief
text	src/core/belief.cpp	/^string ParticleBelief::text() const {$/;"	f	class:despot::ParticleBelief
text	src/core/pomdp.cpp	/^string State::text() const {$/;"	f	class:despot::State
text	src/pomdpx/pomdpx.cpp	/^string POMDPXState::text() const {$/;"	f	class:despot::POMDPXState
theta_	include/despot/util/gamma.h	/^	double theta_;$/;"	m	class:despot::Gamma
tiger_position	examples/cpp_models/tiger/src/tiger.h	/^	int tiger_position;$/;"	m	class:despot::TigerState
time_backup	include/despot/core/solver.h	/^	double time_backup;$/;"	m	struct:despot::SearchStatistics
time_node_expansion	include/despot/core/solver.h	/^	double time_node_expansion;$/;"	m	struct:despot::SearchStatistics
time_path	include/despot/core/solver.h	/^	double time_path;$/;"	m	struct:despot::SearchStatistics
time_per_move	include/despot/config.h	/^	double time_per_move;  \/\/ CPU time available to construct the search tree$/;"	m	struct:despot::Config
time_search	include/despot/core/solver.h	/^	double time_search;$/;"	m	struct:despot::SearchStatistics
timer	include/despot/util/timer.h	/^	pthread_t timer;$/;"	m	class:despot::Timer
timing	include/despot/util/timer.h	/^	void* timing(void* arg) {$/;"	f	class:despot::Timer
tinyxml	include/despot/pomdpx/parser/parser.h	/^namespace tinyxml {$/;"	n	namespace:despot::util
tinyxml	include/despot/util/tinyxml/tinystr.h	/^namespace tinyxml {$/;"	n	namespace:despot::util
tinyxml	include/despot/util/tinyxml/tinyxml.h	/^namespace tinyxml {$/;"	n	namespace:despot::util
tinyxml	src/util/tinyxml/tinystr.cpp	/^namespace tinyxml {$/;"	n	namespace:despot::util	file:
tinyxml	src/util/tinyxml/tinyxml.cpp	/^namespace tinyxml {$/;"	n	namespace:despot::util	file:
tinyxml	src/util/tinyxml/tinyxmlerror.cpp	/^namespace tinyxml {$/;"	n	namespace:despot::util	file:
tinyxml	src/util/tinyxml/tinyxmlparser.cpp	/^namespace tinyxml {$/;"	n	namespace:despot::util	file:
to_string	include/despot/util/util.h	/^std::string to_string(T t) {$/;"	f	namespace:despot
total_discounted_reward_	include/despot/evaluator.h	/^	double total_discounted_reward_;$/;"	m	class:despot::Evaluator
total_undiscounted_reward_	include/despot/evaluator.h	/^	double total_undiscounted_reward_;$/;"	m	class:despot::Evaluator
tracker	src/core/globals.cpp	/^ExecTracker tracker;$/;"	m	namespace:despot::Globals	file:
transition_funcs_	include/despot/pomdpx/parser/parser.h	/^	std::vector<CPT*> transition_funcs_;$/;"	m	class:despot::Parser
transition_probabilities_	examples/cpp_models/adventurer/src/adventurer.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_; \/\/state, action, [state, weight]$/;"	m	class:despot::Adventurer
transition_probabilities_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_; \/\/state, action, [state, weight]$/;"	m	class:despot::Navigation
transition_probabilities_	examples/cpp_models/navigation/src/navigation.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_; \/\/state, action, [state, weight]$/;"	m	class:despot::Navigation
transition_probabilities_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_; \/\/state, action, [state, weight]$/;"	m	class:despot::Navigation
transition_probabilities_	examples/cpp_models/reg_demo/src/reg_demo.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_; \/\/state, action, [state, weight]$/;"	m	class:despot::RegDemo
transition_probabilities_	examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_;$/;"	m	class:despot::BaseRockSample
transition_probabilities_	examples/cpp_models/tag/src/base/base_tag.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_; \/\/state, action, [state, weight]$/;"	m	class:despot::BaseTag
transition_probabilities_	include/despot/pomdpx/pomdpx.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_;$/;"	m	class:despot::POMDPX
trap_pos_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	int goal_pos_, trap_pos_;$/;"	m	class:despot::Navigation
trap_pos_	examples/cpp_models/navigation/src/navigation.h	/^	int goal_pos_, trap_pos_;$/;"	m	class:despot::Navigation
trap_pos_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int goal_pos_, trap_pos_;$/;"	m	class:despot::Navigation
trap_prob_	examples/cpp_models/adventurer/src/adventurer.h	/^  std::vector<double> trap_prob_;$/;"	m	class:despot::Adventurer
trap_prob_	examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<double> trap_prob_;      \/\/ trap_prob_[y * xsize_ + x]$/;"	m	class:despot::Navigation
trap_prob_	examples/cpp_models/navigation/src/navigation.h	/^	std::vector<double> trap_prob_; \/\/ trap_prob_[y * xsize_ + x]$/;"	m	class:despot::Navigation
trap_prob_	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<double> trap_prob_;      \/\/ trap_prob_[y * xsize_ + x]$/;"	m	class:despot::Navigation
trap_prob_	examples/cpp_models/reg_demo/src/reg_demo.h	/^	std::vector<double> trap_prob_;$/;"	m	class:despot::RegDemo
type	include/despot/util/optionparser.h	/^	const int type;$/;"	m	struct:despot::option::Descriptor
type	include/despot/util/optionparser.h	/^	int type() const {$/;"	f	class:despot::option::Option
type	include/despot/util/tinyxml/tinyxml.h	/^	NodeType type;$/;"	m	class:despot::util::tinyxml::TiXmlNode
undiscounted_round_rewards_	include/despot/evaluator.h	/^	std::vector<double> undiscounted_round_rewards_;$/;"	m	class:despot::Evaluator
unit_size_	examples/cpp_models/tag/src/laser_tag/laser_tag.h	/^	double unit_size_;$/;"	m	class:despot::LaserTag
unit_size_	examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.h	/^	double unit_size_;$/;"	m	class:despot::NoisyLaserTag
untag	include/despot/util/optionparser.h	/^	static Option* untag(Option* ptr) {$/;"	f	class:despot::option::Option
update_length	include/despot/util/optionparser.h	/^		void update_length() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
upmax	include/despot/util/optionparser.h	/^	static void upmax(int& i1, int i2) {$/;"	f	struct:despot::option::PrintUsageImplementation
upper_bound	src/core/node.cpp	/^double QNode::upper_bound() const {$/;"	f	class:despot::QNode
upper_bound	src/core/node.cpp	/^double VNode::upper_bound() const {$/;"	f	class:despot::VNode
upper_bound	src/core/node.cpp	/^void QNode::upper_bound(double value) {$/;"	f	class:despot::QNode
upper_bound	src/core/node.cpp	/^void VNode::upper_bound(double value) {$/;"	f	class:despot::VNode
upper_bound	src/solver/despot.cpp	/^ScenarioUpperBound* DESPOT::upper_bound() const {$/;"	f	class:despot::DESPOT
upper_bound_	include/despot/core/node.h	/^	double upper_bound_;$/;"	m	class:despot::QNode
upper_bound_	include/despot/core/node.h	/^	double upper_bound_;$/;"	m	class:despot::VNode
upper_bound_	include/despot/solver/aems.h	/^	BeliefUpperBound* upper_bound_;$/;"	m	class:despot::AEMS
upper_bound_	include/despot/solver/despot.h	/^	ScenarioUpperBound* upper_bound_;$/;"	m	class:despot::DESPOT
upper_bounds_	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^	vector<vector<double> > upper_bounds_;$/;"	m	class:despot::SimpleNaviParticleUpperBound	file:
upper_bounds_	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^	vector<vector<double> > upper_bounds_;$/;"	m	class:despot::SimpleRockSampleParticleUpperBound	file:
usage	include/despot/simple_tui.h	/^const option::Descriptor usage[] = {$/;"	m	namespace:despot
useMicrosoftBOM	include/despot/util/tinyxml/tinyxml.h	/^	bool useMicrosoftBOM; \/\/ the UTF-8 BOM were found when read. Note this, and try to write.$/;"	m	class:despot::util::tinyxml::TiXmlDocument
userData	include/despot/util/tinyxml/tinyxml.h	/^	void* userData;$/;"	m	class:despot::util::tinyxml::TiXmlBase
userstream	include/despot/util/optionparser.h	/^		const Temporary& userstream;$/;"	m	struct:despot::option::PrintUsageImplementation::TemporaryWriter
utf8ByteTable	include/despot/util/tinyxml/tinyxml.h	/^	static const int utf8ByteTable[256];$/;"	m	class:despot::util::tinyxml::TiXmlBase
utf8ByteTable	src/util/tinyxml/tinyxmlparser.cpp	/^const int TiXmlBase::utf8ByteTable[256] = {$/;"	m	class:despot::util::tinyxml::TiXmlBase	file:
util	include/despot/pomdpx/parser/parser.h	/^namespace util {$/;"	n	namespace:despot
util	include/despot/util/tinyxml/tinystr.h	/^namespace util {$/;"	n	namespace:despot
util	include/despot/util/tinyxml/tinyxml.h	/^namespace util {$/;"	n	namespace:despot
util	src/util/tinyxml/tinystr.cpp	/^namespace util {$/;"	n	namespace:despot	file:
util	src/util/tinyxml/tinyxml.cpp	/^namespace util {$/;"	n	namespace:despot	file:
util	src/util/tinyxml/tinyxmlerror.cpp	/^namespace util {$/;"	n	namespace:despot	file:
util	src/util/tinyxml/tinyxmlparser.cpp	/^namespace util {$/;"	n	namespace:despot	file:
utility_upper_bound	include/despot/core/node.h	/^	double utility_upper_bound;$/;"	m	class:despot::QNode
utility_upper_bound	include/despot/core/node.h	/^	double utility_upper_bound;$/;"	m	class:despot::VNode
value	include/despot/core/policy.h	/^	double value;$/;"	m	struct:despot::ValuedAction
value	include/despot/util/tinyxml/tinyxml.h	/^	TIXML_STRING name;TIXML_STRING value;$/;"	m	class:despot::util::tinyxml::TiXmlAttribute
value	include/despot/util/tinyxml/tinyxml.h	/^	TIXML_STRING value;$/;"	m	class:despot::util::tinyxml::TiXmlNode
value	src/core/node.cpp	/^double QNode::value() const {$/;"	f	class:despot::QNode
value	src/core/node.cpp	/^double VNode::value() const {$/;"	f	class:despot::VNode
value	src/core/node.cpp	/^void QNode::value(double v) {$/;"	f	class:despot::QNode
value	src/core/node.cpp	/^void VNode::value(double v) {$/;"	f	class:despot::VNode
value_	examples/cpp_models/tag/src/base/base_tag.cpp	/^	vector<double> value_;$/;"	m	class:despot::TagManhattanUpperBound	file:
value_	examples/cpp_models/tag/src/base/base_tag.cpp	/^	vector<double> value_;$/;"	m	class:despot::TagSPParticleUpperBound	file:
value_	include/despot/core/node.h	/^	double value_; \/\/ Value of the node$/;"	m	class:despot::QNode
value_	include/despot/core/node.h	/^	double value_; \/\/ Value of the node$/;"	m	class:despot::VNode
values	include/despot/pomdpx/parser/variable.h	/^	inline const std::vector<std::string>& values() const {$/;"	f	class:despot::Variable
values	src/pomdpx/parser/variable.cpp	/^void Variable::values(const vector<string>& ve) {$/;"	f	class:despot::Variable
values	src/pomdpx/parser/variable.cpp	/^void Variable::values(string prefix, int num) {$/;"	f	class:despot::Variable
values_	include/despot/pomdpx/parser/function.h	/^  std::vector<std::vector<double> > values_; \/\/ values_[parents][child]$/;"	m	class:despot::Function
values_	include/despot/pomdpx/parser/variable.h	/^  std::vector<std::string> values_; \/\/ Possible values of the variable$/;"	m	class:despot::Variable
variables_	include/despot/pomdpx/parser/parser.h	/^  std::map<std::string, Variable*> variables_;$/;"	m	class:despot::Parser
vec_id	include/despot/pomdpx/pomdpx.h	/^  std::vector<int> vec_id;$/;"	m	class:despot::POMDPXState
verbosity_	include/despot/util/logging.h	/^	static int verbosity_;$/;"	m	class:despot::logging
verbosity_	src/util/logging.cpp	/^int logging::verbosity_ = ERROR;$/;"	m	class:despot::logging	file:
version	include/despot/util/tinyxml/tinyxml.h	/^	TIXML_STRING version;TIXML_STRING encoding;TIXML_STRING standalone;$/;"	m	class:despot::util::tinyxml::TiXmlDeclaration
vstar	include/despot/core/node.h	/^	VNode* vstar;$/;"	m	class:despot::QNode
vstar	include/despot/core/node.h	/^	VNode* vstar;$/;"	m	class:despot::VNode
weight	include/despot/core/pomdp.h	/^	double weight;$/;"	m	class:despot::State
width	include/despot/util/optionparser.h	/^		int width;$/;"	m	class:despot::option::PrintUsageImplementation::LineWrapper
workhorse	include/despot/util/optionparser.h	/^inline bool Parser::workhorse(bool gnu, const Descriptor usage[], int numargs,$/;"	f	class:despot::option::Parser
world_seed	include/despot/evaluator.h	/^	virtual inline void world_seed(unsigned seed) {$/;"	f	class:despot::Evaluator
world_seed	include/despot/evaluator.h	/^	virtual inline void world_seed(unsigned seed) {$/;"	f	class:despot::POMDPEvaluator
write	include/despot/util/optionparser.h	/^		Function* write;$/;"	m	struct:despot::option::PrintUsageImplementation::FunctionWriter
write	include/despot/util/optionparser.h	/^		Syscall* write;$/;"	m	struct:despot::option::PrintUsageImplementation::SyscallWriter
write_one_line	include/despot/util/optionparser.h	/^		void write_one_line(IStringWriter& write) {$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
wrote_something	include/despot/util/optionparser.h	/^		bool wrote_something;$/;"	m	class:despot::option::PrintUsageImplementation::LineWrapper
x	include/despot/util/coord.h	/^	int x, y;$/;"	m	struct:despot::Coord
x	include/despot/util/optionparser.h	/^		int x;$/;"	m	class:despot::option::PrintUsageImplementation::LineWrapper
xi	include/despot/config.h	/^	double xi; \/\/ xi * gap(root) is the target uncertainty at the root.$/;"	m	struct:despot::Config
xsize	include/despot/util/grid.h	/^	int xsize() const {$/;"	f	class:despot::Grid
xsize_	examples/cpp_models/navigation/src/navigation.h	/^	int xsize_, ysize_;$/;"	m	class:despot::Navigation
xsize_	include/despot/util/grid.h	/^	int xsize_, ysize_;$/;"	m	class:despot::Grid
y	include/despot/util/coord.h	/^	int x, y;$/;"	m	struct:despot::Coord
ysize	include/despot/util/grid.h	/^	int ysize() const {$/;"	f	class:despot::Grid
ysize_	examples/cpp_models/navigation/src/navigation.h	/^	int xsize_, ysize_;$/;"	m	class:despot::Navigation
ysize_	include/despot/util/grid.h	/^	int xsize_, ysize_;$/;"	m	class:despot::Grid
~Action	include/despot/util/optionparser.h	/^	virtual ~Action() {$/;"	f	struct:despot::option::Parser::Action
~BaseTag	examples/cpp_models/tag/src/base/base_tag.cpp	/^BaseTag::~BaseTag() {$/;"	f	class:despot::BaseTag
~Belief	src/core/belief.cpp	/^Belief::~Belief() {$/;"	f	class:despot::Belief
~BeliefMDP	src/core/pomdp.cpp	/^BeliefMDP::~BeliefMDP() {$/;"	f	class:despot::BeliefMDP
~BeliefUpperBound	src/core/upper_bound.cpp	/^BeliefUpperBound::~BeliefUpperBound() {$/;"	f	class:despot::BeliefUpperBound
~CPT	src/pomdpx/parser/function.cpp	/^CPT::~CPT() {$/;"	f	class:despot::CPT
~Client	src/ippc/client.cpp	/^Client::~Client(void) {$/;"	f	class:despot::Client
~DESPOT	src/solver/despot.cpp	/^DESPOT::~DESPOT() {$/;"	f	class:despot::DESPOT
~DSPOMDP	src/core/pomdp.cpp	/^DSPOMDP::~DSPOMDP() {$/;"	f	class:despot::DSPOMDP
~Evaluator	src/evaluator.cpp	/^Evaluator::~Evaluator() {$/;"	f	class:despot::Evaluator
~Function	src/pomdpx/parser/function.cpp	/^Function::~Function() {$/;"	f	class:despot::Function
~HierarchyCPT	src/pomdpx/parser/function.cpp	/^HierarchyCPT::~HierarchyCPT() {$/;"	f	class:despot::HierarchyCPT
~IPPCEvaluator	src/evaluator.cpp	/^IPPCEvaluator::~IPPCEvaluator() {$/;"	f	class:despot::IPPCEvaluator
~IStringWriter	include/despot/util/optionparser.h	/^		virtual ~IStringWriter() {$/;"	f	struct:despot::option::PrintUsageImplementation::IStringWriter
~MDP	src/core/mdp.cpp	/^MDP::~MDP() {$/;"	f	class:despot::MDP
~MMAPInferencer	src/core/pomdp.cpp	/^MMAPInferencer::~MMAPInferencer() {$/;"	f	class:despot::MMAPInferencer
~MemoryPool	include/despot/util/memorypool.h	/^	~MemoryPool() {$/;"	f	class:despot::MemoryPool
~NamedVar	src/pomdpx/parser/variable.cpp	/^NamedVar::~NamedVar() {$/;"	f	class:despot::NamedVar
~Navigation	examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	~Navigation(){m_fileout.close();}$/;"	f	class:despot::Navigation
~POMCPPrior	src/solver/pomcp.cpp	/^POMCPPrior::~POMCPPrior() {$/;"	f	class:despot::POMCPPrior
~POMDPEvaluator	src/evaluator.cpp	/^POMDPEvaluator::~POMDPEvaluator() {$/;"	f	class:despot::POMDPEvaluator
~POMDPXState	src/pomdpx/pomdpx.cpp	/^POMDPXState::~POMDPXState() {$/;"	f	class:despot::POMDPXState
~Parser	src/pomdpx/parser/parser.cpp	/^Parser::~Parser() {$/;"	f	class:despot::Parser
~ParticleBelief	src/core/belief.cpp	/^ParticleBelief::~ParticleBelief() {$/;"	f	class:despot::ParticleBelief
~ParticleUpperBound	src/core/upper_bound.cpp	/^ParticleUpperBound::~ParticleUpperBound() {$/;"	f	class:despot::ParticleUpperBound
~Policy	src/core/policy.cpp	/^Policy::~Policy() {$/;"	f	class:despot::Policy
~QNode	src/core/node.cpp	/^QNode::~QNode() {$/;"	f	class:despot::QNode
~ScenarioUpperBound	src/core/upper_bound.cpp	/^ScenarioUpperBound::~ScenarioUpperBound() {$/;"	f	class:despot::ScenarioUpperBound
~SimpleState	examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^SimpleState::~SimpleState() {$/;"	f	class:despot::SimpleState
~SimpleState	examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^SimpleState::~SimpleState() {$/;"	f	class:despot::SimpleState
~SimpleTUI	src/simple_tui.cpp	/^SimpleTUI::~SimpleTUI() {}$/;"	f	class:despot::SimpleTUI
~Solver	src/core/solver.cpp	/^Solver::~Solver() {$/;"	f	class:despot::Solver
~State	src/core/pomdp.cpp	/^State::~State() {$/;"	f	class:despot::State
~StateIndexer	src/core/pomdp.cpp	/^StateIndexer::~StateIndexer() {$/;"	f	class:despot::StateIndexer
~StatePolicy	src/core/pomdp.cpp	/^StatePolicy::~StatePolicy() {$/;"	f	class:despot::StatePolicy
~StateVar	src/pomdpx/parser/variable.cpp	/^StateVar::~StateVar() {$/;"	f	class:despot::StateVar
~TiXmlAttributeSet	src/util/tinyxml/tinyxml.cpp	/^TiXmlAttributeSet::~TiXmlAttributeSet() {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
~TiXmlBase	include/despot/util/tinyxml/tinyxml.h	/^	virtual ~TiXmlBase() {$/;"	f	class:despot::util::tinyxml::TiXmlBase
~TiXmlComment	include/despot/util/tinyxml/tinyxml.h	/^	virtual ~TiXmlComment() {$/;"	f	class:despot::util::tinyxml::TiXmlComment
~TiXmlDeclaration	include/despot/util/tinyxml/tinyxml.h	/^	virtual ~TiXmlDeclaration() {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
~TiXmlDocument	include/despot/util/tinyxml/tinyxml.h	/^	virtual ~TiXmlDocument() {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
~TiXmlElement	src/util/tinyxml/tinyxml.cpp	/^TiXmlElement::~TiXmlElement() {$/;"	f	class:despot::util::tinyxml::TiXmlElement
~TiXmlNode	src/util/tinyxml/tinyxml.cpp	/^TiXmlNode::~TiXmlNode() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
~TiXmlString	include/despot/util/tinyxml/tinystr.h	/^	~TiXmlString() {$/;"	f	class:despot::util::tinyxml::TiXmlString
~TiXmlText	include/despot/util/tinyxml/tinyxml.h	/^	virtual ~TiXmlText() {$/;"	f	class:despot::util::tinyxml::TiXmlText
~TiXmlUnknown	include/despot/util/tinyxml/tinyxml.h	/^	virtual ~TiXmlUnknown() {$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
~TiXmlVisitor	include/despot/util/tinyxml/tinyxml.h	/^	virtual ~TiXmlVisitor() {$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
~Timer	include/despot/util/timer.h	/^	~Timer() {$/;"	f	class:despot::Timer
~TrivialParticleUpperBound	src/core/upper_bound.cpp	/^TrivialParticleUpperBound::~TrivialParticleUpperBound() {$/;"	f	class:despot::TrivialParticleUpperBound
~UniformPOMCPPrior	src/solver/pomcp.cpp	/^UniformPOMCPPrior::~UniformPOMCPPrior() {$/;"	f	class:despot::UniformPOMCPPrior
~VNode	src/core/node.cpp	/^VNode::~VNode() {$/;"	f	class:despot::VNode
~Variable	src/pomdpx/parser/variable.cpp	/^Variable::~Variable() {$/;"	f	class:despot::Variable
~log_buf	src/util/logging.cpp	/^log_ostream::log_buf::~log_buf() {$/;"	f	class:despot::log_ostream::log_buf
