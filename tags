!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTION_A	despot/examples/cpp_models/chain/src/chain.h	/^		ACTION_A, ACTION_B$/;"	e	enum:despot::Chain::__anon14
ACTION_B	despot/examples/cpp_models/chain/src/chain.h	/^		ACTION_A, ACTION_B$/;"	e	enum:despot::Chain::__anon14
ADVENTURER_H	despot/examples/cpp_models/adventurer/src/adventurer.h	2;"	d
AEMS	despot/include/despot/solver/aems.h	/^class AEMS: public Solver {$/;"	c	namespace:despot
AEMS	despot/src/solver/aems.cpp	/^AEMS::AEMS(const DSPOMDP* model, BeliefLowerBound* lower_bound,$/;"	f	class:despot::AEMS
AEMS2Likelihood	despot/src/solver/aems.cpp	/^double AEMS::AEMS2Likelihood(QNode* qnode) {$/;"	f	class:despot::AEMS
AEMS_H	despot/include/despot/solver/aems.h	2;"	d
ANTRO_a0	edge_leg_detector/src/detector.cpp	32;"	d	file:
ANTRO_a0	edge_leg_detector/src/edge_leg_detector/detector.cpp	31;"	d	file:
ANTRO_a1	edge_leg_detector/src/detector.cpp	33;"	d	file:
ANTRO_a1	edge_leg_detector/src/edge_leg_detector/detector.cpp	32;"	d	file:
ANTRO_b0	edge_leg_detector/src/detector.cpp	34;"	d	file:
ANTRO_b0	edge_leg_detector/src/edge_leg_detector/detector.cpp	33;"	d	file:
ANTRO_b1	edge_leg_detector/src/detector.cpp	35;"	d	file:
ANTRO_b1	edge_leg_detector/src/edge_leg_detector/detector.cpp	34;"	d	file:
ANTRO_c0	edge_leg_detector/src/detector.cpp	36;"	d	file:
ANTRO_c0	edge_leg_detector/src/edge_leg_detector/detector.cpp	35;"	d	file:
ANTRO_c1	edge_leg_detector/src/detector.cpp	37;"	d	file:
ANTRO_c1	edge_leg_detector/src/edge_leg_detector/detector.cpp	36;"	d	file:
ARG_IGNORE	despot/include/despot/util/optionparser.h	/^	ARG_IGNORE,$/;"	e	enum:despot::option::ArgStatus
ARG_ILLEGAL	despot/include/despot/util/optionparser.h	/^	ARG_ILLEGAL$/;"	e	enum:despot::option::ArgStatus
ARG_NONE	despot/include/despot/util/optionparser.h	/^	ARG_NONE,$/;"	e	enum:despot::option::ArgStatus
ARG_OK	despot/include/despot/util/optionparser.h	/^	ARG_OK,$/;"	e	enum:despot::option::ArgStatus
A_CHECK	despot/examples/cpp_models/simpleNavi/src/simpleNavi.h	/^		A_SAMPLE = 0, A_EAST = 1, A_WEST = 2, A_CHECK = 3$/;"	e	enum:despot::SimpleNavi::__anon12
A_CHECK	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^		A_SAMPLE = 0, A_EAST = 1, A_WEST = 2, A_CHECK = 3$/;"	e	enum:despot::SimpleRockSample::__anon7
A_EAST	despot/examples/cpp_models/simpleNavi/src/simpleNavi.h	/^		A_SAMPLE = 0, A_EAST = 1, A_WEST = 2, A_CHECK = 3$/;"	e	enum:despot::SimpleNavi::__anon12
A_EAST	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^		A_SAMPLE = 0, A_EAST = 1, A_WEST = 2, A_CHECK = 3$/;"	e	enum:despot::SimpleRockSample::__anon7
A_LEFT	despot/examples/cpp_models/adventurer/src/adventurer.h	/^		A_LEFT,$/;"	e	enum:despot::Adventurer::__anon6
A_LEFT	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^		A_LEFT,$/;"	e	enum:despot::RegDemo::__anon10
A_RIGHT	despot/examples/cpp_models/adventurer/src/adventurer.h	/^		A_RIGHT$/;"	e	enum:despot::Adventurer::__anon6
A_RIGHT	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^		A_RIGHT$/;"	e	enum:despot::RegDemo::__anon10
A_SAMPLE	despot/examples/cpp_models/simpleNavi/src/simpleNavi.h	/^		A_SAMPLE = 0, A_EAST = 1, A_WEST = 2, A_CHECK = 3$/;"	e	enum:despot::SimpleNavi::__anon12
A_SAMPLE	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^		A_SAMPLE = 0, A_EAST = 1, A_WEST = 2, A_CHECK = 3$/;"	e	enum:despot::SimpleRockSample::__anon7
A_STAY	despot/examples/cpp_models/adventurer/src/adventurer.h	/^		A_STAY,$/;"	e	enum:despot::Adventurer::__anon6
A_STAY	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^		A_STAY,$/;"	e	enum:despot::RegDemo::__anon10
A_WEST	despot/examples/cpp_models/simpleNavi/src/simpleNavi.h	/^		A_SAMPLE = 0, A_EAST = 1, A_WEST = 2, A_CHECK = 3$/;"	e	enum:despot::SimpleNavi::__anon12
A_WEST	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^		A_SAMPLE = 0, A_EAST = 1, A_WEST = 2, A_CHECK = 3$/;"	e	enum:despot::SimpleRockSample::__anon7
Accept	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlComment::Accept(TiXmlVisitor* visitor) const {$/;"	f	class:despot::util::tinyxml::TiXmlComment
Accept	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlDeclaration::Accept(TiXmlVisitor* visitor) const {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
Accept	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::Accept(TiXmlVisitor* visitor) const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
Accept	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlElement::Accept(TiXmlVisitor* visitor) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
Accept	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlText::Accept(TiXmlVisitor* visitor) const {$/;"	f	class:despot::util::tinyxml::TiXmlText
Accept	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlUnknown::Accept(TiXmlVisitor* visitor) const {$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
Action	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::AdventurerSmartPolicy
Action	despot/examples/cpp_models/chain/src/chain.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::MeanMDPPolicy
Action	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::LocalnaviSmartPolicy
Action	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::LocalnaviSmartPolicy
Action	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::PocmanSmartPolicy
Action	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::SimpleNaviEastPolicy
Action	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::SimpleRockSampleEastPolicy
Action	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::TagSHRPolicy
Action	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	int Action(const vector<State*>& particles,$/;"	f	class:despot::TagHistoryModePolicy
Action	despot/examples/cpp_models/tiger/src/tiger.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::OptimalTigerPolicy
Action	despot/include/despot/core/history.h	/^	int Action(int t) const {$/;"	f	class:despot::History
Action	despot/include/despot/util/optionparser.h	/^struct Parser::Action {$/;"	s	class:despot::option::Parser
Action	despot/src/core/policy.cpp	/^int BlindPolicy::Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::BlindPolicy
Action	despot/src/core/policy.cpp	/^int MMAPStatePolicy::Action(const vector<State*>& particles,$/;"	f	class:despot::MMAPStatePolicy
Action	despot/src/core/policy.cpp	/^int MajorityActionPolicy::Action(const vector<State*>& particles,$/;"	f	class:despot::MajorityActionPolicy
Action	despot/src/core/policy.cpp	/^int ModeStatePolicy::Action(const vector<State*>& particles,$/;"	f	class:despot::ModeStatePolicy
Action	despot/src/core/policy.cpp	/^int RandomPolicy::Action(const vector<State*>& particles,$/;"	f	class:despot::RandomPolicy
Action	despot/src/pomdpx/pomdpx.cpp	/^	int Action(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::POMDPXGreedyActionPolicy
ActionCC	navi_mdp/include/Dynamic_Manager.h	/^	vector< vector<int> > ActionCC;$/;"	m	class:Dynamic_Manager
ActionCC	navi_mdp/include/MDPmanager.h	/^	vector< vector<int> > ActionCC;$/;"	m	class:MDPManager
ActionVar	despot/include/despot/pomdpx/parser/variable.h	75;"	d
Action_Pub	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	ros::Publisher   Action_Pub;$/;"	m	class:despot::Navigation
Action_Pub	despot/examples/cpp_models/navigation/src/navigation.h	/^	ros::Publisher   Action_Pub;$/;"	m	class:despot::Navigation
Action_Pub	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	ros::Publisher   Action_Pub;$/;"	m	class:despot::Navigation
Action_dim	navi_mdp/include/Dynamic_Manager.h	/^ 	int               Action_dim;$/;"	m	class:Dynamic_Manager
Action_dim	navi_mdp/include/MDPmanager.h	/^ 	int               Action_dim;$/;"	m	class:MDPManager
Action_pub	despot/include/despot/evaluator.h	/^	ros::Publisher    Action_pub;$/;"	m	class:despot::Evaluator
Add	despot/include/despot/core/history.h	/^	void Add(int action, OBS_TYPE obs) {$/;"	f	class:despot::History
Add	despot/include/despot/solver/pomcp.h	/^	inline virtual void Add(int action, OBS_TYPE obs) {$/;"	f	class:despot::POMCPPrior
Add	despot/src/core/node.cpp	/^void QNode::Add(double val) {$/;"	f	class:despot::QNode
Add	despot/src/core/node.cpp	/^void VNode::Add(double val) {$/;"	f	class:despot::VNode
Add	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlAttributeSet::Add(TiXmlAttribute* addMe) {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
AddCell	despot/src/util/floor.cpp	/^void Floor::AddCell(Coord coord) {$/;"	f	class:despot::Floor
Advance	despot/src/random_streams.cpp	/^void RandomStreams::Advance() const {$/;"	f	class:despot::RandomStreams
Adventurer	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^Adventurer::Adventurer(int num_goals) {$/;"	f	class:despot::Adventurer
Adventurer	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^Adventurer::Adventurer(string params_file) {$/;"	f	class:despot::Adventurer
Adventurer	despot/examples/cpp_models/adventurer/src/adventurer.h	/^class Adventurer: public BeliefMDP,$/;"	c	namespace:despot
AdventurerPOMCPPrior	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^	AdventurerPOMCPPrior(const DSPOMDP* model) :$/;"	f	class:despot::AdventurerPOMCPPrior
AdventurerPOMCPPrior	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^class AdventurerPOMCPPrior: public POMCPPrior {$/;"	c	namespace:despot	file:
AdventurerSmartPolicy	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^	AdventurerSmartPolicy(const DSPOMDP* model, ParticleLowerBound* bound) :$/;"	f	class:despot::AdventurerSmartPolicy
AdventurerSmartPolicy	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^class AdventurerSmartPolicy: public Policy {$/;"	c	namespace:despot	file:
AdventurerState	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^AdventurerState::AdventurerState() {$/;"	f	class:despot::AdventurerState
AdventurerState	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^AdventurerState::AdventurerState(int _state_id) {$/;"	f	class:despot::AdventurerState
AdventurerState	despot/examples/cpp_models/adventurer/src/adventurer.h	/^class AdventurerState: public State {$/;"	c	namespace:despot
Allocate	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^State* Adventurer::Allocate(int state_id, double weight) const {$/;"	f	class:despot::Adventurer
Allocate	despot/examples/cpp_models/bridge/src/bridge.cpp	/^State* Bridge::Allocate(int state_id, double weight) const {$/;"	f	class:despot::Bridge
Allocate	despot/examples/cpp_models/chain/src/chain.cpp	/^State* Chain::Allocate(int state_id, double weight) const {$/;"	f	class:despot::Chain
Allocate	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^State* Navigation::Allocate(int state_id, double weight) const {$/;"	f	class:despot::Navigation
Allocate	despot/examples/cpp_models/navigation/src/navigation.cpp	/^State* Navigation::Allocate(int state_id, double weight) const {$/;"	f	class:despot::Navigation
Allocate	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^State* Navigation::Allocate(int state_id, double weight) const {$/;"	f	class:despot::Navigation
Allocate	despot/examples/cpp_models/pocman/src/pocman.cpp	/^State* Pocman::Allocate(int state_id, double weight) const {$/;"	f	class:despot::Pocman
Allocate	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^State* RegDemo::Allocate(int state_id, double weight) const {$/;"	f	class:despot::RegDemo
Allocate	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^State* BaseRockSample::Allocate(int state_id, double weight) const {$/;"	f	class:despot::BaseRockSample
Allocate	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^State* SimpleNavi::Allocate(int state_id, double weight) const {$/;"	f	class:despot::SimpleNavi
Allocate	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^State* SimpleRockSample::Allocate(int state_id, double weight) const {$/;"	f	class:despot::SimpleRockSample
Allocate	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^State* BaseTag::Allocate(int state_id, double weight) const {$/;"	f	class:despot::BaseTag
Allocate	despot/examples/cpp_models/tiger/src/tiger.cpp	/^State* Tiger::Allocate(int state_id, double weight) const {$/;"	f	class:despot::Tiger
Allocate	despot/include/despot/util/memorypool.h	/^	T* Allocate() {$/;"	f	class:despot::MemoryPool
Allocate	despot/src/pomdpx/pomdpx.cpp	/^State* POMDPX::Allocate(int state_id, double weight) const {$/;"	f	class:despot::POMDPX
ApproxInitialParticleSet	despot/src/pomdpx/pomdpx.cpp	/^vector<State*> POMDPX::ApproxInitialParticleSet() const {$/;"	f	class:despot::POMDPX
ApproxMDPChainParticleUpperBound	despot/examples/cpp_models/chain/src/chain.cpp	/^	ApproxMDPChainParticleUpperBound() {$/;"	f	class:despot::ApproxMDPChainParticleUpperBound
ApproxMDPChainParticleUpperBound	despot/examples/cpp_models/chain/src/chain.cpp	/^class ApproxMDPChainParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
ApproxPrior	despot/examples/cpp_models/tag/src/tag/tag.cpp	/^Belief* Tag::ApproxPrior() const {$/;"	f	class:despot::Tag
Arg	despot/include/despot/util/optionparser.h	/^struct Arg {$/;"	s	namespace:despot::option
ArgStatus	despot/include/despot/util/optionparser.h	/^enum ArgStatus {$/;"	g	namespace:despot::option
Attribute	despot/src/util/tinyxml/tinyxml.cpp	/^const char* TiXmlElement::Attribute(const char* name) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
Attribute	despot/src/util/tinyxml/tinyxml.cpp	/^const char* TiXmlElement::Attribute(const char* name, double* d) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
Attribute	despot/src/util/tinyxml/tinyxml.cpp	/^const char* TiXmlElement::Attribute(const char* name, int* i) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
Attribute	despot/src/util/tinyxml/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name ) const$/;"	f	class:despot::util::tinyxml::TiXmlElement
Attribute	despot/src/util/tinyxml/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, double* d ) const$/;"	f	class:despot::util::tinyxml::TiXmlElement
Attribute	despot/src/util/tinyxml/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, int* i ) const$/;"	f	class:despot::util::tinyxml::TiXmlElement
AverageDiscountedRoundReward	despot/src/evaluator.cpp	/^double Evaluator::AverageDiscountedRoundReward() const {$/;"	f	class:despot::Evaluator
AverageUndiscountedRoundReward	despot/src/evaluator.cpp	/^double Evaluator::AverageUndiscountedRoundReward() const {$/;"	f	class:despot::Evaluator
BASEROCKSAMPLE_H	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	2;"	d
BASETAG_H	despot/examples/cpp_models/tag/src/base/base_tag.h	2;"	d
BASE_GOAL_TOPIC	navi_mdp/scripts/base_move.py	/^BASE_GOAL_TOPIC = "\/move_base\/move\/goal"$/;"	v
BASE_STATE_TOPIC	navi_mdp/scripts/base_move.py	/^BASE_STATE_TOPIC = "\/hsrb\/omni_base_controller\/state"$/;"	v
BELIEF_H	despot/include/despot/core/belief.h	2;"	d
BFL	human_filter/include/people_tracking_filter/gaussian_pos_vel.h	/^namespace BFL$/;"	n
BFL	human_filter/include/people_tracking_filter/gaussian_vector.h	/^namespace BFL$/;"	n
BFL	human_filter/include/people_tracking_filter/mcpdf_pos_vel.h	/^namespace BFL$/;"	n
BFL	human_filter/include/people_tracking_filter/mcpdf_vector.h	/^namespace BFL$/;"	n
BFL	human_filter/include/people_tracking_filter/measmodel_pos.h	/^namespace BFL$/;"	n
BFL	human_filter/include/people_tracking_filter/measmodel_vector.h	/^namespace BFL$/;"	n
BFL	human_filter/include/people_tracking_filter/state_pos_vel.h	/^namespace BFL$/;"	n
BFL	human_filter/include/people_tracking_filter/sysmodel_pos_vel.h	/^namespace BFL$/;"	n
BFL	human_filter/include/people_tracking_filter/sysmodel_vector.h	/^namespace BFL$/;"	n
BFL	human_filter/include/people_tracking_filter/uniform_vector.h	/^namespace BFL$/;"	n
BFL	human_filter/src/gaussian_pos_vel.cpp	/^namespace BFL$/;"	n	file:
BFL	human_filter/src/gaussian_vector.cpp	/^namespace BFL$/;"	n	file:
BFL	human_filter/src/uniform_vector.cpp	/^namespace BFL$/;"	n	file:
BIN	despot/examples/cpp_models/adventurer/Makefile	/^BIN = adventurer$/;"	m
BIN	despot/examples/cpp_models/bridge/Makefile	/^BIN = bridge$/;"	m
BIN	despot/examples/cpp_models/chain/Makefile	/^BIN = chain$/;"	m
BIN	despot/examples/cpp_models/localnavigation/Makefile	/^BIN = navigation $/;"	m
BIN	despot/examples/cpp_models/navigation/Makefile	/^BIN = navigation $/;"	m
BIN	despot/examples/cpp_models/pathfollowing/Makefile	/^BIN = navigation $/;"	m
BIN	despot/examples/cpp_models/pocman/Makefile	/^BIN = pocman $/;"	m
BIN	despot/examples/cpp_models/reg_demo/Makefile	/^BIN = regdemo $/;"	m
BIN	despot/examples/cpp_models/simpleNavi/Makefile	/^BIN = simple_rs $/;"	m
BIN	despot/examples/cpp_models/simple_rock_sample/Makefile	/^BIN = simple_rs $/;"	m
BIN	despot/examples/cpp_models/tiger/Makefile	/^BIN = tiger $/;"	m
BIN	despot/examples/pomdpx_models/Makefile	/^BIN = pomdpx $/;"	m
BITS_PER_READING	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^int LaserTag::BITS_PER_READING = 7;$/;"	m	class:despot::LaserTag	file:
BITS_PER_READING	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.h	/^	static int BITS_PER_READING;$/;"	m	class:despot::LaserTag
BITS_PER_READING	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^int NoisyLaserTag::BITS_PER_READING = 7;$/;"	m	class:despot::NoisyLaserTag	file:
BITS_PER_READING	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.h	/^	static int BITS_PER_READING;$/;"	m	class:despot::NoisyLaserTag
BRIDGELENGTH	despot/examples/cpp_models/bridge/src/bridge.cpp	/^int Bridge::BRIDGELENGTH = 10;$/;"	m	class:despot::Bridge	file:
BRIDGELENGTH	despot/examples/cpp_models/bridge/src/bridge.h	/^	static int LEFT, RIGHT, HELP, BRIDGELENGTH;$/;"	m	class:despot::Bridge
BRIDGE_H	despot/examples/cpp_models/bridge/src/bridge.h	2;"	d
Back	despot/src/random_streams.cpp	/^void RandomStreams::Back() const {$/;"	f	class:despot::RandomStreams
Backup	despot/src/solver/aems.cpp	/^void AEMS::Backup(VNode* vnode) {$/;"	f	class:despot::AEMS
Backup	despot/src/solver/despot.cpp	/^void DESPOT::Backup(VNode* vnode) {$/;"	f	class:despot::DESPOT
BaseMoveCBA	navi_mdp/scripts/base_move.py	/^class BaseMoveCBA(object):$/;"	c
BaseRockSample	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^BaseRockSample::BaseRockSample(int size, int rocks) :$/;"	f	class:despot::BaseRockSample
BaseRockSample	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^BaseRockSample::BaseRockSample(string map) {$/;"	f	class:despot::BaseRockSample
BaseRockSample	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^class BaseRockSample: public MDP,$/;"	c	namespace:despot
BaseTag	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^BaseTag::BaseTag() :$/;"	f	class:despot::BaseTag
BaseTag	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^BaseTag::BaseTag(string params_file) :$/;"	f	class:despot::BaseTag
BaseTag	despot/examples/cpp_models/tag/src/base/base_tag.h	/^class BaseTag: public MDP,$/;"	c	namespace:despot
Basepos_Callback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Basepos_Callback(const geometry_msgs::PointStamped::ConstPtr& msg)$/;"	f	class:MDPManager
BasisFuns	navi_mdp/src/srBSpline.cpp	/^void srBSpline::BasisFuns( OUT double* N, double u )$/;"	f	class:srBSpline
BasisFuns	navi_mdp/src/srBSpline.cpp	/^void srBSpline::BasisFuns( OUT double* N, int span, double u )$/;"	f	class:srBSpline
BasisFunsDers	navi_mdp/src/srBSpline.cpp	/^bool srBSpline::BasisFunsDers( OUT double** ders, double u, int n )$/;"	f	class:srBSpline
BasisFunsDers	navi_mdp/src/srBSpline.cpp	/^bool srBSpline::BasisFunsDers( OUT double** ders, int span, double u, int n )$/;"	f	class:srBSpline
Belief	despot/include/despot/core/belief.h	/^class Belief {$/;"	c	namespace:despot
Belief	despot/src/core/belief.cpp	/^Belief::Belief(const DSPOMDP* model) :$/;"	f	class:despot::Belief
BeliefLowerBound	despot/include/despot/core/lower_bound.h	/^class BeliefLowerBound: public Solver {$/;"	c	namespace:despot
BeliefLowerBound	despot/src/core/lower_bound.cpp	/^BeliefLowerBound::BeliefLowerBound(const DSPOMDP* model, Belief* belief) :$/;"	f	class:despot::BeliefLowerBound
BeliefMDP	despot/include/despot/core/pomdp.h	/^class BeliefMDP: public DSPOMDP {$/;"	c	namespace:despot
BeliefMDP	despot/src/core/pomdp.cpp	/^BeliefMDP::BeliefMDP() {$/;"	f	class:despot::BeliefMDP
BeliefUpperBound	despot/include/despot/core/upper_bound.h	/^class BeliefUpperBound {$/;"	c	namespace:despot
BeliefUpperBound	despot/src/core/upper_bound.cpp	/^BeliefUpperBound::BeliefUpperBound() {$/;"	f	class:despot::BeliefUpperBound
Blank	despot/src/util/tinyxml/tinyxmlparser.cpp	/^bool TiXmlText::Blank() const {$/;"	f	class:despot::util::tinyxml::TiXmlText
BlindPolicy	despot/include/despot/core/policy.h	/^class BlindPolicy: public Policy {$/;"	c	namespace:despot
BlindPolicy	despot/src/core/policy.cpp	/^BlindPolicy::BlindPolicy(const DSPOMDP* model, int action, ParticleLowerBound* $/;"	f	class:despot::BlindPolicy
BoolMove	navi_mdp/src/base_actionlib.cpp	/^bool BoolMove=false;$/;"	v
BoolUpadated	navi_mdp/src/base_conti_actionlib.cpp	/^bool BoolUpadated=false;$/;"	v
Bridge	despot/examples/cpp_models/bridge/src/bridge.cpp	/^Bridge::Bridge() {$/;"	f	class:despot::Bridge
Bridge	despot/examples/cpp_models/bridge/src/bridge.h	/^class Bridge: public BeliefMDP {$/;"	c	namespace:despot
BridgePOMCPPrior	despot/examples/cpp_models/bridge/src/bridge.cpp	/^	BridgePOMCPPrior(const DSPOMDP* model) :$/;"	f	class:despot::BridgePOMCPPrior
BridgePOMCPPrior	despot/examples/cpp_models/bridge/src/bridge.cpp	/^class BridgePOMCPPrior: public POMCPPrior {$/;"	c	namespace:despot	file:
BridgeState	despot/examples/cpp_models/bridge/src/bridge.cpp	/^BridgeState::BridgeState() :$/;"	f	class:despot::BridgeState
BridgeState	despot/examples/cpp_models/bridge/src/bridge.cpp	/^BridgeState::BridgeState(int _position) :$/;"	f	class:despot::BridgeState
BridgeState	despot/examples/cpp_models/bridge/src/bridge.h	/^class BridgeState: public State {$/;"	c	namespace:despot
C	navi_mdp/include/srBSpline.h	/^	inline double C( double u ) { return CurvePoint( u ); }$/;"	f	class:srBSpline
CBA_GUI_BASE	navi_mdp/scripts/base_move.py	/^    CBA_GUI_BASE = BaseMoveCBA(float(sys.argv[1]) if len(sys.argv) > 1 else 0.0)$/;"	v
CDATA	despot/include/despot/util/tinyxml/tinyxml.h	/^	bool CDATA() const {$/;"	f	class:despot::util::tinyxml::TiXmlText
CHAIN_H	despot/examples/cpp_models/chain/src/chain.h	2;"	d
CLIENT_H_	despot/include/despot/ippc/client.h	2;"	d
COMMENT	despot/include/despot/util/tinyxml/tinyxml.h	/^		DOCUMENT, ELEMENT, COMMENT, UNKNOWN, TEXT, DECLARATION, TYPECOUNT$/;"	e	enum:despot::util::tinyxml::TiXmlNode::NodeType
CONFIG_H	despot/include/despot/config.h	2;"	d
COORD_H	despot/include/despot/util/coord.h	2;"	d
CPPEXAMPLE	despot/Makefile	/^CPPEXAMPLE = $(addprefix examples\/cpp_models\/, $(shell ls examples\/cpp_models))$/;"	m
CPT	despot/include/despot/pomdpx/parser/function.h	/^class CPT: public Function { \/\/ Conditional Probability Table$/;"	c	namespace:despot
CStr	despot/include/despot/util/tinyxml/tinyxml.h	/^	const char* CStr() {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
CXX	despot/Makefile	/^CXX = g++$/;"	m
CXX	despot/examples/cpp_models/adventurer/Makefile	/^CXX = g++$/;"	m
CXX	despot/examples/cpp_models/bridge/Makefile	/^CXX = g++$/;"	m
CXX	despot/examples/cpp_models/chain/Makefile	/^CXX = g++$/;"	m
CXX	despot/examples/cpp_models/localnavigation/Makefile	/^CXX = g++$/;"	m
CXX	despot/examples/cpp_models/navigation/Makefile	/^CXX = g++$/;"	m
CXX	despot/examples/cpp_models/pathfollowing/Makefile	/^CXX = g++$/;"	m
CXX	despot/examples/cpp_models/pocman/Makefile	/^CXX = g++$/;"	m
CXX	despot/examples/cpp_models/reg_demo/Makefile	/^CXX = g++$/;"	m
CXX	despot/examples/cpp_models/rock_sample/Makefile	/^CXX = g++$/;"	m
CXX	despot/examples/cpp_models/simpleNavi/Makefile	/^CXX = g++$/;"	m
CXX	despot/examples/cpp_models/simple_rock_sample/Makefile	/^CXX = g++$/;"	m
CXX	despot/examples/cpp_models/tag/Makefile	/^CXX = g++$/;"	m
CXX	despot/examples/cpp_models/tiger/Makefile	/^CXX = g++$/;"	m
CXX	despot/examples/pomdpx_models/Makefile	/^CXX = g++$/;"	m
CXXFLAGS	despot/Makefile	/^CXXFLAGS = -O3 -c -Wall -Wno-sign-compare -fpic $(INCL) $(GPROF)$/;"	m
Camera_angle	villa_navi_service/include/navi_service_node.h	/^	double Camera_angle;$/;"	m	class:villa_navi_srv
CellNum2Coord	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::CellNum2Coord(const int Cell_idx, vector<int>& cell_xy)$/;"	f	class:Dynamic_Manager
CellNum2Coord	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::CellNum2Coord(const int Cell_idx, vector<int>& cell_xy)$/;"	f	class:MDPManager
CellNum2globalCoord	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::CellNum2globalCoord(const int Cell_idx, std::vector<double>& cell_xy)$/;"	f	class:Dynamic_Manager
Cell_Info	navi_mdp/include/MapParam.h	/^	std::vector<int>    Cell_Info;$/;"	m	class:MapParam
Chain	despot/examples/cpp_models/chain/src/chain.cpp	/^Chain::Chain() {$/;"	f	class:despot::Chain
Chain	despot/examples/cpp_models/chain/src/chain.cpp	/^Chain::Chain(string fn) {$/;"	f	class:despot::Chain
Chain	despot/examples/cpp_models/chain/src/chain.h	/^class Chain: public DSPOMDP {$/;"	c	namespace:despot
ChainState	despot/examples/cpp_models/chain/src/chain.cpp	/^ChainState::ChainState() :$/;"	f	class:despot::ChainState
ChainState	despot/examples/cpp_models/chain/src/chain.h	/^class ChainState: public State {$/;"	c	namespace:despot
Check	despot/src/pomdpx/parser/parser.cpp	/^void Parser::Check() {$/;"	f	class:despot::Parser
CheckAllPedCollision	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^bool Navigation::CheckAllPedCollision(const NavigationState& navstate, const Coord& pos) const {$/;"	f	class:despot::Navigation
CheckArg	despot/include/despot/util/optionparser.h	/^typedef ArgStatus (*CheckArg)(const Option& option, bool msg);$/;"	t	namespace:despot::option
CheckDESPOT	despot/src/solver/despot.cpp	/^double DESPOT::CheckDESPOT(const VNode* vnode, double regularized_value) {$/;"	f	class:despot::DESPOT
CheckDESPOTSTAR	despot/src/solver/despot.cpp	/^double DESPOT::CheckDESPOTSTAR(const VNode* vnode, double regularized_value) {$/;"	f	class:despot::DESPOT
CheckFlag	despot/include/despot/util/util.h	/^inline bool CheckFlag(int flags, int bit) {$/;"	f	namespace:despot
CheckPedCollision	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^bool Navigation::CheckPedCollision(NavigationState& navstate, int g ,int step_col) const {$/;"	f	class:despot::Navigation
CheckPosCollision	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^bool Navigation::CheckPosCollision(const Coord& currentPos, NavigationState& navstate, int step_col) const$/;"	f	class:despot::Navigation
Child	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlHandle Child( const std::string& _value, int index ) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
Child	despot/src/core/node.cpp	/^QNode* VNode::Child(int action) {$/;"	f	class:despot::VNode
Child	despot/src/core/node.cpp	/^VNode* QNode::Child(OBS_TYPE obs) {$/;"	f	class:despot::QNode
Child	despot/src/core/node.cpp	/^const QNode* VNode::Child(int action) const {$/;"	f	class:despot::VNode
Child	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child(const char* value, int count) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
Child	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child(int count) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
ChildElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlHandle ChildElement( const std::string& _value, int index ) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
ChildElement	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement(const char* value, int count) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
ChildElement	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement(int count) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
ChildSize	despot/src/pomdpx/parser/function.cpp	/^int Function::ChildSize() const {$/;"	f	class:despot::Function
Chunk	despot/include/despot/util/memorypool.h	/^	struct Chunk {$/;"	s	class:despot::MemoryPool
Clear	despot/include/despot/util/tinyxml/tinyxml.h	/^	void Clear() {$/;"	f	struct:despot::util::tinyxml::TiXmlCursor
Clear	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlNode::Clear() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ClearAllocated	despot/include/despot/util/memorypool.h	/^	void ClearAllocated() {$/;"	f	class:despot::MemoryObject
ClearError	despot/include/despot/util/tinyxml/tinyxml.h	/^	void ClearError() {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
ClearThis	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::ClearThis() {$/;"	f	class:despot::util::tinyxml::TiXmlElement
ClickedPointCallback	navi_mdp/src/base_conti_actionlib.cpp	/^void ClickedPointCallback(const geometry_msgs::PointStamped::ConstPtr& msg)$/;"	f
Client	despot/include/despot/ippc/client.h	/^class Client {$/;"	c	namespace:despot
Client	despot/src/ippc/client.cpp	/^Client::Client(void) {$/;"	f	class:despot::Client
Client	navi_mdp/include/PathManager.h	/^ typedef actionlib::SimpleActionClient<control_msgs::FollowJointTrajectoryAction> Client;$/;"	t
Client	navi_mdp/src/base_actionlib.cpp	/^typedef actionlib::SimpleActionClient<control_msgs::FollowJointTrajectoryAction> Client;$/;"	t	file:
Client	navi_mdp/src/base_conti_actionlib.cpp	/^typedef actionlib::SimpleActionClient<control_msgs::FollowJointTrajectoryAction> Client;$/;"	t	file:
ClikedpointCallback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::ClikedpointCallback(const geometry_msgs::PointStamped::ConstPtr& msg)$/;"	f	class:Dynamic_Manager
ClikedpointCallback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::ClikedpointCallback(const geometry_msgs::PointStamped::ConstPtr& msg)$/;"	f	class:MDPManager
Clone	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlComment::Clone() const {$/;"	f	class:despot::util::tinyxml::TiXmlComment
Clone	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlDeclaration::Clone() const {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
Clone	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlDocument::Clone() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
Clone	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlElement::Clone() const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
Clone	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlText::Clone() const {$/;"	f	class:despot::util::tinyxml::TiXmlText
Clone	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlUnknown::Clone() const {$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
Clone	human_filter/src/gaussian_pos_vel.cpp	/^GaussianPosVel* GaussianPosVel::Clone() const$/;"	f	class:BFL::GaussianPosVel
Clone	human_filter/src/gaussian_vector.cpp	/^GaussianVector::Clone() const$/;"	f	class:BFL::GaussianVector
Clone	human_filter/src/uniform_vector.cpp	/^UniformVector* UniformVector::Clone() const$/;"	f	class:BFL::UniformVector
CmdIntCallback	navi_mdp/src/dynamic_planner.cpp	/^void CmdIntCallback(const std_msgs::Int8::ConstPtr& msg)$/;"	f
Column	despot/include/despot/util/tinyxml/tinyxml.h	/^	int Column() const {$/;"	f	class:despot::util::tinyxml::TiXmlBase
Compare	despot/src/solver/despot.cpp	/^void DESPOT::Compare() {$/;"	f	class:despot::DESPOT
CompareFirst	despot/include/despot/util/util.h	/^bool CompareFirst(std::pair<K, V> p1, std::pair<K, V> p2) {$/;"	f	namespace:despot
CompareSecond	despot/include/despot/util/util.h	/^bool CompareSecond(std::pair<K, V> p1, std::pair<K, V> p2) {$/;"	f	namespace:despot
Comparetwopoistions	human_filter/src/edge_leg_filter_node.cpp	/^bool Edgeleg_manager::Comparetwopoistions(std::vector<double> pos,std::vector<double> pos2, double criterion)$/;"	f	class:Edgeleg_manager
Comparetwopoistions	human_filter/src/followme_action.cpp	/^bool Edgeleg_manager_action::Comparetwopoistions(std::vector<double> pos,std::vector<double> pos2, double criterion)$/;"	f	class:Edgeleg_manager_action
Comparetwopoistions	human_filter/src/service_test.cpp	/^bool Edgeleg_manager_srv::Comparetwopoistions(std::vector<double> pos,std::vector<double> pos2, double criterion)$/;"	f	class:Edgeleg_manager_srv
Comparetwopoistions	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::Comparetwopoistions(std::vector<double> pos,std::vector<double> pos2, double criterion)$/;"	f	class:Dynamic_Manager
Comparetwopoistions	navi_mdp/src/MDPmanager.cpp	/^bool MDPManager::Comparetwopoistions(std::vector<double> pos,std::vector<double> pos2, double criterion)$/;"	f	class:MDPManager
Compass	despot/include/despot/util/coord.h	/^struct Compass {$/;"	s	namespace:despot
CompassString	despot/include/despot/util/coord.h	/^	static const std::string CompassString[];$/;"	m	struct:despot::Compass
CompassString	despot/src/util/coord.cpp	/^const string Compass::CompassString[] = { "South", "East", "North", "West",$/;"	m	class:despot::Compass	file:
ComputeActionValue	despot/src/core/mdp.cpp	/^double MDP::ComputeActionValue(const ParticleBelief* belief,$/;"	f	class:despot::MDP
ComputeBlindAlpha	despot/src/core/mdp.cpp	/^void MDP::ComputeBlindAlpha() {$/;"	f	class:despot::MDP
ComputeConstrainedMaximum	despot/include/despot/pomdpx/parser/function.h	/^	inline virtual double ComputeConstrainedMaximum(const NamedVar* var,$/;"	f	class:despot::HierarchyCPT
ComputeConstrainedMaximum	despot/src/pomdpx/parser/function.cpp	/^double Function::ComputeConstrainedMaximum(const NamedVar* var,$/;"	f	class:despot::Function
ComputeConstrainedMinimum	despot/include/despot/pomdpx/parser/function.h	/^	inline virtual double ComputeConstrainedMinimum(const NamedVar* var,$/;"	f	class:despot::HierarchyCPT
ComputeConstrainedMinimum	despot/src/pomdpx/parser/function.cpp	/^double Function::ComputeConstrainedMinimum(const NamedVar* var,$/;"	f	class:despot::Function
ComputeCurrentIndex	despot/src/pomdpx/parser/function.cpp	/^int HierarchyCPT::ComputeCurrentIndex(double& sum) const {$/;"	f	class:despot::HierarchyCPT
ComputeCurrentIndex	despot/src/pomdpx/parser/function.cpp	/^int TabularCPT::ComputeCurrentIndex(double& sum) const {$/;"	f	class:despot::TabularCPT
ComputeCurrentIndex	despot/src/pomdpx/parser/variable.cpp	/^int Variable::ComputeCurrentIndex(const vector<NamedVar*>& vars) {$/;"	f	class:despot::Variable
ComputeCurrentIndex	despot/src/pomdpx/parser/variable.cpp	/^int Variable::ComputeCurrentIndex(const vector<Variable*>& vars) {$/;"	f	class:despot::Variable
ComputeDefaultActions	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::ComputeDefaultActions(string type) {$/;"	f	class:despot::Adventurer
ComputeDefaultActions	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::ComputeDefaultActions(string type) {$/;"	f	class:despot::Navigation
ComputeDefaultActions	despot/examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::ComputeDefaultActions(string type) {$/;"	f	class:despot::Navigation
ComputeDefaultActions	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::ComputeDefaultActions(string type) {$/;"	f	class:despot::Navigation
ComputeDefaultActions	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::ComputeDefaultActions(string type) const {$/;"	f	class:despot::RegDemo
ComputeDefaultActions	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^void BaseTag::ComputeDefaultActions(string type) const {$/;"	f	class:despot::BaseTag
ComputeDefaultActions	despot/src/pomdpx/pomdpx.cpp	/^void POMDPX::ComputeDefaultActions(string type) const {$/;"	f	class:despot::POMDPX
ComputeDistances	despot/src/util/floor.cpp	/^vector<double> Floor::ComputeDistances(int source) {$/;"	f	class:despot::Floor
ComputeDistances	despot/src/util/floor.cpp	/^void Floor::ComputeDistances() {$/;"	f	class:despot::Floor
ComputeIndex	despot/include/despot/pomdpx/parser/function.h	/^	virtual int ComputeIndex(int pid, double& sum) const {$/;"	f	class:despot::HierarchyCPT
ComputeIndex	despot/src/pomdpx/parser/function.cpp	/^int TabularCPT::ComputeIndex(int pid, double& sum) const {$/;"	f	class:despot::TabularCPT
ComputeIndex	despot/src/pomdpx/parser/parser.cpp	/^int Parser::ComputeIndex(const vector<int>& state) const {$/;"	f	class:despot::Parser
ComputeIndexVec	despot/src/pomdpx/parser/variable.cpp	/^vector<int> Variable::ComputeIndexVec(const vector<NamedVar*>& vars,$/;"	f	class:despot::Variable
ComputeIndexVec	despot/src/pomdpx/parser/variable.cpp	/^vector<int> Variable::ComputeIndexVec(const vector<StateVar*>& vars,$/;"	f	class:despot::Variable
ComputeIndexVec	despot/src/pomdpx/parser/variable.cpp	/^vector<int> Variable::ComputeIndexVec(const vector<Variable*>& vars,$/;"	f	class:despot::Variable
ComputeMaxRewardAction	despot/src/pomdpx/parser/parser.cpp	/^ValuedAction Parser::ComputeMaxRewardAction() const {$/;"	f	class:despot::Parser
ComputeMinRewardAction	despot/src/pomdpx/parser/parser.cpp	/^ValuedAction Parser::ComputeMinRewardAction() const {$/;"	f	class:despot::Parser
ComputeMode	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	State ComputeMode(Belief* belief) const {$/;"	f	class:despot::TagHistoryModePolicy
ComputeNumOfEntries	despot/src/pomdpx/parser/parser.cpp	/^int Parser::ComputeNumOfEntries(const vector<string>& instance,$/;"	f	class:despot::Parser
ComputeOptimalPolicyUsingVI	despot/src/core/mdp.cpp	/^void MDP::ComputeOptimalPolicyUsingVI() {$/;"	f	class:despot::MDP
ComputeOptimalSamplingPolicy	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^vector<ValuedAction>& BaseRockSample::ComputeOptimalSamplingPolicy() const {$/;"	f	class:despot::BaseRockSample
ComputeOptimalValue	despot/examples/cpp_models/chain/src/chain.cpp	/^void Chain::ComputeOptimalValue(ChainState& state) const {$/;"	f	class:despot::Chain
ComputePreference	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^	void ComputePreference(const State& state) {$/;"	f	class:despot::AdventurerPOMCPPrior
ComputePreference	despot/examples/cpp_models/bridge/src/bridge.cpp	/^	void ComputePreference(const State& state) {$/;"	f	class:despot::BridgePOMCPPrior
ComputePreference	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	void ComputePreference(const State& state) {$/;"	f	class:despot::LocalNaviPOMCPPrior
ComputePreference	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	void ComputePreference(const State& state) {$/;"	f	class:despot::LocalNaviPOMCPPrior
ComputePreference	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	void ComputePreference(const State& state) {$/;"	f	class:despot::PocmanPOMCPPrior
ComputePreference	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	void ComputePreference(const State& state) {$/;"	f	class:despot::RockSamplePOMCPPrior
ComputePreference	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	void ComputePreference(const State& state) {$/;"	f	class:despot::TagPOMCPPrior
ComputePreference	despot/src/solver/pomcp.cpp	/^void UniformPOMCPPrior::ComputePreference(const State& state) {$/;"	f	class:despot::UniformPOMCPPrior
ComputeShortestPath	despot/src/util/floor.cpp	/^vector<int> Floor::ComputeShortestPath(int start, int end) const {$/;"	f	class:despot::Floor
ComputeSparseChildDistribution	despot/src/pomdpx/parser/function.cpp	/^void HierarchyCPT::ComputeSparseChildDistribution() {$/;"	f	class:despot::HierarchyCPT
ComputeSparseChildDistribution	despot/src/pomdpx/parser/function.cpp	/^void TabularCPT::ComputeSparseChildDistribution() {$/;"	f	class:despot::TabularCPT
ComputeState	despot/src/pomdpx/parser/parser.cpp	/^vector<int> Parser::ComputeState(double random) const {$/;"	f	class:despot::Parser
ComputeState	despot/src/pomdpx/parser/parser.cpp	/^vector<int> Parser::ComputeState(int index) const {$/;"	f	class:despot::Parser
ComputeTopTransitions	despot/src/pomdpx/parser/parser.cpp	/^vector<pair<vector<int>, double> > Parser::ComputeTopTransitions($/;"	f	class:despot::Parser
Config	despot/include/despot/config.h	/^	Config() :$/;"	f	struct:despot::Config
Config	despot/include/despot/config.h	/^struct Config {$/;"	s	namespace:despot
Construct	despot/include/despot/util/memorypool.h	/^	T* Construct() {$/;"	f	class:despot::MemoryPool
ConstructTree	despot/src/solver/despot.cpp	/^VNode* DESPOT::ConstructTree(vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::DESPOT
ConstructTree	despot/src/solver/pomcp.cpp	/^VNode* DPOMCP::ConstructTree(vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::DPOMCP
ConvertUTF32ToUTF8	despot/src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlBase::ConvertUTF32ToUTF8(unsigned long input, char* output,$/;"	f	class:despot::util::tinyxml::TiXmlBase
Coord	despot/include/despot/util/coord.h	/^struct Coord {$/;"	s	namespace:despot
Coord	despot/src/util/coord.cpp	/^Coord::Coord() :$/;"	f	class:despot::Coord
Coord	despot/src/util/coord.cpp	/^Coord::Coord(int _x, int _y) :$/;"	f	class:despot::Coord
Coord2CellNum	navi_mdp/src/Dynamic_Manager.cpp	/^int  Dynamic_Manager::Coord2CellNum(std::vector<int> cell_xy)$/;"	f	class:Dynamic_Manager
Coord2CellNum	navi_mdp/src/MDPmanager.cpp	/^int  MDPManager::Coord2CellNum(std::vector<int> cell_xy)$/;"	f	class:MDPManager
CoordToIndex	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^int BaseRockSample::CoordToIndex(Coord c) const {$/;"	f	class:despot::BaseRockSample
CoordinateTansform_Rviz_Dyn_map	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::CoordinateTansform_Rviz_Dyn_map(double _x, double _y,vector<int>& dynamicCoord)$/;"	f	class:Dynamic_Manager
CoordinateTransform_Global2_beliefMap	navi_mdp/src/Dynamic_Manager.cpp	/^int Dynamic_Manager::CoordinateTransform_Global2_beliefMap(double global_x, double global_y)$/;"	f	class:Dynamic_Manager
CoordinateTransform_Global2_cameraMap	navi_mdp/src/Dynamic_Manager.cpp	/^int Dynamic_Manager::CoordinateTransform_Global2_cameraMap(float global_x, float global_y)$/;"	f	class:Dynamic_Manager
CoordinateTransform_Global2_staticMap	human_filter/src/edge_leg_filter_node.cpp	/^int Edgeleg_manager::CoordinateTransform_Global2_staticMap(float global_x, float global_y)$/;"	f	class:Edgeleg_manager
CoordinateTransform_Global2_staticMap	human_filter/src/followme_action.cpp	/^int Edgeleg_manager_action::CoordinateTransform_Global2_staticMap(float global_x, float global_y)$/;"	f	class:Edgeleg_manager_action
CoordinateTransform_Global2_staticMap	human_filter/src/service_test.cpp	/^int Edgeleg_manager_srv::CoordinateTransform_Global2_staticMap(float global_x, float global_y)$/;"	f	class:Edgeleg_manager_srv
CoordinateTransform_Rviz_Grid_Goal	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::CoordinateTransform_Rviz_Grid_Goal(double _x, double _y,int map_type=0)$/;"	f	class:Dynamic_Manager
CoordinateTransform_Rviz_Grid_Goal	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::CoordinateTransform_Rviz_Grid_Goal(double _x, double _y,int map_type=0)$/;"	f	class:MDPManager
CoordinateTransform_Rviz_Grid_Human	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::CoordinateTransform_Rviz_Grid_Human(double _x, double _y,int map_type=0)$/;"	f	class:Dynamic_Manager
CoordinateTransform_Rviz_Grid_Human	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::CoordinateTransform_Rviz_Grid_Human(double _x, double _y,int map_type=0)$/;"	f	class:MDPManager
CoordinateTransform_Rviz_Grid_Start	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::CoordinateTransform_Rviz_Grid_Start(double _x, double _y,int map_type=0)$/;"	f	class:Dynamic_Manager
CoordinateTransform_Rviz_Grid_Start	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::CoordinateTransform_Rviz_Grid_Start(double _x, double _y,int map_type=0)$/;"	f	class:MDPManager
Copy	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^State* Adventurer::Copy(const State* particle) const {$/;"	f	class:despot::Adventurer
Copy	despot/examples/cpp_models/bridge/src/bridge.cpp	/^State* Bridge::Copy(const State* particle) const {$/;"	f	class:despot::Bridge
Copy	despot/examples/cpp_models/chain/src/chain.cpp	/^State* Chain::Copy(const State* particle) const {$/;"	f	class:despot::Chain
Copy	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^State* Navigation::Copy(const State* particle) const {$/;"	f	class:despot::Navigation
Copy	despot/examples/cpp_models/navigation/src/navigation.cpp	/^State* Navigation::Copy(const State* particle) const {$/;"	f	class:despot::Navigation
Copy	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^State* Navigation::Copy(const State* particle) const {$/;"	f	class:despot::Navigation
Copy	despot/examples/cpp_models/pocman/src/pocman.cpp	/^State* Pocman::Copy(const State* particle) const {$/;"	f	class:despot::Pocman
Copy	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^State* RegDemo::Copy(const State* particle) const {$/;"	f	class:despot::RegDemo
Copy	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^State* BaseRockSample::Copy(const State* particle) const {$/;"	f	class:despot::BaseRockSample
Copy	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^State* SimpleNavi::Copy(const State* particle) const {$/;"	f	class:despot::SimpleNavi
Copy	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^State* SimpleRockSample::Copy(const State* particle) const {$/;"	f	class:despot::SimpleRockSample
Copy	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^State* BaseTag::Copy(const State* particle) const {$/;"	f	class:despot::BaseTag
Copy	despot/examples/cpp_models/tiger/src/tiger.cpp	/^State* Tiger::Copy(const State* particle) const {$/;"	f	class:despot::Tiger
Copy	despot/src/core/pomdp.cpp	/^vector<State*> DSPOMDP::Copy(const vector<State*>& particles) const {$/;"	f	class:despot::DSPOMDP
Copy	despot/src/pomdpx/pomdpx.cpp	/^State* POMDPX::Copy(const State* particle) const {$/;"	f	class:despot::POMDPX
CopyTo	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlComment::CopyTo(TiXmlComment* target) const {$/;"	f	class:despot::util::tinyxml::TiXmlComment
CopyTo	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlDeclaration::CopyTo(TiXmlDeclaration* target) const {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
CopyTo	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlDocument::CopyTo(TiXmlDocument* target) const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
CopyTo	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::CopyTo(TiXmlElement* target) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
CopyTo	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlNode::CopyTo(TiXmlNode* target) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
CopyTo	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlText::CopyTo(TiXmlText* target) const {$/;"	f	class:despot::util::tinyxml::TiXmlText
CopyTo	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlUnknown::CopyTo(TiXmlUnknown* target) const {$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
Costmap_Pub	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	ros::Publisher   Costmap_Pub;$/;"	m	class:despot::Navigation
Costmap_Pub	despot/examples/cpp_models/navigation/src/navigation.h	/^	ros::Publisher   Costmap_Pub;$/;"	m	class:despot::Navigation
Costmap_Pub	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	ros::Publisher   Costmap_Pub;$/;"	m	class:despot::Navigation
Count	despot/src/solver/pomcp.cpp	/^int POMCP::Count(const VNode* vnode) {$/;"	f	class:despot::POMCP
CountOptionsAction	despot/include/despot/util/optionparser.h	/^	CountOptionsAction(unsigned* buffer_max_) :$/;"	f	class:despot::option::Stats::CountOptionsAction
CountOptionsAction	despot/include/despot/util/optionparser.h	/^class Stats::CountOptionsAction: public Parser::Action {$/;"	c	class:despot::option::Stats
CountRound	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	int CountRound(){round_num++; return round_num;}$/;"	f	class:despot::Navigation
CovarianceGet	human_filter/src/gaussian_pos_vel.cpp	/^GaussianPosVel::CovarianceGet() const$/;"	f	class:BFL::GaussianPosVel
CovarianceGet	human_filter/src/gaussian_vector.cpp	/^GaussianVector::CovarianceGet() const$/;"	f	class:BFL::GaussianVector
CovarianceGet	human_filter/src/measmodel_pos.cpp	/^MeasPdfPos::CovarianceGet() const$/;"	f	class:MeasPdfPos
CovarianceGet	human_filter/src/measmodel_vector.cpp	/^MeasPdfVector::CovarianceGet() const$/;"	f	class:MeasPdfVector
CovarianceGet	human_filter/src/sysmodel_pos_vel.cpp	/^SysPdfPosVel::CovarianceGet() const$/;"	f	class:SysPdfPosVel
CovarianceGet	human_filter/src/sysmodel_vector.cpp	/^SysPdfVector::CovarianceGet() const$/;"	f	class:SysPdfVector
CovarianceGet	human_filter/src/uniform_vector.cpp	/^UniformVector::CovarianceGet() const$/;"	f	class:BFL::UniformVector
CovarianceSet	human_filter/src/measmodel_pos.cpp	/^MeasPdfPos::CovarianceSet(const MatrixWrapper::SymmetricMatrix& cov)$/;"	f	class:MeasPdfPos
CovarianceSet	human_filter/src/measmodel_vector.cpp	/^MeasPdfVector::CovarianceSet(const MatrixWrapper::SymmetricMatrix& cov)$/;"	f	class:MeasPdfVector
CreateActionVar	despot/src/pomdpx/parser/parser.cpp	/^ActionVar Parser::CreateActionVar(TiXmlElement* e_ActionVar) {$/;"	f	class:despot::Parser
CreateBeliefLowerBound	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^BeliefLowerBound* BaseRockSample::CreateBeliefLowerBound(string name) const {$/;"	f	class:despot::BaseRockSample
CreateBeliefLowerBound	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^BeliefLowerBound* BaseTag::CreateBeliefLowerBound(string name) const {$/;"	f	class:despot::BaseTag
CreateBeliefLowerBound	despot/src/core/pomdp.cpp	/^BeliefLowerBound* BeliefMDP::CreateBeliefLowerBound(string name) const {$/;"	f	class:despot::BeliefMDP
CreateBeliefUpperBound	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^BeliefUpperBound* BaseRockSample::CreateBeliefUpperBound(string name) const {$/;"	f	class:despot::BaseRockSample
CreateBeliefUpperBound	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^BeliefUpperBound* BaseTag::CreateBeliefUpperBound(string name) const {$/;"	f	class:despot::BaseTag
CreateBeliefUpperBound	despot/src/core/pomdp.cpp	/^BeliefUpperBound* BeliefMDP::CreateBeliefUpperBound(string name) const {$/;"	f	class:despot::BeliefMDP
CreateHierarchyObsFunction	despot/src/pomdpx/parser/parser.cpp	/^HierarchyCPT* Parser::CreateHierarchyObsFunction(TiXmlElement* e_CondProb) {$/;"	f	class:despot::Parser
CreateHierarchyStateTransition	despot/src/pomdpx/parser/parser.cpp	/^HierarchyCPT* Parser::CreateHierarchyStateTransition(TiXmlElement* e_CondProb) {$/;"	f	class:despot::Parser
CreateInitialBelief	despot/src/pomdpx/parser/parser.cpp	/^TabularCPT Parser::CreateInitialBelief(TiXmlElement* e_CondProb) {$/;"	f	class:despot::Parser
CreateNoisyVariant	despot/src/pomdpx/parser/function.cpp	/^CPT* HierarchyCPT::CreateNoisyVariant(double noise) const {$/;"	f	class:despot::HierarchyCPT
CreateNoisyVariant	despot/src/pomdpx/parser/function.cpp	/^CPT* TabularCPT::CreateNoisyVariant(double noise) const {$/;"	f	class:despot::TabularCPT
CreateObsFunction	despot/src/pomdpx/parser/parser.cpp	/^CPT* Parser::CreateObsFunction(TiXmlElement* e_CondProb) {$/;"	f	class:despot::Parser
CreateObsVar	despot/src/pomdpx/parser/parser.cpp	/^ObsVar Parser::CreateObsVar(TiXmlElement* e_ObsVar) {$/;"	f	class:despot::Parser
CreatePOMCPPrior	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^POMCPPrior* Adventurer::CreatePOMCPPrior(string name) const {$/;"	f	class:despot::Adventurer
CreatePOMCPPrior	despot/examples/cpp_models/bridge/src/bridge.cpp	/^POMCPPrior* Bridge::CreatePOMCPPrior(string name) const {$/;"	f	class:despot::Bridge
CreatePOMCPPrior	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^POMCPPrior* Navigation::CreatePOMCPPrior(string name) const {$/;"	f	class:despot::Navigation
CreatePOMCPPrior	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^POMCPPrior* Navigation::CreatePOMCPPrior(string name) const {$/;"	f	class:despot::Navigation
CreatePOMCPPrior	despot/examples/cpp_models/pocman/src/pocman.cpp	/^POMCPPrior* Pocman::CreatePOMCPPrior(string name) const {$/;"	f	class:despot::Pocman
CreatePOMCPPrior	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^POMCPPrior* BaseRockSample::CreatePOMCPPrior(string name) const {$/;"	f	class:despot::BaseRockSample
CreatePOMCPPrior	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^POMCPPrior* BaseTag::CreatePOMCPPrior(string name) const {$/;"	f	class:despot::BaseTag
CreatePOMCPPrior	despot/src/core/pomdp.cpp	/^POMCPPrior* DSPOMDP::CreatePOMCPPrior(string name) const {$/;"	f	class:despot::DSPOMDP
CreateParticleLowerBound	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^ParticleLowerBound* Navigation::CreateParticleLowerBound(string name) const {$/;"	f	class:despot::Navigation
CreateParticleLowerBound	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^ParticleLowerBound* Navigation::CreateParticleLowerBound(string name) const {$/;"	f	class:despot::Navigation
CreateParticleLowerBound	despot/examples/cpp_models/pocman/src/pocman.cpp	/^ParticleLowerBound* Pocman::CreateParticleLowerBound(string name) const {$/;"	f	class:despot::Pocman
CreateParticleLowerBound	despot/src/core/pomdp.cpp	/^ParticleLowerBound* DSPOMDP::CreateParticleLowerBound(string name) const {$/;"	f	class:despot::DSPOMDP
CreateParticleUpperBound	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^ParticleUpperBound* Adventurer::CreateParticleUpperBound(string name) const {$/;"	f	class:despot::Adventurer
CreateParticleUpperBound	despot/examples/cpp_models/navigation/src/navigation.cpp	/^ParticleUpperBound* Navigation::CreateParticleUpperBound(string name) const {$/;"	f	class:despot::Navigation
CreateParticleUpperBound	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^ParticleUpperBound* BaseTag::CreateParticleUpperBound(string name) const {$/;"	f	class:despot::BaseTag
CreateParticleUpperBound	despot/src/core/pomdp.cpp	/^ParticleUpperBound* DSPOMDP::CreateParticleUpperBound(string name) const {$/;"	f	class:despot::DSPOMDP
CreateParticleUpperBound	despot/src/pomdpx/pomdpx.cpp	/^ParticleUpperBound* POMDPX::CreateParticleUpperBound(string name) const {$/;"	f	class:despot::POMDPX
CreateRewardFunction	despot/src/pomdpx/parser/parser.cpp	/^Function Parser::CreateRewardFunction(TiXmlElement* e_Func) {$/;"	f	class:despot::Parser
CreateRewardVar	despot/src/pomdpx/parser/parser.cpp	/^RewardVar Parser::CreateRewardVar(TiXmlElement* e_RewardVar) {$/;"	f	class:despot::Parser
CreateScenarioLowerBound	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^ScenarioLowerBound* Adventurer::CreateScenarioLowerBound(string name,$/;"	f	class:despot::Adventurer
CreateScenarioLowerBound	despot/examples/cpp_models/bridge/src/bridge.cpp	/^ScenarioLowerBound* Bridge::CreateScenarioLowerBound(string name,$/;"	f	class:despot::Bridge
CreateScenarioLowerBound	despot/examples/cpp_models/chain/src/chain.cpp	/^ScenarioLowerBound* Chain::CreateScenarioLowerBound(string name,$/;"	f	class:despot::Chain
CreateScenarioLowerBound	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^ScenarioLowerBound* Navigation::CreateScenarioLowerBound(string name,$/;"	f	class:despot::Navigation
CreateScenarioLowerBound	despot/examples/cpp_models/navigation/src/navigation.cpp	/^ScenarioLowerBound* Navigation::CreateScenarioLowerBound(string name,$/;"	f	class:despot::Navigation
CreateScenarioLowerBound	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^ScenarioLowerBound* Navigation::CreateScenarioLowerBound(string name,$/;"	f	class:despot::Navigation
CreateScenarioLowerBound	despot/examples/cpp_models/pocman/src/pocman.cpp	/^ScenarioLowerBound* Pocman::CreateScenarioLowerBound(string name,$/;"	f	class:despot::Pocman
CreateScenarioLowerBound	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^ScenarioLowerBound* RegDemo::CreateScenarioLowerBound(string name,$/;"	f	class:despot::RegDemo
CreateScenarioLowerBound	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^ScenarioLowerBound* BaseRockSample::CreateScenarioLowerBound(string name, string$/;"	f	class:despot::BaseRockSample
CreateScenarioLowerBound	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^ScenarioLowerBound* SimpleNavi::CreateScenarioLowerBound(string name,$/;"	f	class:despot::SimpleNavi
CreateScenarioLowerBound	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^ScenarioLowerBound* SimpleRockSample::CreateScenarioLowerBound(string name,$/;"	f	class:despot::SimpleRockSample
CreateScenarioLowerBound	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^ScenarioLowerBound* BaseTag::CreateScenarioLowerBound(string name, string$/;"	f	class:despot::BaseTag
CreateScenarioLowerBound	despot/examples/cpp_models/tiger/src/tiger.cpp	/^ScenarioLowerBound* Tiger::CreateScenarioLowerBound(string name,$/;"	f	class:despot::Tiger
CreateScenarioLowerBound	despot/src/core/pomdp.cpp	/^ScenarioLowerBound* DSPOMDP::CreateScenarioLowerBound(string name, string$/;"	f	class:despot::DSPOMDP
CreateScenarioLowerBound	despot/src/pomdpx/pomdpx.cpp	/^ScenarioLowerBound* POMDPX::CreateScenarioLowerBound(string name,$/;"	f	class:despot::POMDPX
CreateScenarioUpperBound	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^ScenarioUpperBound* Adventurer::CreateScenarioUpperBound(string name,$/;"	f	class:despot::Adventurer
CreateScenarioUpperBound	despot/examples/cpp_models/chain/src/chain.cpp	/^ScenarioUpperBound* Chain::CreateScenarioUpperBound(string name,$/;"	f	class:despot::Chain
CreateScenarioUpperBound	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^ScenarioUpperBound* Navigation::CreateScenarioUpperBound(string name,$/;"	f	class:despot::Navigation
CreateScenarioUpperBound	despot/examples/cpp_models/navigation/src/navigation.cpp	/^ScenarioUpperBound* Navigation::CreateScenarioUpperBound(string name,$/;"	f	class:despot::Navigation
CreateScenarioUpperBound	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^ScenarioUpperBound* Navigation::CreateScenarioUpperBound(string name,$/;"	f	class:despot::Navigation
CreateScenarioUpperBound	despot/examples/cpp_models/pocman/src/pocman.cpp	/^ScenarioUpperBound* Pocman::CreateScenarioUpperBound(string name,$/;"	f	class:despot::Pocman
CreateScenarioUpperBound	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^ScenarioUpperBound* RegDemo::CreateScenarioUpperBound(string name,$/;"	f	class:despot::RegDemo
CreateScenarioUpperBound	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^ScenarioUpperBound* BaseRockSample::CreateScenarioUpperBound(string name,$/;"	f	class:despot::BaseRockSample
CreateScenarioUpperBound	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^ScenarioUpperBound* SimpleNavi::CreateScenarioUpperBound(string name,$/;"	f	class:despot::SimpleNavi
CreateScenarioUpperBound	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^ScenarioUpperBound* SimpleRockSample::CreateScenarioUpperBound(string name,$/;"	f	class:despot::SimpleRockSample
CreateScenarioUpperBound	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^ScenarioUpperBound* BaseTag::CreateScenarioUpperBound(string name,$/;"	f	class:despot::BaseTag
CreateScenarioUpperBound	despot/src/core/pomdp.cpp	/^ScenarioUpperBound* DSPOMDP::CreateScenarioUpperBound(string name,$/;"	f	class:despot::DSPOMDP
CreateScenarioUpperBound	despot/src/pomdpx/pomdpx.cpp	/^ScenarioUpperBound* POMDPX::CreateScenarioUpperBound(string name,$/;"	f	class:despot::POMDPX
CreateStartState	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^State* Adventurer::CreateStartState(string type) const {$/;"	f	class:despot::Adventurer
CreateStartState	despot/examples/cpp_models/bridge/src/bridge.cpp	/^State* Bridge::CreateStartState(string type) const {$/;"	f	class:despot::Bridge
CreateStartState	despot/examples/cpp_models/chain/src/chain.cpp	/^State* Chain::CreateStartState(string type) const {$/;"	f	class:despot::Chain
CreateStartState	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^State* Navigation::CreateStartState(string type) const {$/;"	f	class:despot::Navigation
CreateStartState	despot/examples/cpp_models/navigation/src/navigation.cpp	/^State* Navigation::CreateStartState(string type) const {$/;"	f	class:despot::Navigation
CreateStartState	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^State* Navigation::CreateStartState(string type) const {$/;"	f	class:despot::Navigation
CreateStartState	despot/examples/cpp_models/pocman/src/pocman.cpp	/^State* Pocman::CreateStartState(string tyep) const {$/;"	f	class:despot::Pocman
CreateStartState	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^State* RegDemo::CreateStartState(string type) const {$/;"	f	class:despot::RegDemo
CreateStartState	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^State* BaseRockSample::CreateStartState(string type) const {$/;"	f	class:despot::BaseRockSample
CreateStartState	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^State* SimpleNavi::CreateStartState(string type) const {$/;"	f	class:despot::SimpleNavi
CreateStartState	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^State* SimpleRockSample::CreateStartState(string type) const {$/;"	f	class:despot::SimpleRockSample
CreateStartState	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^State* BaseTag::CreateStartState(string type) const {$/;"	f	class:despot::BaseTag
CreateStartState	despot/examples/cpp_models/tiger/src/tiger.cpp	/^State* Tiger::CreateStartState(string type) const {$/;"	f	class:despot::Tiger
CreateStartState	despot/src/pomdpx/pomdpx.cpp	/^State* POMDPX::CreateStartState(string type) const {$/;"	f	class:despot::POMDPX
CreateStateTransition	despot/src/pomdpx/parser/parser.cpp	/^CPT* Parser::CreateStateTransition(TiXmlElement* e_CondProb) {$/;"	f	class:despot::Parser
CreateStateUniformly	despot/src/pomdpx/parser/parser.cpp	/^vector<int> Parser::CreateStateUniformly() const {$/;"	f	class:despot::Parser
CreateStateVar	despot/src/pomdpx/parser/parser.cpp	/^StateVar Parser::CreateStateVar(TiXmlElement* e_StateVar) {$/;"	f	class:despot::Parser
CreateTabularObsFunction	despot/src/pomdpx/parser/parser.cpp	/^TabularCPT* Parser::CreateTabularObsFunction(TiXmlElement* e_CondProb) {$/;"	f	class:despot::Parser
CreateTabularStateTransition	despot/src/pomdpx/parser/parser.cpp	/^TabularCPT* Parser::CreateTabularStateTransition(TiXmlElement* e_CondProb) {$/;"	f	class:despot::Parser
CreateVNode	despot/src/solver/pomcp.cpp	/^VNode* POMCP::CreateVNode(int depth, const State* state, POMCPPrior* prior,$/;"	f	class:despot::POMCP
CubicSplineInterpolation	navi_mdp/src/srBSpline.cpp	/^void srBSpline::CubicSplineInterpolation( std::vector<double>& t,std::vector<double>& Q, int NumData )$/;"	f	class:srBSpline
CubicSplineInterpolation	navi_mdp/src/srBSpline.cpp	/^void srBSpline::CubicSplineInterpolation(double* t,double* Q, int NumData )$/;"	f	class:srBSpline
CubicSplineInterpolationwithecontinuity	navi_mdp/src/srBSpline.cpp	/^void srBSpline::CubicSplineInterpolationwithecontinuity( srBSpline* prev_spline,std::vector<double>& t,std::vector<double>& Q, int NumData )$/;"	f	class:srBSpline
CubicSplineInterpolationwithecontinuity	navi_mdp/src/srBSpline.cpp	/^void srBSpline::CubicSplineInterpolationwithecontinuity(srBSpline* prev_spline,double* t,double* Q, int NumData )$/;"	f	class:srBSpline
CubicSurfaceInterpolation	navi_mdp/src/srBSpline.cpp	/^void srBSpline::CubicSurfaceInterpolation( std::vector<double>& t,std::vector<std::vector<double>>& Q,std::vector<double>& t2,std::vector<double>& W, int NumData_Q , int NumData_W )$/;"	f	class:srBSpline
CurVector	navi_mdp/include/Dynamic_Manager.h	/^	std::vector<double> CurVector;$/;"	m	class:Dynamic_Manager
CurVector	navi_mdp/include/MDPmanager.h	/^	std::vector<double> CurVector;$/;"	m	class:MDPManager
Cur_detected_human	villa_navi_service/include/navi_service_node.h	/^	std::vector< std::vector< double > > Cur_detected_human;$/;"	m	class:villa_navi_srv
Cur_existed_human	navi_mdp/include/Dynamic_Manager.h	/^    std::vector< std::vector< double > > Cur_existed_human;$/;"	m	class:Dynamic_Manager
Cur_existed_human	villa_navi_service/include/navi_service_node.h	/^	std::vector< std::vector< double > > Cur_existed_human;$/;"	m	class:villa_navi_srv
Cur_leg_human	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  std::vector< std::vector< double > > Cur_leg_human;$/;"	m	class:Edgeleg_manager
Cur_leg_human	human_filter/include/people_tracking_filter/followme_action.h	/^  std::vector< std::vector< double > > Cur_leg_human;$/;"	m	class:Edgeleg_manager_action
Cur_leg_human	human_filter/include/people_tracking_filter/service_test.h	/^  std::vector< std::vector< double > > Cur_leg_human;$/;"	m	class:Edgeleg_manager_srv
Cur_leg_human	navi_mdp/include/Dynamic_Manager.h	/^ 	std::vector< std::vector< double > > Cur_leg_human;$/;"	m	class:Dynamic_Manager
Cur_leg_human	navi_mdp/include/MDPmanager.h	/^ 	std::vector< std::vector< double > > Cur_leg_human;$/;"	m	class:MDPManager
Cur_leg_human	villa_navi_service/include/navi_service_node.h	/^	std::vector< std::vector< double > > Cur_leg_human;$/;"	m	class:villa_navi_srv
Cur_leg_yolo_human	villa_navi_service/include/navi_service_node.h	/^	std::vector< std::vector< double > > Cur_leg_yolo_human;$/;"	m	class:villa_navi_srv
Cursor	despot/src/util/tinyxml/tinyxmlparser.cpp	/^	const TiXmlCursor& Cursor() {$/;"	f	class:despot::util::tinyxml::TiXmlParsingData
CurveDerivCpts	navi_mdp/src/srBSpline.cpp	/^void srBSpline::CurveDerivCpts( OUT double** PK \/* PK[d+1][r2-r1+1] *\/$/;"	f	class:srBSpline
CurveDerivsAlg1	navi_mdp/src/srBSpline.cpp	/^bool srBSpline::CurveDerivsAlg1( OUT double* CK, double u, int d )$/;"	f	class:srBSpline
CurveKnotsIns	navi_mdp/src/srBSpline.cpp	/^void srBSpline::CurveKnotsIns(double u, int r )$/;"	f	class:srBSpline
DEBUG	despot/include/despot/util/logging.h	/^	static const int NONE, ERROR, WARN, INFO, DEBUG, VERBOSE;$/;"	m	class:despot::logging
DEBUG	despot/include/despot/util/tinyxml/tinyxml.h	42;"	d
DEBUG	despot/src/util/logging.cpp	/^const int logging::DEBUG = 4;$/;"	m	class:despot::logging	file:
DECLARATION	despot/include/despot/util/tinyxml/tinyxml.h	/^		DOCUMENT, ELEMENT, COMMENT, UNKNOWN, TEXT, DECLARATION, TYPECOUNT$/;"	e	enum:despot::util::tinyxml::TiXmlNode::NodeType
DEG2RAD	navi_mdp/include/types.h	/^inline real_s DEG2RAD(double d){ return (d * SR_RADIAN); }$/;"	f
DEG2RAD	navi_mdp/include/types.h	/^inline real_s DEG2RAD(float d) { return (d * SR_RADIAN); }$/;"	f
DEG2RAD	navi_mdp/include/types.h	/^inline real_s DEG2RAD(int d)	 { return (d * SR_RADIAN); }$/;"	f
DEPDIR	despot/Makefile	/^DEPDIR = .deps$/;"	m
DEPS	despot/Makefile	/^DEPS = $(addprefix $(DEPDIR)\/, $(notdir $(SOURCES:.cpp=.d)))$/;"	m
DESPOT	despot/include/despot/solver/despot.h	/^class DESPOT: public Solver {$/;"	c	namespace:despot
DESPOT	despot/src/solver/despot.cpp	/^DESPOT::DESPOT(const DSPOMDP* model, ScenarioLowerBound* lb, ScenarioUpperBound* ub, Belief* belief) :$/;"	f	class:despot::DESPOT
DESPOTHOME	despot/examples/cpp_models/adventurer/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	despot/examples/cpp_models/bridge/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	despot/examples/cpp_models/chain/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	despot/examples/cpp_models/localnavigation/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	despot/examples/cpp_models/navigation/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	despot/examples/cpp_models/pathfollowing/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	despot/examples/cpp_models/pocman/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	despot/examples/cpp_models/reg_demo/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	despot/examples/cpp_models/rock_sample/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	despot/examples/cpp_models/simpleNavi/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	despot/examples/cpp_models/simple_rock_sample/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	despot/examples/cpp_models/tag/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	despot/examples/cpp_models/tiger/Makefile	/^DESPOTHOME = ..\/..\/..$/;"	m
DESPOTHOME	despot/examples/pomdpx_models/Makefile	/^DESPOTHOME = ..\/..$/;"	m
DESPOT_H	despot/include/despot/solver/despot.h	2;"	d
DESPOT_UTIL_TINYXML_INCLUDED	despot/include/despot/util/tinyxml/tinyxml.h	26;"	d
DIM_MEASMODEL_POS	human_filter/src/measmodel_pos.cpp	/^static const unsigned int DIM_MEASMODEL_POS             = 13;$/;"	v	file:
DIM_MEASMODEL_VECTOR	human_filter/src/measmodel_vector.cpp	/^static const unsigned int DIM_MEASMODEL_VECTOR            = 3;$/;"	v	file:
DIM_SYS_POS_VEL	human_filter/src/sysmodel_pos_vel.cpp	/^static const unsigned int DIM_SYS_POS_VEL           = 6;$/;"	v	file:
DIM_SYS_VECTOR	human_filter/src/sysmodel_vector.cpp	/^static const unsigned int DIM_SYS_VECTOR            = 3;$/;"	v	file:
DIRECTIONS	despot/include/despot/util/coord.h	/^	static const Coord DIRECTIONS[];$/;"	m	struct:despot::Compass
DIRECTIONS	despot/src/util/coord.cpp	/^const Coord Compass::DIRECTIONS[] = { Coord(0, 1), Coord(1, 0), Coord(0, -1),$/;"	m	class:despot::Compass	file:
DIRICHLET_H	despot/include/despot/util/dirichlet.h	2;"	d
DOCUMENT	despot/include/despot/util/tinyxml/tinyxml.h	/^		DOCUMENT, ELEMENT, COMMENT, UNKNOWN, TEXT, DECLARATION, TYPECOUNT$/;"	e	enum:despot::util::tinyxml::TiXmlNode::NodeType
DPOMCP	despot/include/despot/solver/pomcp.h	/^class DPOMCP: public POMCP {$/;"	c	namespace:despot
DPOMCP	despot/src/solver/pomcp.cpp	/^DPOMCP::DPOMCP(const DSPOMDP* model, POMCPPrior* prior, Belief* belief) :$/;"	f	class:despot::DPOMCP
DSPOMDP	despot/include/despot/core/pomdp.h	/^class DSPOMDP {$/;"	c	namespace:despot
DSPOMDP	despot/src/core/pomdp.cpp	/^DSPOMDP::DSPOMDP():m_Round_num(0),m_last_action(0) {$/;"	f	class:despot::DSPOMDP
DYN_OFFSET_X	navi_mdp/include/Dynamic_Manager.h	50;"	d
DYN_OFFSET_X	navi_mdp/include/MDPmanager.h	48;"	d
DYN_OFFSET_Y	navi_mdp/include/Dynamic_Manager.h	51;"	d
DYN_OFFSET_Y	navi_mdp/include/MDPmanager.h	49;"	d
DecX	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::DecX(State* state) const {$/;"	f	class:despot::BaseRockSample
DecY	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::DecY(State* state) const {$/;"	f	class:despot::BaseRockSample
DefaultStartState	despot/examples/cpp_models/chain/src/chain.cpp	/^State* Chain::DefaultStartState() const {$/;"	f	class:despot::Chain
DeleteAll	despot/include/despot/util/memorypool.h	/^	void DeleteAll() {$/;"	f	class:despot::MemoryPool
Descriptor	despot/include/despot/util/optionparser.h	/^struct Descriptor {$/;"	s	namespace:despot::option
Destroy	despot/include/despot/util/memorypool.h	/^	void Destroy(T* obj) {$/;"	f	class:despot::MemoryPool
DetectorParticle	human_filter/include/people_tracking_filter/detector_particle.h	/^class DetectorParticle$/;"	c	namespace:estimation
DetectorParticle	human_filter/src/detector_particle.cpp	/^DetectorParticle::DetectorParticle(unsigned int num_particles):$/;"	f	class:estimation::DetectorParticle
DirectionalDistance	despot/src/util/coord.cpp	/^int Coord::DirectionalDistance(Coord lhs, Coord rhs, int direction) {$/;"	f	class:despot::Coord
Dirichlet	despot/include/despot/util/dirichlet.h	/^class Dirichlet {$/;"	c	namespace:despot
Dirichlet	despot/src/util/dirichlet.cpp	/^Dirichlet::Dirichlet(vector<double> alpha) {$/;"	f	class:despot::Dirichlet
Discount	despot/include/despot/core/globals.h	/^inline double Discount() {$/;"	f	namespace:despot::Globals
Discount	despot/include/despot/core/globals.h	/^inline double Discount(int d) {$/;"	f	namespace:despot::Globals
DisplayParameters	despot/src/simple_tui.cpp	/^void SimpleTUI::DisplayParameters(option::Option *options, DSPOMDP *model) {$/;"	f	class:despot::SimpleTUI
Dist2D	edge_leg_detector/src/detector.cpp	/^double Dist2D( double x0, double y0, double x1, double y1 ){$/;"	f
Dist2D	edge_leg_detector/src/edge_leg_detector/detector.cpp	/^double Dist2D( double x0, double y0, double x1, double y1 ){$/;"	f
DistToEdge	despot/include/despot/util/grid.h	/^	int DistToEdge(const Coord& coord, int direction) {$/;"	f	class:despot::Grid
Distance	despot/src/util/floor.cpp	/^double Floor::Distance(int c1, int c2) const {$/;"	f	class:despot::Floor
Distance3D	navi_mdp/src/srBSpline.cpp	/^double srBSpline::Distance3D( double* Q1, double* Q2 )$/;"	f	class:srBSpline
DoIndent	despot/include/despot/util/tinyxml/tinyxml.h	/^	void DoIndent() {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
DoLineBreak	despot/include/despot/util/tinyxml/tinyxml.h	/^	void DoLineBreak() {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
DoubleValue	despot/src/util/tinyxml/tinyxml.cpp	/^double TiXmlAttribute::DoubleValue() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
Dy_OBS_CELL	navi_mdp/include/Dynamic_Manager.h	41;"	d
Dy_OBS_CELL	navi_mdp/include/MDPmanager.h	37;"	d
Dyn_MDPPath	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<int>  Dyn_MDPPath;$/;"	m	class:Dynamic_Manager
Dyn_MDPPath	navi_mdp/include/MDPmanager.h	/^ 	vector<int>  Dyn_MDPPath;$/;"	m	class:MDPManager
Dynamic_Manager	navi_mdp/include/Dynamic_Manager.h	/^ 	Dynamic_Manager():maxiter(Maxiteration),Action_dim(8),gamma(1),Ra(ra),publishnum(0),Yolo_iter(0),m_boolSolve(false),OnceTarget(false){}$/;"	f	class:Dynamic_Manager
Dynamic_Manager	navi_mdp/include/Dynamic_Manager.h	/^class Dynamic_Manager$/;"	c
Dynamic_Manager	navi_mdp/src/Dynamic_Manager.cpp	/^Dynamic_Manager::Dynamic_Manager(MapParam* _pMapParam):maxiter(Maxiteration),Action_dim(8),gamma(1),Ra(ra),publishnum(0),ReceiveData(0),m_boolSolve(false),dyn_path_num(0)$/;"	f	class:Dynamic_Manager
EAST	despot/include/despot/util/coord.h	/^		SOUTH, EAST, NORTH, WEST, NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST$/;"	e	enum:despot::Compass::__anon1
ELEMENT	despot/include/despot/util/tinyxml/tinyxml.h	/^		DOCUMENT, ELEMENT, COMMENT, UNKNOWN, TEXT, DECLARATION, TYPECOUNT$/;"	e	enum:despot::util::tinyxml::TiXmlNode::NodeType
ERROR	despot/include/despot/util/logging.h	/^	static const int NONE, ERROR, WARN, INFO, DEBUG, VERBOSE;$/;"	m	class:despot::logging
ERROR	despot/src/util/logging.cpp	/^const int logging::ERROR = 1;$/;"	m	class:despot::logging	file:
EXECTRACKER_H	despot/include/despot/util/exec_tracker.h	2;"	d
E_BAD	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^		E_BAD = 0,$/;"	e	enum:despot::BaseRockSample::__anon8
E_BELIEF	despot/include/despot/simple_tui.h	/^  E_BELIEF,$/;"	e	enum:despot::OptionIndex
E_BLBTYPE	despot/include/despot/simple_tui.h	/^  E_BLBTYPE,$/;"	e	enum:despot::OptionIndex
E_BUBTYPE	despot/include/despot/simple_tui.h	/^  E_BUBTYPE,$/;"	e	enum:despot::OptionIndex
E_DEFAULT_ACTION	despot/include/despot/simple_tui.h	/^  E_DEFAULT_ACTION,$/;"	e	enum:despot::OptionIndex
E_DEPTH	despot/include/despot/simple_tui.h	/^  E_DEPTH,$/;"	e	enum:despot::OptionIndex
E_DISCOUNT	despot/include/despot/simple_tui.h	/^  E_DISCOUNT,$/;"	e	enum:despot::OptionIndex
E_EVALUATOR	despot/include/despot/simple_tui.h	/^  E_EVALUATOR,$/;"	e	enum:despot::OptionIndex
E_GAP	despot/include/despot/simple_tui.h	/^  E_GAP,$/;"	e	enum:despot::OptionIndex
E_GOOD	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^		E_GOOD = 1,$/;"	e	enum:despot::BaseRockSample::__anon8
E_HELP	despot/include/despot/simple_tui.h	/^  E_HELP,$/;"	e	enum:despot::OptionIndex
E_KNOWLEDGE	despot/include/despot/simple_tui.h	/^  E_KNOWLEDGE,$/;"	e	enum:despot::OptionIndex
E_LBTYPE	despot/include/despot/simple_tui.h	/^  E_LBTYPE,$/;"	e	enum:despot::OptionIndex
E_LOG	despot/include/despot/simple_tui.h	/^  E_LOG,$/;"	e	enum:despot::OptionIndex
E_MAX_POLICY_SIM_LEN	despot/include/despot/simple_tui.h	/^  E_MAX_POLICY_SIM_LEN,$/;"	e	enum:despot::OptionIndex
E_NOISE	despot/include/despot/simple_tui.h	/^  E_NOISE,$/;"	e	enum:despot::OptionIndex
E_NONE	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^		E_NONE = 2$/;"	e	enum:despot::BaseRockSample::__anon8
E_NUMBER	despot/include/despot/simple_tui.h	/^  E_NUMBER,$/;"	e	enum:despot::OptionIndex
E_NUMPARTICLES	despot/include/despot/simple_tui.h	/^  E_NUMPARTICLES,$/;"	e	enum:despot::OptionIndex
E_PARAMS_FILE	despot/include/despot/simple_tui.h	/^  E_PARAMS_FILE,$/;"	e	enum:despot::OptionIndex
E_PASSABLE	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Navigation::__anon15
E_PASSABLE	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Navigation::__anon5
E_PASSABLE	despot/examples/cpp_models/pocman/src/pocman.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Pocman::__anon11
E_PORT	despot/include/despot/simple_tui.h	/^  E_PORT,$/;"	e	enum:despot::OptionIndex
E_POWER	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Navigation::__anon15
E_POWER	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Navigation::__anon5
E_POWER	despot/examples/cpp_models/pocman/src/pocman.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Pocman::__anon11
E_PRIOR	despot/include/despot/simple_tui.h	/^  E_PRIOR,$/;"	e	enum:despot::OptionIndex
E_PRUNE	despot/include/despot/simple_tui.h	/^  E_PRUNE,$/;"	e	enum:despot::OptionIndex
E_RUNS	despot/include/despot/simple_tui.h	/^  E_RUNS,$/;"	e	enum:despot::OptionIndex
E_SAMPLE	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^		E_SAMPLE = 4$/;"	e	enum:despot::BaseRockSample::__anon9
E_SEARCH_SOLVER	despot/include/despot/simple_tui.h	/^  E_SEARCH_SOLVER,$/;"	e	enum:despot::OptionIndex
E_SEED	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Navigation::__anon15
E_SEED	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Navigation::__anon5
E_SEED	despot/examples/cpp_models/pocman/src/pocman.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Pocman::__anon11
E_SEED	despot/include/despot/simple_tui.h	/^  E_SEED,$/;"	e	enum:despot::OptionIndex
E_SERVER	despot/include/despot/simple_tui.h	/^  E_SERVER,$/;"	e	enum:despot::OptionIndex
E_SILENCE	despot/include/despot/simple_tui.h	/^  E_SILENCE,$/;"	e	enum:despot::OptionIndex
E_SIM_LEN	despot/include/despot/simple_tui.h	/^  E_SIM_LEN,$/;"	e	enum:despot::OptionIndex
E_SIZE	despot/include/despot/simple_tui.h	/^  E_SIZE,$/;"	e	enum:despot::OptionIndex
E_SOLVER	despot/include/despot/simple_tui.h	/^  E_SOLVER,$/;"	e	enum:despot::OptionIndex
E_TIMEOUT	despot/include/despot/simple_tui.h	/^  E_TIMEOUT,$/;"	e	enum:despot::OptionIndex
E_TIME_LIMIT	despot/include/despot/simple_tui.h	/^  E_TIME_LIMIT,$/;"	e	enum:despot::OptionIndex
E_UBTYPE	despot/include/despot/simple_tui.h	/^  E_UBTYPE,$/;"	e	enum:despot::OptionIndex
E_UNKNOWN	despot/include/despot/simple_tui.h	/^  E_UNKNOWN,$/;"	e	enum:despot::OptionIndex
E_VERBOSITY	despot/include/despot/simple_tui.h	/^  E_VERBOSITY,$/;"	e	enum:despot::OptionIndex
Edgeleg_manager	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^class Edgeleg_manager$/;"	c
Edgeleg_manager	human_filter/src/edge_leg_filter_node.cpp	/^Edgeleg_manager::Edgeleg_manager(ros::NodeHandle nh)$/;"	f	class:Edgeleg_manager
Edgeleg_manager_action	human_filter/include/people_tracking_filter/followme_action.h	/^class Edgeleg_manager_action$/;"	c
Edgeleg_manager_action	human_filter/src/followme_action.cpp	/^Edgeleg_manager_action::Edgeleg_manager_action(ros::NodeHandle nh,std::string name)$/;"	f	class:Edgeleg_manager_action
Edgeleg_manager_srv	human_filter/include/people_tracking_filter/service_test.h	/^class Edgeleg_manager_srv$/;"	c
Edgeleg_manager_srv	human_filter/src/service_test.cpp	/^Edgeleg_manager_srv::Edgeleg_manager_srv(ros::NodeHandle nh)$/;"	f	class:Edgeleg_manager_srv
Element	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* Element() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
EncodeString	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlBase::EncodeString(const TIXML_STRING& str, TIXML_STRING* outString) {$/;"	f	class:despot::util::tinyxml::TiXmlBase
Encoding	despot/include/despot/util/tinyxml/tinyxml.h	/^	const char *Encoding() const {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
End	despot/src/evaluator.cpp	/^double IPPCEvaluator::End() {$/;"	f	class:despot::IPPCEvaluator
End	despot/src/evaluator.cpp	/^double POMDPEvaluator::End() {$/;"	f	class:despot::POMDPEvaluator
EndRound	despot/src/evaluator.cpp	/^double IPPCEvaluator::EndRound() {$/;"	f	class:despot::IPPCEvaluator
EndRound	despot/src/evaluator.cpp	/^double POMDPEvaluator::EndRound() {$/;"	f	class:despot::POMDPEvaluator
Ensure	despot/src/pomdpx/parser/parser.cpp	/^void Parser::Ensure(bool condition, string message, TiXmlBase* base) const {$/;"	f	class:despot::Parser
Entity	despot/include/despot/util/tinyxml/tinyxml.h	/^	struct Entity {$/;"	s	class:despot::util::tinyxml::TiXmlBase
Entry	despot/src/random_streams.cpp	/^double RandomStreams::Entry(int stream) const {$/;"	f	class:despot::RandomStreams
Entry	despot/src/random_streams.cpp	/^double RandomStreams::Entry(int stream, int position) const {$/;"	f	class:despot::RandomStreams
Error	despot/include/despot/util/tinyxml/tinyxml.h	/^	bool Error() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
ErrorCol	despot/include/despot/util/tinyxml/tinyxml.h	/^	int ErrorCol() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
ErrorDesc	despot/include/despot/util/tinyxml/tinyxml.h	/^	const char * ErrorDesc() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
ErrorId	despot/include/despot/util/tinyxml/tinyxml.h	/^	int ErrorId() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
ErrorRow	despot/include/despot/util/tinyxml/tinyxml.h	/^	int ErrorRow() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
EuclideanDistance	despot/src/util/coord.cpp	/^double Coord::EuclideanDistance(Coord c1, Coord c2) {$/;"	f	class:despot::Coord
EvalLog	despot/include/despot/evaluator.h	/^class EvalLog {$/;"	c	namespace:despot
EvalLog	despot/src/evaluator.cpp	/^EvalLog::EvalLog(string log_file) :$/;"	f	class:despot::EvalLog
Evaluate	despot/src/solver/despot.cpp	/^ValuedAction DESPOT::Evaluate(VNode* root, vector<State*>& particles,$/;"	f	class:despot::DESPOT
Evaluate	despot/src/solver/pomcp.cpp	/^ValuedAction POMCP::Evaluate(VNode* root, vector<State*>& particles,$/;"	f	class:despot::POMCP
Evaluator	despot/include/despot/evaluator.h	/^class Evaluator {$/;"	c	namespace:despot
Evaluator	despot/src/evaluator.cpp	/^Evaluator::Evaluator(DSPOMDP* model, string belief_type, Solver* solver,$/;"	f	class:despot::Evaluator
ExactInitialParticleSet	despot/src/pomdpx/pomdpx.cpp	/^vector<State*> POMDPX::ExactInitialParticleSet() const {$/;"	f	class:despot::POMDPX
ExactPrior	despot/examples/cpp_models/tag/src/tag/tag.cpp	/^Belief* Tag::ExactPrior() const {$/;"	f	class:despot::Tag
ExecTracker	despot/include/despot/util/exec_tracker.h	/^class ExecTracker {$/;"	c	namespace:despot
ExecTracker	despot/src/util/exec_tracker.cpp	/^ExecTracker::ExecTracker() {$/;"	f	class:despot::ExecTracker
ExecuteAction	despot/src/evaluator.cpp	/^bool IPPCEvaluator::ExecuteAction(int action, double& reward, OBS_TYPE& obs) {$/;"	f	class:despot::IPPCEvaluator
ExecuteAction	despot/src/evaluator.cpp	/^bool POMDPEvaluator::ExecuteAction(int action, double& reward, OBS_TYPE& obs) {$/;"	f	class:despot::POMDPEvaluator
Exhausted	despot/src/random_streams.cpp	/^bool RandomStreams::Exhausted() const {$/;"	f	class:despot::RandomStreams
Expand	despot/src/solver/aems.cpp	/^void AEMS::Expand(QNode* qnode, BeliefLowerBound* lb, BeliefUpperBound* ub,$/;"	f	class:despot::AEMS
Expand	despot/src/solver/aems.cpp	/^void AEMS::Expand(VNode* vnode, BeliefLowerBound* lower_bound,$/;"	f	class:despot::AEMS
Expand	despot/src/solver/despot.cpp	/^void DESPOT::Expand(QNode* qnode, ScenarioLowerBound* lb,$/;"	f	class:despot::DESPOT
Expand	despot/src/solver/despot.cpp	/^void DESPOT::Expand(VNode* vnode,$/;"	f	class:despot::DESPOT
ExpectedValueGet	human_filter/src/gaussian_pos_vel.cpp	/^GaussianPosVel::ExpectedValueGet() const$/;"	f	class:BFL::GaussianPosVel
ExpectedValueGet	human_filter/src/gaussian_vector.cpp	/^GaussianVector::ExpectedValueGet() const$/;"	f	class:BFL::GaussianVector
ExpectedValueGet	human_filter/src/mcpdf_pos_vel.cpp	/^StatePosVel MCPdfPosVel::ExpectedValueGet() const$/;"	f	class:MCPdfPosVel
ExpectedValueGet	human_filter/src/mcpdf_vector.cpp	/^Vector3 MCPdfVector::ExpectedValueGet() const$/;"	f	class:MCPdfVector
ExpectedValueGet	human_filter/src/measmodel_pos.cpp	/^MeasPdfPos::ExpectedValueGet() const$/;"	f	class:MeasPdfPos
ExpectedValueGet	human_filter/src/measmodel_vector.cpp	/^MeasPdfVector::ExpectedValueGet() const$/;"	f	class:MeasPdfVector
ExpectedValueGet	human_filter/src/sysmodel_pos_vel.cpp	/^SysPdfPosVel::ExpectedValueGet() const$/;"	f	class:SysPdfPosVel
ExpectedValueGet	human_filter/src/sysmodel_vector.cpp	/^SysPdfVector::ExpectedValueGet() const$/;"	f	class:SysPdfVector
ExpectedValueGet	human_filter/src/uniform_vector.cpp	/^UniformVector::ExpectedValueGet() const$/;"	f	class:BFL::UniformVector
ExploitBlockers	despot/src/solver/despot.cpp	/^void DESPOT::ExploitBlockers(VNode* vnode) {$/;"	f	class:despot::DESPOT
FILTER_SIZE	edge_leg_detector/src/detector.cpp	25;"	d	file:
FILTER_SIZE	edge_leg_detector/src/edge_leg_detector/detector.cpp	24;"	d	file:
FLANK_D	edge_leg_detector/src/detector.cpp	29;"	d	file:
FLANK_D	edge_leg_detector/src/edge_leg_detector/detector.cpp	28;"	d	file:
FLANK_THRESHOLD	edge_leg_detector/src/detector.cpp	26;"	d	file:
FLANK_THRESHOLD	edge_leg_detector/src/edge_leg_detector/detector.cpp	25;"	d	file:
FLANK_U	edge_leg_detector/src/detector.cpp	28;"	d	file:
FLANK_U	edge_leg_detector/src/edge_leg_detector/detector.cpp	27;"	d	file:
FLOOR_H	despot/include/despot/util/floor.h	2;"	d
FOVW	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	39;"	d
FOVW	human_filter/include/people_tracking_filter/followme_action.h	44;"	d
FOVW	human_filter/include/people_tracking_filter/service_test.h	40;"	d
FOVW	navi_mdp/include/Dynamic_Manager.h	63;"	d
FOVW	villa_navi_service/include/navi_service_node.h	36;"	d
FREE_CELL	navi_mdp/include/Dynamic_Manager.h	39;"	d
FREE_CELL	navi_mdp/include/MDPmanager.h	35;"	d
FUNCTION_H	despot/include/despot/pomdpx/parser/function.h	2;"	d
FVRS	despot/examples/cpp_models/rock_sample/src/fvrs/fvrs.cpp	/^FVRS::FVRS(int size, int rocks) :$/;"	f	class:despot::FVRS
FVRS	despot/examples/cpp_models/rock_sample/src/fvrs/fvrs.cpp	/^FVRS::FVRS(string map) :$/;"	f	class:despot::FVRS
FVRS	despot/examples/cpp_models/rock_sample/src/fvrs/fvrs.h	/^class FVRS: public BaseRockSample {$/;"	c	namespace:despot
FVRS_BIN	despot/examples/cpp_models/rock_sample/Makefile	/^FVRS_BIN = fvrs$/;"	m
FVRS_H	despot/examples/cpp_models/rock_sample/src/fvrs/fvrs.h	2;"	d
FVRS_SOURCES	despot/examples/cpp_models/rock_sample/Makefile	/^FVRS_SOURCES = $(shell find -L $(SRCDIR)\/base $(SRCDIR)\/fvrs -name '*.cpp')$/;"	m
Feature_dim	navi_mdp/include/Dynamic_Manager.h	/^ 	int 	          Feature_dim;$/;"	m	class:Dynamic_Manager
Feature_dim	navi_mdp/include/MDPmanager.h	/^ 	int 	          Feature_dim;$/;"	m	class:MDPManager
Fequals	despot/include/despot/core/globals.h	/^inline bool Fequals(double a, double b) {$/;"	f	namespace:despot::Globals
Filtered_leg_human	navi_mdp/include/Dynamic_Manager.h	/^ 	std::vector< std::vector< double > > Filtered_leg_human;$/;"	m	class:Dynamic_Manager
Find	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* Find( const std::string& _name ) {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
Find	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* Find(const char* _name) {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
Find	despot/src/util/tinyxml/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttributeSet::Find( const std::string& name ) const$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
Find	despot/src/util/tinyxml/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttributeSet::Find(const char* name) const {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
FindBlocker	despot/src/solver/despot.cpp	/^VNode* DESPOT::FindBlocker(VNode* vnode) {$/;"	f	class:despot::DESPOT
FindMaxApproxErrorLeaf	despot/src/solver/aems.cpp	/^VNode* AEMS::FindMaxApproxErrorLeaf(VNode* root) {$/;"	f	class:despot::AEMS
FindMaxApproxErrorLeaf	despot/src/solver/aems.cpp	/^void AEMS::FindMaxApproxErrorLeaf(QNode* qnode, double likelihood,$/;"	f	class:despot::AEMS
FindMaxApproxErrorLeaf	despot/src/solver/aems.cpp	/^void AEMS::FindMaxApproxErrorLeaf(VNode* vnode, double likelihood,$/;"	f	class:despot::AEMS
FindMaxIdx	navi_mdp/src/Dynamic_Manager.cpp	/^int Dynamic_Manager::FindMaxIdx(vector<double> dataset)$/;"	f	class:Dynamic_Manager
FindMaxIdx	navi_mdp/src/MDPmanager.cpp	/^int MDPManager::FindMaxIdx(vector<double> dataset)$/;"	f	class:MDPManager
FindMultiplicity	navi_mdp/src/srBSpline.cpp	/^int srBSpline::FindMultiplicity(double _u)$/;"	f	class:srBSpline
FindNearesetLegIdx	human_filter/src/edge_leg_filter_node.cpp	/^int Edgeleg_manager::FindNearesetLegIdx()$/;"	f	class:Edgeleg_manager
FindNearesetLegIdx	human_filter/src/followme_action.cpp	/^int Edgeleg_manager_action::FindNearesetLegIdx()$/;"	f	class:Edgeleg_manager_action
FindNearesetLegIdx	human_filter/src/service_test.cpp	/^int Edgeleg_manager_srv::FindNearesetLegIdx()$/;"	f	class:Edgeleg_manager_srv
FindPattern	edge_leg_detector/src/detector.cpp	/^void FindPattern( string str, string pattern, list <int> *element_found ){$/;"	f
FindPattern	edge_leg_detector/src/edge_leg_detector/detector.cpp	/^void FindPattern( string str, string pattern, list <int> *element_found ){$/;"	f
First	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* First() {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
First	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlAttribute* First() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
FirstAttribute	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* FirstAttribute() {$/;"	f	class:despot::util::tinyxml::TiXmlElement
FirstAttribute	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlAttribute* FirstAttribute() const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
FirstChild	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlHandle FirstChild( const std::string& _value ) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
FirstChild	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* FirstChild( const std::string& _value ) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChild	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* FirstChild() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChild	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* FirstChild(const char * _value) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChild	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* FirstChild( const std::string& _value ) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChild	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* FirstChild() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChild	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
FirstChild	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild(const char * value) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
FirstChild	despot/src/util/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::FirstChild(const char * _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChildElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* FirstChildElement( const std::string& _value ) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChildElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* FirstChildElement() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChildElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* FirstChildElement(const char * _value) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChildElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlHandle FirstChildElement( const std::string& _value ) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
FirstChildElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlElement* FirstChildElement( const std::string& _value ) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChildElement	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
FirstChildElement	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement(const char * value) const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
FirstChildElement	despot/src/util/tinyxml/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
FirstChildElement	despot/src/util/tinyxml/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement(const char * _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
Floor	despot/include/despot/util/floor.h	/^class Floor {$/;"	c	namespace:despot
Floor	despot/src/util/floor.cpp	/^Floor::Floor() :$/;"	f	class:despot::Floor
Floor	despot/src/util/floor.cpp	/^Floor::Floor(int num_rows, int num_cols) :$/;"	f	class:despot::Floor
Free	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::Free(State* particle) const {$/;"	f	class:despot::Adventurer
Free	despot/examples/cpp_models/bridge/src/bridge.cpp	/^void Bridge::Free(State* particle) const {$/;"	f	class:despot::Bridge
Free	despot/examples/cpp_models/chain/src/chain.cpp	/^void Chain::Free(State* particle) const {$/;"	f	class:despot::Chain
Free	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::Free(State* particle) const {$/;"	f	class:despot::Navigation
Free	despot/examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::Free(State* particle) const {$/;"	f	class:despot::Navigation
Free	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::Free(State* particle) const {$/;"	f	class:despot::Navigation
Free	despot/examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::Free(State* particle) const {$/;"	f	class:despot::Pocman
Free	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::Free(State* particle) const {$/;"	f	class:despot::RegDemo
Free	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::Free(State* particle) const {$/;"	f	class:despot::BaseRockSample
Free	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^void SimpleNavi::Free(State* particle) const {$/;"	f	class:despot::SimpleNavi
Free	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^void SimpleRockSample::Free(State* particle) const {$/;"	f	class:despot::SimpleRockSample
Free	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^void BaseTag::Free(State* particle) const {$/;"	f	class:despot::BaseTag
Free	despot/examples/cpp_models/tiger/src/tiger.cpp	/^void Tiger::Free(State* particle) const {$/;"	f	class:despot::Tiger
Free	despot/include/despot/util/memorypool.h	/^	void Free(T* obj) {$/;"	f	class:despot::MemoryPool
Free	despot/src/core/node.cpp	/^void VNode::Free(const DSPOMDP& model) {$/;"	f	class:despot::VNode
Free	despot/src/pomdpx/pomdpx.cpp	/^void POMDPX::Free(State* particle) const {$/;"	f	class:despot::POMDPX
FullChainBelief	despot/examples/cpp_models/chain/src/chain.cpp	/^FullChainBelief::FullChainBelief(const DSPOMDP* model, int num_mdp_states,$/;"	f	class:despot::FullChainBelief
FullChainBelief	despot/examples/cpp_models/chain/src/chain.h	/^class FullChainBelief: public Belief {$/;"	c	namespace:despot
FullPocman	despot/examples/cpp_models/pocman/src/pocman.cpp	/^FullPocman::FullPocman() :$/;"	f	class:despot::FullPocman
FullPocman	despot/examples/cpp_models/pocman/src/pocman.h	/^class FullPocman: public Pocman {$/;"	c	namespace:despot
Function	despot/include/despot/pomdpx/parser/function.h	/^class Function {$/;"	c	namespace:despot
Function	despot/src/pomdpx/parser/function.cpp	/^Function::Function() {$/;"	f	class:despot::Function
Function	despot/src/pomdpx/parser/function.cpp	/^Function::Function(NamedVar* child, vector<NamedVar*> parents) :$/;"	f	class:despot::Function
FunctionWriter	despot/include/despot/util/optionparser.h	/^		FunctionWriter(Function* w) :$/;"	f	struct:despot::option::PrintUsageImplementation::FunctionWriter
FunctionWriter	despot/include/despot/util/optionparser.h	/^	struct FunctionWriter: public IStringWriter {$/;"	s	struct:despot::option::PrintUsageImplementation
GAMMA_H	despot/include/despot/util/gamma.h	2;"	d
GAUSSIAN_POS_VEL_H	human_filter/include/people_tracking_filter/gaussian_pos_vel.h	39;"	d
GAUSSIAN_VECTOR_H	human_filter/include/people_tracking_filter/gaussian_vector.h	38;"	d
GLOBALS_H	despot/include/despot/core/globals.h	2;"	d
GRID_H	despot/include/despot/util/grid.h	2;"	d
Gamma	despot/include/despot/util/gamma.h	/^class Gamma {$/;"	c	namespace:despot
Gamma	despot/src/util/gamma.cpp	/^Gamma::Gamma(double k, double theta) {$/;"	f	class:despot::Gamma
Gap	despot/src/solver/despot.cpp	/^double DESPOT::Gap(VNode* vnode) {$/;"	f	class:despot::DESPOT
GaussianPosVel	human_filter/include/people_tracking_filter/gaussian_pos_vel.h	/^class GaussianPosVel: public Pdf<StatePosVel>$/;"	c	namespace:BFL
GaussianPosVel	human_filter/src/gaussian_pos_vel.cpp	/^GaussianPosVel::GaussianPosVel(const StatePosVel& mu, const StatePosVel& sigma)$/;"	f	class:BFL::GaussianPosVel
GaussianVector	human_filter/include/people_tracking_filter/gaussian_vector.h	/^class GaussianVector: public Pdf<tf::Vector3>$/;"	c	namespace:BFL
GaussianVector	human_filter/src/gaussian_vector.cpp	/^GaussianVector::GaussianVector(const Vector3& mu, const Vector3& sigma)$/;"	f	class:BFL::GaussianVector
Gaze_activate_pub	navi_mdp/include/Dynamic_Manager.h	/^	ros::Publisher   Gaze_activate_pub;$/;"	m	class:Dynamic_Manager
Gaze_activate_pub	navi_mdp/include/PathManager.h	/^	ros::Publisher Gaze_activate_pub;$/;"	m	class:PathManager
Gaze_activate_pub	villa_navi_service/include/navi_service_node.h	/^	ros::Publisher Gaze_activate_pub;$/;"	m	class:villa_navi_srv
Gaze_point_pub	navi_mdp/include/Dynamic_Manager.h	/^	ros::Publisher   Gaze_point_pub;$/;"	m	class:Dynamic_Manager
Gaze_point_pub	navi_mdp/include/PathManager.h	/^ 	ros::Publisher Gaze_point_pub;$/;"	m	class:PathManager
Gaze_point_pub	villa_navi_service/include/navi_service_node.h	/^	ros::Publisher Gaze_point_pub;$/;"	m	class:villa_navi_srv
GetAction	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^int Adventurer::GetAction(const State& state) const {$/;"	f	class:despot::Adventurer
GetAction	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^int Navigation::GetAction(const State& state) const {$/;"	f	class:despot::Navigation
GetAction	despot/examples/cpp_models/navigation/src/navigation.cpp	/^int Navigation::GetAction(const State& state) const {$/;"	f	class:despot::Navigation
GetAction	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^int Navigation::GetAction(const State& state) const {$/;"	f	class:despot::Navigation
GetAction	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^int RegDemo::GetAction(const State& state) const {$/;"	f	class:despot::RegDemo
GetAction	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	inline int GetAction(const State& tagstate) const {$/;"	f	class:despot::BaseRockSample
GetAction	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^int BaseTag::GetAction(const State& state) const {$/;"	f	class:despot::BaseTag
GetAction	despot/include/despot/pomdpx/pomdpx.h	/^	inline int GetAction(const State& state) const {$/;"	f	class:despot::POMDPX
GetAction	despot/src/solver/pomcp.cpp	/^int POMCPPrior::GetAction(const State& state) {$/;"	f	class:despot::POMCPPrior
GetActionName	despot/src/pomdpx/parser/parser.cpp	/^const string& Parser::GetActionName() {$/;"	f	class:despot::Parser
GetActionName	despot/src/pomdpx/pomdpx.cpp	/^const string& POMDPX::GetActionName() {$/;"	f	class:despot::POMDPX
GetBucket	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^int LaserTag::GetBucket(double noisy) const {$/;"	f	class:despot::LaserTag
GetBucket	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^int NoisyLaserTag::GetBucket(double noisy) const {$/;"	f	class:despot::NoisyLaserTag
GetCategory	despot/src/util/random.cpp	/^int Random::GetCategory(const vector<double>& category_probs, double rand_num) {$/;"	f	class:despot::Random
GetCell	despot/src/util/floor.cpp	/^Coord Floor::GetCell(int i) const {$/;"	f	class:despot::Floor
GetChar	despot/include/despot/util/tinyxml/tinyxml.h	/^	inline static const char* GetChar(const char* p, char* _value, int* length,$/;"	f	class:despot::util::tinyxml::TiXmlBase
GetControlPoint	navi_mdp/include/srBSpline.h	/^	double GetControlPoint( int Index ) { return m_ControlPoints[Index]; }$/;"	f	class:srBSpline
GetCoord	despot/include/despot/util/grid.h	/^	Coord GetCoord(int index) const {$/;"	f	class:despot::Grid
GetDefaultAction	despot/include/despot/pomdpx/parser/parser.h	/^	inline int GetDefaultAction(const std::vector<int>& state) const {$/;"	f	class:despot::Parser
GetDegree	navi_mdp/include/srBSpline.h	/^	int GetDegree( void ) { return m_Degree; }$/;"	f	class:srBSpline
GetDocument	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlDocument* GetDocument() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
GetDocument	despot/src/util/tinyxml/tinyxml.cpp	/^const TiXmlDocument* TiXmlNode::GetDocument() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
GetEntity	despot/src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlBase::GetEntity(const char* p, char* value, int* length,$/;"	f	class:despot::util::tinyxml::TiXmlBase
GetEnumedAction	despot/src/pomdpx/parser/parser.cpp	/^const string& Parser::GetEnumedAction(int action) {$/;"	f	class:despot::Parser
GetEnumedAction	despot/src/pomdpx/pomdpx.cpp	/^const string& POMDPX::GetEnumedAction(int action) {$/;"	f	class:despot::POMDPX
GetFirstChildElement	despot/src/pomdpx/parser/parser.cpp	/^TiXmlElement* Parser::GetFirstChildElement(TiXmlElement* elem,$/;"	f	class:despot::Parser
GetFirstChildText	despot/src/pomdpx/parser/parser.cpp	/^string Parser::GetFirstChildText(TiXmlElement* elem,$/;"	f	class:despot::Parser
GetGrevilleAbscissa	navi_mdp/src/srBSpline.cpp	/^double srBSpline::GetGrevilleAbscissa( int controlPointIndex )$/;"	f	class:srBSpline
GetIndex	despot/examples/cpp_models/adventurer/src/adventurer.h	/^	inline int GetIndex(const State* state) const {$/;"	f	class:despot::Adventurer
GetIndex	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	inline int GetIndex(const State* state) const {$/;"	f	class:despot::Navigation
GetIndex	despot/examples/cpp_models/navigation/src/navigation.h	/^	inline int GetIndex(const State* state) const {$/;"	f	class:despot::Navigation
GetIndex	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	inline int GetIndex(const State* state) const {$/;"	f	class:despot::Navigation
GetIndex	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^	inline int GetIndex(const State* state) const {$/;"	f	class:despot::RegDemo
GetIndex	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^int BaseRockSample::GetIndex(const State* state) const {$/;"	f	class:despot::BaseRockSample
GetIndex	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	inline int GetIndex(const State* state) const {$/;"	f	class:despot::BaseTag
GetIndex	despot/include/despot/util/floor.h	/^	inline int GetIndex(const Coord& coord) const {$/;"	f	class:despot::Floor
GetIndex	despot/include/despot/util/floor.h	/^	inline int GetIndex(int x, int y) const {$/;"	f	class:despot::Floor
GetIndex	despot/src/pomdpx/pomdpx.cpp	/^int POMDPX::GetIndex(const State* state) const {$/;"	f	class:despot::POMDPX
GetKeys	despot/include/despot/util/util.h	/^std::vector<K>* GetKeys(const std::map<K, V> m) {$/;"	f	namespace:despot
GetKnot	navi_mdp/include/srBSpline.h	/^	double GetKnot( int Index ) { return m_Knots[Index]; }$/;"	f	class:srBSpline
GetMMAP	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^const State* BaseTag::GetMMAP(const vector<State*>& particles) const {$/;"	f	class:despot::BaseTag
GetMaxReward	despot/examples/cpp_models/adventurer/src/adventurer.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Adventurer
GetMaxReward	despot/examples/cpp_models/bridge/src/bridge.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Bridge
GetMaxReward	despot/examples/cpp_models/chain/src/chain.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Chain
GetMaxReward	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Navigation
GetMaxReward	despot/examples/cpp_models/navigation/src/navigation.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Navigation
GetMaxReward	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Navigation
GetMaxReward	despot/examples/cpp_models/pocman/src/pocman.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Pocman
GetMaxReward	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::RegDemo
GetMaxReward	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::BaseRockSample
GetMaxReward	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^double SimpleNavi::GetMaxReward() const {$/;"	f	class:despot::SimpleNavi
GetMaxReward	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^double SimpleRockSample::GetMaxReward() const {$/;"	f	class:despot::SimpleRockSample
GetMaxReward	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::BaseTag
GetMaxReward	despot/examples/cpp_models/tiger/src/tiger.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Tiger
GetMaxReward	despot/include/despot/pomdpx/pomdpx.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::POMDPX
GetMinRewardAction	despot/examples/cpp_models/adventurer/src/adventurer.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Adventurer
GetMinRewardAction	despot/examples/cpp_models/bridge/src/bridge.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Bridge
GetMinRewardAction	despot/examples/cpp_models/chain/src/chain.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Chain
GetMinRewardAction	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Navigation
GetMinRewardAction	despot/examples/cpp_models/navigation/src/navigation.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Navigation
GetMinRewardAction	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Navigation
GetMinRewardAction	despot/examples/cpp_models/pocman/src/pocman.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Pocman
GetMinRewardAction	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::RegDemo
GetMinRewardAction	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::BaseRockSample
GetMinRewardAction	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^ValuedAction SimpleNavi::GetMinRewardAction() const {$/;"	f	class:despot::SimpleNavi
GetMinRewardAction	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^ValuedAction SimpleRockSample::GetMinRewardAction() const {$/;"	f	class:despot::SimpleRockSample
GetMinRewardAction	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::BaseTag
GetMinRewardAction	despot/examples/cpp_models/tiger/src/tiger.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Tiger
GetMinRewardAction	despot/include/despot/pomdpx/pomdpx.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::POMDPX
GetNextState	despot/src/pomdpx/parser/parser.cpp	/^void Parser::GetNextState(vector<int>& state, int action,$/;"	f	class:despot::Parser
GetNoisyNextState	despot/src/pomdpx/parser/parser.cpp	/^void Parser::GetNoisyNextState(vector<int>& state, int action,$/;"	f	class:despot::Parser
GetNumCompletedRuns	despot/include/despot/evaluator.h	/^	int GetNumCompletedRuns() const {$/;"	f	class:despot::IPPCEvaluator
GetNumCompletedRuns	despot/include/despot/evaluator.h	/^	int GetNumCompletedRuns(std::string instance) const {$/;"	f	class:despot::IPPCEvaluator
GetNumCompletedRuns	despot/src/evaluator.cpp	/^int EvalLog::GetNumCompletedRuns() const {$/;"	f	class:despot::EvalLog
GetNumCompletedRuns	despot/src/evaluator.cpp	/^int EvalLog::GetNumCompletedRuns(string instance) const {$/;"	f	class:despot::EvalLog
GetNumControlPoint	navi_mdp/include/srBSpline.h	/^	int GetNumControlPoint( void ) { return m_NumCPs; }$/;"	f	class:srBSpline
GetNumKnots	navi_mdp/include/srBSpline.h	/^	int GetNumKnots( void ) { return m_NumKnots; }$/;"	f	class:srBSpline
GetNumRemainingRuns	despot/src/evaluator.cpp	/^int EvalLog::GetNumRemainingRuns() const {$/;"	f	class:despot::EvalLog
GetNumRemainingRuns	despot/src/evaluator.cpp	/^int EvalLog::GetNumRemainingRuns(string instance) const {$/;"	f	class:despot::EvalLog
GetObservation	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^bool BaseRockSample::GetObservation(double rand_num,$/;"	f	class:despot::BaseRockSample
GetObservation	despot/examples/cpp_models/rock_sample/src/fvrs/fvrs.cpp	/^int FVRS::GetObservation(double rand_num,$/;"	f	class:despot::FVRS
GetObservation	despot/src/pomdpx/parser/parser.cpp	/^OBS_TYPE Parser::GetObservation(const vector<int>& state, int action,$/;"	f	class:despot::Parser
GetPOMDPXObservation	despot/src/pomdpx/parser/parser.cpp	/^OBS_TYPE Parser::GetPOMDPXObservation(map<string, string>& observe) {$/;"	f	class:despot::Parser
GetPOMDPXObservation	despot/src/pomdpx/pomdpx.cpp	/^OBS_TYPE POMDPX::GetPOMDPXObservation(map<string, string>& observe) {$/;"	f	class:despot::POMDPX
GetParameterElement	despot/src/pomdpx/parser/parser.cpp	/^TiXmlElement* Parser::GetParameterElement(TiXmlElement* element) {$/;"	f	class:despot::Parser
GetReading	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^int LaserTag::GetReading(OBS_TYPE obs, OBS_TYPE dir) {$/;"	f	class:despot::LaserTag
GetReading	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^int NoisyLaserTag::GetReading(OBS_TYPE obs, OBS_TYPE dir) {$/;"	f	class:despot::NoisyLaserTag
GetRemainingBudget	despot/src/evaluator.cpp	/^double EvalLog::GetRemainingBudget(string instance) const {$/;"	f	class:despot::EvalLog
GetRemainingTimeInSeconds	despot/src/evaluator.cpp	/^double EvalLog::GetRemainingTimeInSeconds() const {$/;"	f	class:despot::EvalLog
GetReward	despot/src/pomdpx/parser/parser.cpp	/^double Parser::GetReward(const vector<int>& prev_state,$/;"	f	class:despot::Parser
GetReward	despot/src/pomdpx/parser/parser.cpp	/^double Parser::GetReward(int action) const {$/;"	f	class:despot::Parser
GetRobPos	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^Coord BaseRockSample::GetRobPos(const State* state) const {$/;"	f	class:despot::BaseRockSample
GetRobPos	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	inline Coord GetRobPos(const State* state) const {$/;"	f	class:despot::BaseTag
GetRobPosIndex	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^int BaseRockSample::GetRobPosIndex(const State* state) const {$/;"	f	class:despot::BaseRockSample
GetRock	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^bool BaseRockSample::GetRock(const State* state, int rock) const {$/;"	f	class:despot::BaseRockSample
GetState	despot/examples/cpp_models/adventurer/src/adventurer.h	/^	inline const State* GetState(int index) const {$/;"	f	class:despot::Adventurer
GetState	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	inline const State* GetState(int index) const {$/;"	f	class:despot::Navigation
GetState	despot/examples/cpp_models/navigation/src/navigation.h	/^	inline const State* GetState(int index) const {$/;"	f	class:despot::Navigation
GetState	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	inline const State* GetState(int index) const {$/;"	f	class:despot::Navigation
GetState	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^	inline const State* GetState(int index) const {$/;"	f	class:despot::RegDemo
GetState	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^const State* BaseRockSample::GetState(int index) const {$/;"	f	class:despot::BaseRockSample
GetState	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	inline const State* GetState(int index) const {$/;"	f	class:despot::BaseTag
GetState	despot/src/pomdpx/pomdpx.cpp	/^const State* POMDPX::GetState(const int index) const {$/;"	f	class:despot::POMDPX
GetText	despot/src/util/tinyxml/tinyxml.cpp	/^const char* TiXmlElement::GetText() const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
GetTransition	despot/examples/cpp_models/chain/src/chain.h	/^	inline double GetTransition(int state1, int action, int state2) {$/;"	f	class:despot::ChainState
GetTransition	despot/examples/cpp_models/chain/src/chain.h	/^	std::vector<double> GetTransition(int state, int action) {$/;"	f	class:despot::ChainState
GetUsedTimeInSeconds	despot/src/evaluator.cpp	/^double EvalLog::GetUsedTimeInSeconds() const {$/;"	f	class:despot::EvalLog
GetUserData	despot/include/despot/util/tinyxml/tinyxml.h	/^	const void* GetUserData() const {$/;"	f	class:despot::util::tinyxml::TiXmlBase
GetUserData	despot/include/despot/util/tinyxml/tinyxml.h	/^	void* GetUserData() {$/;"	f	class:despot::util::tinyxml::TiXmlBase
GetValue	despot/include/despot/pomdpx/parser/function.h	/^	inline virtual double GetValue(int pid, int cid) const {$/;"	f	class:despot::HierarchyCPT
GetValue	despot/include/despot/pomdpx/parser/variable.h	/^	inline const std::string& GetValue(int v) const {$/;"	f	class:despot::Variable
GetValue	despot/src/pomdpx/parser/function.cpp	/^double Function::GetValue(int cid) const {$/;"	f	class:despot::Function
GetValue	despot/src/pomdpx/parser/function.cpp	/^double Function::GetValue(int pid, int cid) const {$/;"	f	class:despot::Function
GetValue	despot/src/pomdpx/parser/function.cpp	/^double HierarchyCPT::GetValue(int cid) const {$/;"	f	class:despot::HierarchyCPT
GetX	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^int BaseRockSample::GetX(const State* state) const {$/;"	f	class:despot::BaseRockSample
GetY	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^int BaseRockSample::GetY(const State* state) const {$/;"	f	class:despot::BaseRockSample
Global2LocalCoord	navi_mdp/src/Dynamic_Manager.cpp	/^vector<int> Dynamic_Manager::Global2LocalCoord(vector<int> Global_coord)$/;"	f	class:Dynamic_Manager
Global2LocalCoord	navi_mdp/src/MDPmanager.cpp	/^vector<int> MDPManager::Global2LocalCoord(vector<int> Global_coord)$/;"	f	class:MDPManager
Global2MapCoord	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::Global2MapCoord(const vector<double>& _globalcoord,vector<int>& _MapCoord)$/;"	f	class:Dynamic_Manager
Global2MapCoord	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Global2MapCoord(const vector<double>& _globalcoord,vector<int>& _MapCoord)$/;"	f	class:MDPManager
Globals	despot/include/despot/core/globals.h	/^namespace Globals {$/;"	n	namespace:despot
Globals	despot/src/core/globals.cpp	/^namespace Globals {$/;"	n	namespace:despot	file:
Goal	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<bool> Goal; \/\/ bit vector$/;"	m	class:despot::NavigationState
Goal	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<bool> Goal; \/\/ bit vector$/;"	m	class:despot::NavigationState
GoalVector	navi_mdp/include/Dynamic_Manager.h	/^	std::vector<double> GoalVector;$/;"	m	class:Dynamic_Manager
GoalVector	navi_mdp/include/MDPmanager.h	/^	std::vector<double> GoalVector;$/;"	m	class:MDPManager
Goal_Coord	navi_mdp/include/Dynamic_Manager.h	/^	std::vector<int> Goal_Coord;$/;"	m	class:Dynamic_Manager
Goal_Coord	navi_mdp/include/MDPmanager.h	/^	std::vector<int> Goal_Coord;$/;"	m	class:MDPManager
Goal_X	navi_mdp/include/Dynamic_Manager.h	47;"	d
Goal_X	navi_mdp/include/MDPmanager.h	45;"	d
Goal_Y	navi_mdp/include/Dynamic_Manager.h	48;"	d
Goal_Y	navi_mdp/include/MDPmanager.h	46;"	d
Grid	despot/include/despot/util/grid.h	/^	Grid() {$/;"	f	class:despot::Grid
Grid	despot/include/despot/util/grid.h	/^	Grid(int xsize, int ysize) :$/;"	f	class:despot::Grid
Grid	despot/include/despot/util/grid.h	/^class Grid {$/;"	c	namespace:despot
Grid_Num_X	navi_mdp/include/MapParam.h	17;"	d
Grid_Num_Y	navi_mdp/include/MapParam.h	18;"	d
Grid_STEP	navi_mdp/include/MapParam.h	16;"	d
HELP	despot/examples/cpp_models/bridge/src/bridge.cpp	/^int Bridge::HELP = 2;$/;"	m	class:despot::Bridge	file:
HELP	despot/examples/cpp_models/bridge/src/bridge.h	/^	static int LEFT, RIGHT, HELP, BRIDGELENGTH;$/;"	m	class:despot::Bridge
HISTORY_H	despot/include/despot/core/history.h	2;"	d
HOSTNAME	despot/include/despot/ippc/client.h	/^  std::string HOSTNAME;$/;"	m	class:despot::Client
Handshake	despot/src/evaluator.cpp	/^int IPPCEvaluator::Handshake(string instance) {$/;"	f	class:despot::IPPCEvaluator
Handshake	despot/src/evaluator.cpp	/^int POMDPEvaluator::Handshake(string instance) {$/;"	f	class:despot::POMDPEvaluator
HasValue	despot/src/pomdpx/parser/variable.cpp	/^const bool Variable::HasValue(string value) const {$/;"	f	class:despot::Variable
Head_Pos	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  std::vector<double> Head_Pos; $/;"	m	class:Edgeleg_manager
Head_Pos	human_filter/include/people_tracking_filter/followme_action.h	/^  std::vector<double> Head_Pos; $/;"	m	class:Edgeleg_manager_action
Head_Pos	human_filter/include/people_tracking_filter/service_test.h	/^  std::vector<double> Head_Pos; $/;"	m	class:Edgeleg_manager_srv
Head_Pos	navi_mdp/include/Dynamic_Manager.h	/^	std::vector<double> Head_Pos; 	$/;"	m	class:Dynamic_Manager
Head_Pos	villa_navi_service/include/navi_service_node.h	/^	std::vector<double> Head_Pos;				\/\/x,y,theta$/;"	m	class:villa_navi_srv
HeadingVector	navi_mdp/include/Dynamic_Manager.h	/^	std::vector<double> HeadingVector;$/;"	m	class:Dynamic_Manager
HeadingVector	navi_mdp/include/MDPmanager.h	/^	std::vector<double> HeadingVector;$/;"	m	class:MDPManager
Headscan_pub	villa_navi_service/include/navi_service_node.h	/^	ros::Publisher Headscan_pub;$/;"	m	class:villa_navi_srv
HearGhost	despot/examples/cpp_models/pocman/src/pocman.cpp	/^bool Pocman::HearGhost(const PocmanState& pocstate) const {$/;"	f	class:despot::Pocman
HierarchyCPT	despot/include/despot/pomdpx/parser/function.h	/^class HierarchyCPT: public CPT {$/;"	c	namespace:despot
HierarchyCPT	despot/src/pomdpx/parser/function.cpp	/^HierarchyCPT::HierarchyCPT(NamedVar* child, vector<NamedVar*> parents) {$/;"	f	class:despot::HierarchyCPT
History	despot/include/despot/core/history.h	/^class History {$/;"	c	namespace:despot
HumanPose	edge_leg_detector/src/detector.cpp	/^void HumanPose( vector <double> *r_x, vector <double> *r_y, list <int> Pattern_list, int TYPE,  vector <int> flank_id0,  vector <int> flank_id1, vector <double> laser_x, vector <double> laser_y ){$/;"	f
HumanPose	edge_leg_detector/src/edge_leg_detector/detector.cpp	/^void HumanPose( vector <double> *r_x, vector <double> *r_y, list <int> Pattern_list, int TYPE,  vector <int> flank_id0,  vector <int> flank_id1, vector <double> laser_x, vector <double> laser_y ){$/;"	f
Human_Belief_Scan_map	navi_mdp/include/Dynamic_Manager.h	/^	nav_msgs::OccupancyGrid Human_Belief_Scan_map;$/;"	m	class:Dynamic_Manager
Human_CELL	navi_mdp/include/Dynamic_Manager.h	42;"	d
Human_CELL	navi_mdp/include/MDPmanager.h	38;"	d
Human_Goal_Coord	navi_mdp/include/Dynamic_Manager.h	/^	std::vector<int> Human_Goal_Coord;$/;"	m	class:Dynamic_Manager
Human_Goal_Coord	navi_mdp/include/MDPmanager.h	/^	std::vector<int> Human_Goal_Coord;$/;"	m	class:MDPManager
Human_MarkerArrayCallback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::Human_MarkerArrayCallback(const visualization_msgs::MarkerArray::ConstPtr& msg)$/;"	f	class:Dynamic_Manager
Human_MarkerCallback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::Human_MarkerCallback(const visualization_msgs::Marker::ConstPtr& msg)$/;"	f	class:Dynamic_Manager
Human_MarkerCallback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Human_MarkerCallback(const visualization_msgs::Marker::ConstPtr& msg)$/;"	f	class:MDPManager
Human_Yolo_Callback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Human_Yolo_Callback(const visualization_msgs::MarkerArray::ConstPtr& msg)$/;"	f	class:MDPManager
Human_boxes_pub	navi_mdp/include/Dynamic_Manager.h	/^	ros::Publisher   Human_boxes_pub;$/;"	m	class:Dynamic_Manager
Human_boxes_pub	villa_navi_service/include/navi_service_node.h	/^	ros::Publisher Human_boxes_pub;$/;"	m	class:villa_navi_srv
Human_target_candidate	villa_navi_service/include/navi_service_node.h	/^	std::vector<double> Human_target_candidate;				\/\/x,y,theta$/;"	m	class:villa_navi_srv
Human_target_cmdCallback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Human_target_cmdCallback(const std_msgs::Int8::ConstPtr& msg)$/;"	f	class:MDPManager
IN	navi_mdp/include/srBSpline.h	10;"	d
INCDIR	despot/Makefile	/^INCDIR = include$/;"	m
INCDIR	despot/examples/cpp_models/adventurer/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	despot/examples/cpp_models/bridge/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	despot/examples/cpp_models/chain/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	despot/examples/cpp_models/localnavigation/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	despot/examples/cpp_models/navigation/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	despot/examples/cpp_models/pathfollowing/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	despot/examples/cpp_models/pocman/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	despot/examples/cpp_models/reg_demo/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	despot/examples/cpp_models/rock_sample/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	despot/examples/cpp_models/simpleNavi/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	despot/examples/cpp_models/simple_rock_sample/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	despot/examples/cpp_models/tag/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	despot/examples/cpp_models/tiger/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCDIR	despot/examples/pomdpx_models/Makefile	/^INCDIR = $(DESPOTHOME)\/include$/;"	m
INCL	despot/Makefile	/^INCL = -I $(INCDIR) -I $(INCDIR)\/despot\/util -I $(SRCDIR)$/;"	m
INCLUDE	despot/examples/cpp_models/rock_sample/Makefile	/^INCLUDE = -I $(INCDIR) -I $(SRCDIR)$/;"	m
INCLUDE	despot/examples/cpp_models/tag/Makefile	/^INCLUDE = -I $(INCDIR) -I $(SRCDIR)$/;"	m
INF	despot/src/core/globals.cpp	/^const double INF = 1e8;$/;"	m	namespace:despot::Globals	file:
INFO	despot/include/despot/util/logging.h	/^	static const int NONE, ERROR, WARN, INFO, DEBUG, VERBOSE;$/;"	m	class:despot::logging
INFO	despot/src/util/logging.cpp	/^const int logging::INFO = 3;$/;"	m	class:despot::logging	file:
INITIAL_MDP_STATE	despot/examples/cpp_models/chain/src/chain.h	/^	const static int INITIAL_MDP_STATE = 0;$/;"	m	class:despot::Chain
INVALID	despot/include/despot/util/floor.h	/^	static int INVALID;$/;"	m	class:despot::Floor
INVALID	despot/src/util/floor.cpp	/^int Floor::INVALID = -1;$/;"	m	class:despot::Floor	file:
IPPCEvaluator	despot/include/despot/evaluator.h	/^class IPPCEvaluator: public Evaluator {$/;"	c	namespace:despot
IPPCEvaluator	despot/src/evaluator.cpp	/^IPPCEvaluator::IPPCEvaluator(DSPOMDP* model, string belief_type, Solver* solver,$/;"	f	class:despot::IPPCEvaluator
IStringWriter	despot/include/despot/util/optionparser.h	/^	struct IStringWriter {$/;"	s	struct:despot::option::PrintUsageImplementation
Identify	despot/src/util/tinyxml/tinyxmlparser.cpp	/^TiXmlNode* TiXmlNode::Identify(const char* p, TiXmlEncoding encoding) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
IncNumOfCompletedRuns	despot/src/evaluator.cpp	/^void EvalLog::IncNumOfCompletedRuns(string problem) {$/;"	f	class:despot::EvalLog
IncX	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::IncX(State* state) const {$/;"	f	class:despot::BaseRockSample
IncY	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::IncY(State* state) const {$/;"	f	class:despot::BaseRockSample
Indent	despot/include/despot/util/tinyxml/tinyxml.h	/^	const char* Indent() {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
Index	despot/include/despot/util/grid.h	/^	int Index(const Coord& coord) const {$/;"	f	class:despot::Grid
Index	despot/include/despot/util/grid.h	/^	int Index(int x, int y) const {$/;"	f	class:despot::Grid
IndexOf	despot/src/pomdpx/parser/variable.cpp	/^int Variable::IndexOf(string value) const {$/;"	f	class:despot::Variable
IndexToCoord	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^Coord BaseRockSample::IndexToCoord(int pos) const {$/;"	f	class:despot::BaseRockSample
Init	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::Init(istream& is) {$/;"	f	class:despot::Adventurer
Init	despot/examples/cpp_models/chain/src/chain.cpp	/^void ChainState::Init(int num_mdp_states, int num_mdp_actions) {$/;"	f	class:despot::ChainState
Init	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::Init() {$/;"	f	class:despot::Navigation
Init	despot/examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::Init(istream& is) {$/;"	f	class:despot::Navigation
Init	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::Init() {$/;"	f	class:despot::Navigation
Init	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::Init(istream& is) {$/;"	f	class:despot::RegDemo
Init	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^void BaseTag::Init(istream& is) {$/;"	f	class:despot::BaseTag
Init	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^void LaserTag::Init() {$/;"	f	class:despot::LaserTag
Init	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^void NoisyLaserTag::Init() {$/;"	f	class:despot::NoisyLaserTag
Init	despot/src/core/lower_bound.cpp	/^void ScenarioLowerBound::Init(const RandomStreams& streams) {$/;"	f	class:despot::ScenarioLowerBound
Init	despot/src/core/upper_bound.cpp	/^void LookaheadUpperBound::Init(const RandomStreams& streams) {$/;"	f	class:despot::LookaheadUpperBound
Init	despot/src/core/upper_bound.cpp	/^void ScenarioUpperBound::Init(const RandomStreams& streams) {$/;"	f	class:despot::ScenarioUpperBound
Init	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::Init()$/;"	f	class:Dynamic_Manager
Init	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Init()$/;"	f	class:MDPManager
InitBounds	despot/src/solver/despot.cpp	/^void DESPOT::InitBounds(VNode* vnode, ScenarioLowerBound* lower_bound,$/;"	f	class:despot::DESPOT
InitGeneral	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::InitGeneral() {$/;"	f	class:despot::BaseRockSample
InitLowerBound	despot/src/solver/aems.cpp	/^void AEMS::InitLowerBound(VNode* vnode, BeliefLowerBound* lower_bound,$/;"	f	class:despot::AEMS
InitLowerBound	despot/src/solver/despot.cpp	/^void DESPOT::InitLowerBound(VNode* vnode, ScenarioLowerBound* lower_bound,$/;"	f	class:despot::DESPOT
InitRewards	despot/src/pomdpx/pomdpx.cpp	/^void POMDPX::InitRewards() {$/;"	f	class:despot::POMDPX
InitRound	despot/src/evaluator.cpp	/^void IPPCEvaluator::InitRound() {$/;"	f	class:despot::IPPCEvaluator
InitRound	despot/src/evaluator.cpp	/^void POMDPEvaluator::InitRound() {$/;"	f	class:despot::POMDPEvaluator
InitStates	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::InitStates() {$/;"	f	class:despot::BaseRockSample
InitStates	despot/src/pomdpx/pomdpx.cpp	/^void POMDPX::InitStates() {$/;"	f	class:despot::POMDPX
InitTransitions	despot/src/pomdpx/pomdpx.cpp	/^void POMDPX::InitTransitions() {$/;"	f	class:despot::POMDPX
InitUpperBound	despot/src/solver/aems.cpp	/^void AEMS::InitUpperBound(VNode* vnode, BeliefUpperBound* upper_bound,$/;"	f	class:despot::AEMS
InitUpperBound	despot/src/solver/despot.cpp	/^void DESPOT::InitUpperBound(VNode* vnode, ScenarioUpperBound* upper_bound,$/;"	f	class:despot::DESPOT
Init_11_11	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::Init_11_11() {$/;"	f	class:despot::BaseRockSample
Init_4_4	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::Init_4_4() {$/;"	f	class:despot::BaseRockSample
Init_5_5	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::Init_5_5() {$/;"	f	class:despot::BaseRockSample
Init_5_7	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::Init_5_7() {$/;"	f	class:despot::BaseRockSample
Init_7_8	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::Init_7_8() {$/;"	f	class:despot::BaseRockSample
InitialBelief	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^Belief* Adventurer::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Adventurer
InitialBelief	despot/examples/cpp_models/bridge/src/bridge.cpp	/^Belief* Bridge::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Bridge
InitialBelief	despot/examples/cpp_models/chain/src/chain.cpp	/^Belief* Chain::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Chain
InitialBelief	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^Belief* Navigation::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Navigation
InitialBelief	despot/examples/cpp_models/navigation/src/navigation.cpp	/^Belief* Navigation::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Navigation
InitialBelief	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^Belief* Navigation::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Navigation
InitialBelief	despot/examples/cpp_models/pocman/src/pocman.cpp	/^Belief* Pocman::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Pocman
InitialBelief	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^Belief* RegDemo::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::RegDemo
InitialBelief	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^Belief* BaseRockSample::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::BaseRockSample
InitialBelief	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^Belief* SimpleNavi::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::SimpleNavi
InitialBelief	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^Belief* SimpleRockSample::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::SimpleRockSample
InitialBelief	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^Belief* LaserTag::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::LaserTag
InitialBelief	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^Belief* NoisyLaserTag::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::NoisyLaserTag
InitialBelief	despot/examples/cpp_models/tag/src/tag/tag.cpp	/^Belief* Tag::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Tag
InitialBelief	despot/examples/cpp_models/tiger/src/tiger.cpp	/^Belief* Tiger::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::Tiger
InitialBelief	despot/src/pomdpx/pomdpx.cpp	/^Belief* POMDPX::InitialBelief(const State* start, string type) const {$/;"	f	class:despot::POMDPX
InitialParticleSet	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^vector<State*> BaseRockSample::InitialParticleSet() const {$/;"	f	class:despot::BaseRockSample
InitialWeight	despot/src/pomdpx/parser/parser.cpp	/^double Parser::InitialWeight(const vector<int>& state) const {$/;"	f	class:despot::Parser
InitializeDefaultParameters	despot/examples/cpp_models/adventurer/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	despot/examples/cpp_models/bridge/src/main.cpp	/^	void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	despot/examples/cpp_models/chain/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	despot/examples/cpp_models/localnavigation/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	despot/examples/cpp_models/navigation/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	despot/examples/cpp_models/pathfollowing/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	despot/examples/cpp_models/pocman/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	despot/examples/cpp_models/reg_demo/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	despot/examples/cpp_models/rock_sample/src/fvrs/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	despot/examples/cpp_models/rock_sample/src/rock_sample/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	despot/examples/cpp_models/simpleNavi/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	despot/examples/cpp_models/simple_rock_sample/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	despot/examples/cpp_models/tag/src/laser_tag/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	despot/examples/cpp_models/tag/src/noisy_laser_tag/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	despot/examples/cpp_models/tag/src/tag/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	despot/examples/cpp_models/tiger/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeDefaultParameters	despot/examples/pomdpx_models/src/main.cpp	/^  void InitializeDefaultParameters() {$/;"	f	class:TUI
InitializeEvaluator	despot/src/simple_tui.cpp	/^void SimpleTUI::InitializeEvaluator(Evaluator *&simulator,$/;"	f	class:despot::SimpleTUI
InitializeLogStreams	despot/src/util/logging.cpp	/^vector<log_ostream*> logging::InitializeLogStreams() {$/;"	f	class:despot::logging
InitializeModel	despot/examples/cpp_models/adventurer/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	despot/examples/cpp_models/bridge/src/main.cpp	/^	DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	despot/examples/cpp_models/chain/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	despot/examples/cpp_models/localnavigation/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	despot/examples/cpp_models/navigation/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	despot/examples/cpp_models/pathfollowing/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	despot/examples/cpp_models/pocman/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	despot/examples/cpp_models/reg_demo/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	despot/examples/cpp_models/rock_sample/src/fvrs/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	despot/examples/cpp_models/rock_sample/src/rock_sample/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	despot/examples/cpp_models/simpleNavi/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	despot/examples/cpp_models/simple_rock_sample/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	despot/examples/cpp_models/tag/src/laser_tag/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	despot/examples/cpp_models/tag/src/noisy_laser_tag/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	despot/examples/cpp_models/tag/src/tag/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	despot/examples/cpp_models/tiger/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeModel	despot/examples/pomdpx_models/src/main.cpp	/^  DSPOMDP* InitializeModel(option::Option* options) {$/;"	f	class:TUI
InitializeSolver	despot/src/simple_tui.cpp	/^Solver *SimpleTUI::InitializeSolver(DSPOMDP *model, string solver_type,$/;"	f	class:despot::SimpleTUI
InitializeTransitions	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::InitializeTransitions() {$/;"	f	class:despot::BaseRockSample
InsertAfterChild	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertAfterChild(TiXmlNode* afterThis,$/;"	f	class:despot::util::tinyxml::TiXmlNode
InsertBeforeChild	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertBeforeChild(TiXmlNode* beforeThis,$/;"	f	class:despot::util::tinyxml::TiXmlNode
InsertEndChild	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertEndChild(const TiXmlNode& addThis) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
Inside	despot/include/despot/util/grid.h	/^	bool Inside(const Coord& coord) const {$/;"	f	class:despot::Grid
Inside	despot/src/util/floor.cpp	/^bool Floor::Inside(Coord coord) const {$/;"	f	class:despot::Floor
Inside	despot/src/util/floor.cpp	/^bool Floor::Inside(int x, int y) const {$/;"	f	class:despot::Floor
Int16	navi_mdp/include/types.h	/^typedef	short int			Int16;		\/\/< 2 bytes integer -32768 ~ 32767$/;"	t
Int32	navi_mdp/include/types.h	/^typedef int					Int32;		\/\/< 4 bytes integer -2147483648 ~ 2147483647$/;"	t
IntValue	despot/src/util/tinyxml/tinyxml.cpp	/^int TiXmlAttribute::IntValue() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
IsAllocated	despot/include/despot/util/memorypool.h	/^	bool IsAllocated() const {$/;"	f	class:despot::MemoryObject
IsAlpha	despot/src/util/tinyxml/tinyxmlparser.cpp	/^\/*static*\/int TiXmlBase::IsAlpha(unsigned char anyByte,$/;"	f	class:despot::util::tinyxml::TiXmlBase
IsAlphaNum	despot/src/util/tinyxml/tinyxmlparser.cpp	/^\/*static*\/int TiXmlBase::IsAlphaNum(unsigned char anyByte,$/;"	f	class:despot::util::tinyxml::TiXmlBase
IsIdentityUnderConstraint	despot/src/pomdpx/parser/function.cpp	/^bool HierarchyCPT::IsIdentityUnderConstraint(const NamedVar* var,$/;"	f	class:despot::HierarchyCPT
IsIdentityUnderConstraint	despot/src/pomdpx/parser/function.cpp	/^bool TabularCPT::IsIdentityUnderConstraint(const NamedVar* var,$/;"	f	class:despot::TabularCPT
IsInTerminalStateSet	despot/src/pomdpx/parser/parser.cpp	/^bool Parser::IsInTerminalStateSet(const vector<int>& state) const {$/;"	f	class:despot::Parser
IsLeaf	despot/src/core/node.cpp	/^bool VNode::IsLeaf() {$/;"	f	class:despot::VNode
IsNotInitilized	human_filter/src/edge_leg_filter_node.cpp	/^bool IsNotInitilized = true;$/;"	v
IsNotInitilized	human_filter/src/followme_action.cpp	/^bool IsNotInitilized = true;$/;"	v
IsNotInitilized	human_filter/src/people_tracking_node.cpp	/^bool IsNotInitilized = true;$/;"	v
IsNotInitilized	human_filter/src/service_test.cpp	/^bool IsNotInitilized = true;$/;"	v
IsSelfLoopingWithoutReward	despot/src/pomdpx/parser/parser.cpp	/^bool Parser::IsSelfLoopingWithoutReward(const vector<int>& state) const {$/;"	f	class:despot::Parser
IsTargetMoved	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::IsTargetMoved(float target_x, float target_y, float criterion)$/;"	f	class:Dynamic_Manager
IsTargetMoved	navi_mdp/src/MDPmanager.cpp	/^bool MDPManager::IsTargetMoved(float target_x, float target_y, float criterion)$/;"	f	class:MDPManager
IsTerminalState	despot/include/despot/pomdpx/parser/parser.h	/^	inline bool IsTerminalState(const std::vector<int>& state) const {$/;"	f	class:despot::Parser
IsType	despot/include/despot/util/util.h	/^bool IsType(const SrcType* src) {$/;"	f	namespace:despot
IsValid	despot/examples/cpp_models/chain/src/chain.cpp	/^bool ChainState::IsValid() const {$/;"	f	class:despot::ChainState
IsVariableCurrName	despot/src/pomdpx/parser/variable.cpp	/^bool Variable::IsVariableCurrName(string name, const vector<StateVar>& vars) {$/;"	f	class:despot::Variable
IsVariableName	despot/src/pomdpx/parser/variable.cpp	/^bool Variable::IsVariableName(string name, const vector<NamedVar>& vars) {$/;"	f	class:despot::Variable
IsVariableName	despot/src/pomdpx/parser/variable.cpp	/^bool Variable::IsVariableName(string name, const vector<StateVar>& vars) {$/;"	f	class:despot::Variable
IsVariablePrevName	despot/src/pomdpx/parser/variable.cpp	/^bool Variable::IsVariablePrevName(string name, const vector<StateVar>& vars) {$/;"	f	class:despot::Variable
IsWhiteSpace	despot/include/despot/util/tinyxml/tinyxml.h	/^	inline static bool IsWhiteSpace(char c) {$/;"	f	class:despot::util::tinyxml::TiXmlBase
IsWhiteSpace	despot/include/despot/util/tinyxml/tinyxml.h	/^	inline static bool IsWhiteSpace(int c) {$/;"	f	class:despot::util::tinyxml::TiXmlBase
IsWhiteSpaceCondensed	despot/include/despot/util/tinyxml/tinyxml.h	/^	static bool IsWhiteSpaceCondensed() {$/;"	f	class:despot::util::tinyxml::TiXmlBase
IsinDynamicMap	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::IsinDynamicMap(float global_x, float global_y)$/;"	f	class:Dynamic_Manager
IsinDynamicMap	navi_mdp/src/MDPmanager.cpp	/^bool MDPManager::IsinDynamicMap(float global_x, float global_y)$/;"	f	class:MDPManager
IterateChildren	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
IterateChildren	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* IterateChildren(const TiXmlNode* previous) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
IterateChildren	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* IterateChildren(const char * _value, const TiXmlNode* previous) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
IterateChildren	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
IterateChildren	despot/src/util/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren(const TiXmlNode* previous) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
IterateChildren	despot/src/util/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren(const char * val,$/;"	f	class:despot::util::tinyxml::TiXmlNode
Keyboard	ros-keyboard/src/keyboard.cpp	/^keyboard::Keyboard::Keyboard( int repeat_delay, int repeat_interval )$/;"	f	class:keyboard::Keyboard
Keyboard	ros-keyboard/src/keyboard.h	/^  class Keyboard {$/;"	c	namespace:keyboard
LASERTAG_H	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.h	2;"	d
LASER_ANGLE_MAX	villa_navi_service/include/navi_service_node.h	54;"	d
LASER_ANGLE_MIN	villa_navi_service/include/navi_service_node.h	53;"	d
LASER_ANGLE_RES	villa_navi_service/include/navi_service_node.h	48;"	d
LASER_ANGLE_STEP	villa_navi_service/include/navi_service_node.h	55;"	d
LASER_Data_Length	villa_navi_service/include/navi_service_node.h	49;"	d
LASER_Dist_person	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	42;"	d
LASER_Dist_person	human_filter/include/people_tracking_filter/followme_action.h	47;"	d
LASER_Dist_person	human_filter/include/people_tracking_filter/service_test.h	43;"	d
LASER_Point_Step	villa_navi_service/include/navi_service_node.h	50;"	d
LASER_TAG_BIN	despot/examples/cpp_models/tag/Makefile	/^LASER_TAG_BIN = lasertag $/;"	m
LASER_TAG_SOURCES	despot/examples/cpp_models/tag/Makefile	/^LASER_TAG_SOURCES = $(shell find -L $(SRCDIR)\/base $(SRCDIR)\/laser_tag -name '*.cpp')$/;"	m
LASER_range_person	navi_mdp/include/Dynamic_Manager.h	56;"	d
LASER_range_person	navi_mdp/include/MDPmanager.h	55;"	d
LDFLAGS	despot/Makefile	/^LDFLAGS = -O3 -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	despot/examples/cpp_models/adventurer/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	despot/examples/cpp_models/bridge/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	despot/examples/cpp_models/chain/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	despot/examples/cpp_models/localnavigation/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	despot/examples/cpp_models/navigation/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	despot/examples/cpp_models/pathfollowing/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	despot/examples/cpp_models/pocman/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	despot/examples/cpp_models/reg_demo/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	despot/examples/cpp_models/rock_sample/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	despot/examples/cpp_models/simpleNavi/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	despot/examples/cpp_models/simple_rock_sample/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	despot/examples/cpp_models/tag/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	despot/examples/cpp_models/tiger/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LDFLAGS	despot/examples/pomdpx_models/Makefile	/^LDFLAGS = -O3 -Wall -Wno-sign-compare $(GPROF)$/;"	m
LEFT	despot/examples/cpp_models/bridge/src/bridge.cpp	/^int Bridge::LEFT = 0;$/;"	m	class:despot::Bridge	file:
LEFT	despot/examples/cpp_models/bridge/src/bridge.h	/^	static int LEFT, RIGHT, HELP, BRIDGELENGTH;$/;"	m	class:despot::Bridge
LEFT	despot/examples/cpp_models/tiger/src/tiger.cpp	/^const int Tiger::LEFT = 0;$/;"	m	class:despot::Tiger	file:
LEFT	despot/examples/cpp_models/tiger/src/tiger.h	/^	static const int LEFT, RIGHT, LISTEN;$/;"	m	class:despot::Tiger
LIBDIR	despot/examples/cpp_models/adventurer/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	despot/examples/cpp_models/bridge/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	despot/examples/cpp_models/chain/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	despot/examples/cpp_models/localnavigation/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	despot/examples/cpp_models/navigation/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	despot/examples/cpp_models/pathfollowing/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	despot/examples/cpp_models/pocman/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	despot/examples/cpp_models/reg_demo/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	despot/examples/cpp_models/rock_sample/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	despot/examples/cpp_models/simpleNavi/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	despot/examples/cpp_models/simple_rock_sample/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	despot/examples/cpp_models/tag/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	despot/examples/cpp_models/tiger/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LIBDIR	despot/examples/pomdpx_models/Makefile	/^LIBDIR = $(DESPOTHOME)\/build$/;"	m
LISTEN	despot/examples/cpp_models/tiger/src/tiger.cpp	/^const int Tiger::LISTEN = 2;$/;"	m	class:despot::Tiger	file:
LISTEN	despot/examples/cpp_models/tiger/src/tiger.h	/^	static const int LEFT, RIGHT, LISTEN;$/;"	m	class:despot::Tiger
LOG	despot/include/despot/util/logging.h	53;"	d
LOGGING_H	despot/include/despot/util/logging.h	2;"	d
LOWER_BOUND_H	despot/include/despot/core/lower_bound.h	2;"	d
LaserCallback	edge_leg_detector/src/detector.cpp	/^void LaserCallback (const sensor_msgs::LaserScan::ConstPtr& msg){$/;"	f
LaserCallback	edge_leg_detector/src/edge_leg_detector/detector.cpp	/^void LaserCallback (const sensor_msgs::LaserScan::ConstPtr& msg){$/;"	f
LaserFilter_Mean	edge_leg_detector/src/detector.cpp	/^void LaserFilter_Mean( vector <double> *vector_r, unsigned size ){$/;"	f
LaserFilter_Mean	edge_leg_detector/src/edge_leg_detector/detector.cpp	/^void LaserFilter_Mean( vector <double> *vector_r, unsigned size ){$/;"	f
LaserRange	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^double LaserTag::LaserRange(const State& state, int dir) const {$/;"	f	class:despot::LaserTag
LaserRange	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^double NoisyLaserTag::LaserRange(const State& state, int dir) const {$/;"	f	class:despot::NoisyLaserTag
LaserTag	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^LaserTag::LaserTag() :$/;"	f	class:despot::LaserTag
LaserTag	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^LaserTag::LaserTag(string params_file) :$/;"	f	class:despot::LaserTag
LaserTag	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.h	/^class LaserTag: public BaseTag {$/;"	c	namespace:despot
Last	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* Last() {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
Last	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlAttribute* Last() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
LastAction	despot/include/despot/core/history.h	/^	int LastAction() const {$/;"	f	class:despot::History
LastAttribute	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* LastAttribute() {$/;"	f	class:despot::util::tinyxml::TiXmlElement
LastAttribute	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlAttribute* LastAttribute() const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
LastChild	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* LastChild( const std::string& _value ) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
LastChild	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* LastChild() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
LastChild	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* LastChild(const char * _value) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
LastChild	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* LastChild( const std::string& _value ) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
LastChild	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* LastChild() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
LastChild	despot/src/util/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::LastChild(const char * _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
LastObservation	despot/include/despot/core/history.h	/^	OBS_TYPE LastObservation() const {$/;"	f	class:despot::History
Last_Action	despot/src/evaluator.cpp	/^int Last_Action =0;$/;"	m	namespace:despot	file:
Last_detected_human	villa_navi_service/include/navi_service_node.h	/^	std::vector< std::vector< double > > Last_detected_human;$/;"	m	class:villa_navi_srv
Learn	despot/src/core/lower_bound.cpp	/^void BeliefLowerBound::Learn(VNode* tree) {$/;"	f	class:despot::BeliefLowerBound
Learn	despot/src/core/lower_bound.cpp	/^void ScenarioLowerBound::Learn(VNode* tree) {$/;"	f	class:despot::ScenarioLowerBound
Leg_boxes_pub	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::Publisher Leg_boxes_pub;$/;"	m	class:Edgeleg_manager
Leg_boxes_pub	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::Publisher Leg_boxes_pub;$/;"	m	class:Edgeleg_manager_action
Leg_boxes_pub	human_filter/include/people_tracking_filter/service_test.h	/^  ros::Publisher Leg_boxes_pub;$/;"	m	class:Edgeleg_manager_srv
Leg_boxes_pub	navi_mdp/include/Dynamic_Manager.h	/^	ros::Publisher   Leg_boxes_pub;$/;"	m	class:Dynamic_Manager
Length	despot/src/random_streams.cpp	/^int RandomStreams::Length() const {$/;"	f	class:despot::RandomStreams
Likelihood	despot/src/solver/aems.cpp	/^double AEMS::Likelihood(QNode* qnode) {$/;"	f	class:despot::AEMS
LineBreak	despot/include/despot/util/tinyxml/tinyxml.h	/^	const char* LineBreak() {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
LinePartIterator	despot/include/despot/util/optionparser.h	/^		LinePartIterator(const Descriptor usage[]) :$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
LinePartIterator	despot/include/despot/util/optionparser.h	/^	class LinePartIterator {$/;"	c	struct:despot::option::PrintUsageImplementation
LineWrapper	despot/include/despot/util/optionparser.h	/^		LineWrapper(int x1, int x2) :$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
LineWrapper	despot/include/despot/util/optionparser.h	/^	class LineWrapper {$/;"	c	struct:despot::option::PrintUsageImplementation
LinkEndChild	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlNode::LinkEndChild(TiXmlNode* node) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
LoadFile	despot/include/despot/util/tinyxml/tinyxml.h	/^	bool LoadFile( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING ) \/\/\/< STL std::string version.$/;"	f	class:despot::util::tinyxml::TiXmlDocument
LoadFile	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::LoadFile(FILE* file, TiXmlEncoding encoding) {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
LoadFile	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::LoadFile(TiXmlEncoding encoding) {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
LoadFile	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::LoadFile(const char* _filename, TiXmlEncoding encoding) {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
LocalApproxScenarioUpperBound	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	LocalApproxScenarioUpperBound(const Navigation* model) :$/;"	f	class:despot::LocalApproxScenarioUpperBound
LocalApproxScenarioUpperBound	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^class LocalApproxScenarioUpperBound: public ScenarioUpperBound {$/;"	c	namespace:despot	file:
LocalApproxScenarioUpperBound	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	LocalApproxScenarioUpperBound(const Navigation* model) :$/;"	f	class:despot::LocalApproxScenarioUpperBound
LocalApproxScenarioUpperBound	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^class LocalApproxScenarioUpperBound: public ScenarioUpperBound {$/;"	c	namespace:despot	file:
LocalLegalParticleLowerBound	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	LocalLegalParticleLowerBound(const DSPOMDP* model) :$/;"	f	class:despot::LocalLegalParticleLowerBound
LocalLegalParticleLowerBound	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^class LocalLegalParticleLowerBound: public ParticleLowerBound {$/;"	c	namespace:despot	file:
LocalLegalParticleLowerBound	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	LocalLegalParticleLowerBound(const DSPOMDP* model) :$/;"	f	class:despot::LocalLegalParticleLowerBound
LocalLegalParticleLowerBound	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^class LocalLegalParticleLowerBound: public ParticleLowerBound {$/;"	c	namespace:despot	file:
LocalMove	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^bool Navigation::LocalMove(State& state, const History& history, int obs) const {$/;"	f	class:despot::Navigation
LocalMove	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^bool Navigation::LocalMove(State& state, const History& history, int obs) const {$/;"	f	class:despot::Navigation
LocalMove	despot/examples/cpp_models/pocman/src/pocman.cpp	/^bool Pocman::LocalMove(State& state, const History& history, int obs) const {$/;"	f	class:despot::Pocman
LocalNaviPOMCPPrior	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	LocalNaviPOMCPPrior(const Navigation* model) :$/;"	f	class:despot::LocalNaviPOMCPPrior
LocalNaviPOMCPPrior	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^class LocalNaviPOMCPPrior: public POMCPPrior {$/;"	c	namespace:despot	file:
LocalNaviPOMCPPrior	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	LocalNaviPOMCPPrior(const Navigation* model) :$/;"	f	class:despot::LocalNaviPOMCPPrior
LocalNaviPOMCPPrior	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^class LocalNaviPOMCPPrior: public POMCPPrior {$/;"	c	namespace:despot	file:
Local_X_start	navi_mdp/include/Dynamic_Manager.h	/^ 	int Local_X_start;$/;"	m	class:Dynamic_Manager
Local_X_start	navi_mdp/include/MDPmanager.h	/^ 	int Local_X_start;$/;"	m	class:MDPManager
Local_Y_start	navi_mdp/include/Dynamic_Manager.h	/^ 	int Local_Y_start;$/;"	m	class:Dynamic_Manager
Local_Y_start	navi_mdp/include/MDPmanager.h	/^ 	int Local_Y_start;$/;"	m	class:MDPManager
Local_mapCallback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Local_mapCallback(const nav_msgs::OccupancyGrid::ConstPtr& msg)$/;"	f	class:MDPManager
Localmap_sub	navi_mdp/include/MDPmanager.h	/^	ros::Subscriber  Localmap_sub;$/;"	m	class:MDPManager
LocalnaviSmartPolicy	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	LocalnaviSmartPolicy(const Navigation* model, ParticleLowerBound* bound) :$/;"	f	class:despot::LocalnaviSmartPolicy
LocalnaviSmartPolicy	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^class LocalnaviSmartPolicy : public Policy {$/;"	c	namespace:despot	file:
LocalnaviSmartPolicy	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	LocalnaviSmartPolicy(const Navigation* model, ParticleLowerBound* bound) :$/;"	f	class:despot::LocalnaviSmartPolicy
LocalnaviSmartPolicy	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^class LocalnaviSmartPolicy : public Policy {$/;"	c	namespace:despot	file:
LocalnavigationParticleUpperBound	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	LocalnavigationParticleUpperBound(const Navigation* model) :$/;"	f	class:despot::LocalnavigationParticleUpperBound
LocalnavigationParticleUpperBound	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^class LocalnavigationParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
LocalnavigationParticleUpperBound	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	LocalnavigationParticleUpperBound(const Navigation* model) :$/;"	f	class:despot::LocalnavigationParticleUpperBound
LocalnavigationParticleUpperBound	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^class LocalnavigationParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
LogNumInitialStates	despot/src/pomdpx/parser/parser.cpp	/^double Parser::LogNumInitialStates() const {$/;"	f	class:despot::Parser
LogNumObservations	despot/src/pomdpx/parser/parser.cpp	/^double Parser::LogNumObservations() const {$/;"	f	class:despot::Parser
LogNumStates	despot/src/pomdpx/parser/parser.cpp	/^double Parser::LogNumStates() const {$/;"	f	class:despot::Parser
LookaheadUpperBound	despot/include/despot/core/upper_bound.h	/^class LookaheadUpperBound: public ScenarioUpperBound {$/;"	c	namespace:despot
LookaheadUpperBound	despot/src/core/upper_bound.cpp	/^LookaheadUpperBound::LookaheadUpperBound(const DSPOMDP* model,$/;"	f	class:despot::LookaheadUpperBound
MARKERS_MAX	navi_mdp/scripts/human_marker.py	/^MARKERS_MAX = 100$/;"	v
MATH_PI	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	40;"	d
MATH_PI	human_filter/include/people_tracking_filter/followme_action.h	45;"	d
MATH_PI	human_filter/include/people_tracking_filter/service_test.h	41;"	d
MATH_PI	navi_mdp/include/Dynamic_Manager.h	64;"	d
MATH_PI	villa_navi_service/include/navi_service_node.h	37;"	d
MAX_ENTITY_LENGTH	despot/include/despot/util/tinyxml/tinyxml.h	/^		NUM_ENTITY = 5, MAX_ENTITY_LENGTH = 6$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon4
MAX_UPDATE_ITER	villa_navi_service/include/navi_service_node.h	46;"	d
MAX_VIEW_UPDATE_ITER	villa_navi_service/include/navi_service_node.h	47;"	d
MCPDF_POSVEL_H	human_filter/include/people_tracking_filter/mcpdf_pos_vel.h	38;"	d
MCPDF_VECTOR_H	human_filter/include/people_tracking_filter/mcpdf_vector.h	38;"	d
MCPdfPosVel	human_filter/include/people_tracking_filter/mcpdf_pos_vel.h	/^class MCPdfPosVel: public MCPdf<StatePosVel>$/;"	c	namespace:BFL
MCPdfPosVel	human_filter/src/mcpdf_pos_vel.cpp	/^MCPdfPosVel::MCPdfPosVel(unsigned int num_samples)$/;"	f	class:MCPdfPosVel
MCPdfVector	human_filter/include/people_tracking_filter/mcpdf_vector.h	/^class MCPdfVector: public MCPdf<tf::Vector3>$/;"	c	namespace:BFL
MCPdfVector	human_filter/src/mcpdf_vector.cpp	/^MCPdfVector::MCPdfVector(unsigned int num_samples)$/;"	f	class:MCPdfVector
MDP	despot/include/despot/core/mdp.h	/^class MDP {$/;"	c	namespace:despot
MDPManager	navi_mdp/include/MDPmanager.h	/^ 	MDPManager():maxiter(Maxiteration),Action_dim(8),gamma(1),Ra(ra),publishnum(0),m_boolPath(false),m_boolSolve(false){}$/;"	f	class:MDPManager
MDPManager	navi_mdp/include/MDPmanager.h	/^class MDPManager$/;"	c
MDPManager	navi_mdp/src/MDPmanager.cpp	/^MDPManager::MDPManager(MapParam* _pMapParam):maxiter(Maxiteration),Action_dim(8),gamma(1),Ra(ra),publishnum(0),ReceiveData(0),m_boolSolve(false),dyn_path_num(0)$/;"	f	class:MDPManager
MDPPath	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<int>  MDPPath;$/;"	m	class:Dynamic_Manager
MDPPath	navi_mdp/include/MDPmanager.h	/^ 	vector<int>  MDPPath;$/;"	m	class:MDPManager
MDPSol_pub	navi_mdp/include/Dynamic_Manager.h	/^	ros::Publisher   MDPSol_pub;$/;"	m	class:Dynamic_Manager
MDPSol_pub	navi_mdp/include/MDPmanager.h	/^	ros::Publisher   MDPSol_pub;$/;"	m	class:MDPManager
MDPUpperBound	despot/include/despot/core/upper_bound.h	/^class MDPUpperBound: public ParticleUpperBound, public BeliefUpperBound {$/;"	c	namespace:despot
MDPUpperBound	despot/src/core/upper_bound.cpp	/^MDPUpperBound::MDPUpperBound(const MDP* model,$/;"	f	class:despot::MDPUpperBound
MDP_H	despot/include/despot/core/mdp.h	2;"	d
MDPsolPublish	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::MDPsolPublish()$/;"	f	class:MDPManager
MDPsolve	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::MDPsolve()$/;"	f	class:Dynamic_Manager
MDPsolve	navi_mdp/src/MDPmanager.cpp	/^bool MDPManager::MDPsolve()$/;"	f	class:MDPManager
MEASMODEL_POS_H	human_filter/include/people_tracking_filter/measmodel_pos.h	38;"	d
MEASMODEL_VECTOR_H	human_filter/include/people_tracking_filter/measmodel_vector.h	39;"	d
MEMORYPOOL_H	despot/include/despot/util/memorypool.h	2;"	d
MMAPInferencer	despot/include/despot/core/pomdp.h	/^class MMAPInferencer {$/;"	c	namespace:despot
MMAPStatePolicy	despot/include/despot/core/policy.h	/^class MMAPStatePolicy: public Policy { \/\/ Marginal MAP state policy$/;"	c	namespace:despot
MMAPStatePolicy	despot/src/core/policy.cpp	/^MMAPStatePolicy::MMAPStatePolicy(const DSPOMDP* model,$/;"	f	class:despot::MMAPStatePolicy
MSC_Builtin_CLZ	despot/include/despot/util/optionparser.h	/^struct MSC_Builtin_CLZ$/;"	s	namespace:despot::option
MajorityActionPolicy	despot/include/despot/core/policy.h	/^class MajorityActionPolicy: public Policy {$/;"	c	namespace:despot
MajorityActionPolicy	despot/src/core/policy.cpp	/^MajorityActionPolicy::MajorityActionPolicy(const DSPOMDP* model,$/;"	f	class:despot::MajorityActionPolicy
MajorityRockSampleState	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^RockSampleState* BaseRockSample::MajorityRockSampleState($/;"	f	class:despot::BaseRockSample
MakeCopy	despot/examples/cpp_models/chain/src/chain.cpp	/^Belief* FullChainBelief::MakeCopy() const {$/;"	f	class:despot::FullChainBelief
MakeCopy	despot/examples/cpp_models/chain/src/chain.cpp	/^Belief* SemiChainBelief::MakeCopy() const {$/;"	f	class:despot::SemiChainBelief
MakeCopy	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	Belief* MakeCopy() const {$/;"	f	class:despot::RockSampleBelief
MakeCopy	despot/include/despot/core/pomdp.h	/^	inline virtual DSPOMDP* MakeCopy() const {$/;"	f	class:despot::DSPOMDP
MakeCopy	despot/src/core/belief.cpp	/^Belief* ParticleBelief::MakeCopy() const {$/;"	f	class:despot::ParticleBelief
MakeCopy	despot/src/pomdpx/pomdpx.cpp	/^DSPOMDP* POMDPX::MakeCopy() const {$/;"	f	class:despot::POMDPX
MakeObservations	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^int Navigation::MakeObservations(const NavigationState& navstate) const {$/;"	f	class:despot::Navigation
MakeObservations	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^int Navigation::MakeObservations(const NavigationState& navstate) const {$/;"	f	class:despot::Navigation
MakeObservations	despot/examples/cpp_models/pocman/src/pocman.cpp	/^int Pocman::MakeObservations(const PocmanState& pocstate) const {$/;"	f	class:despot::Pocman
ManhattanDistance	despot/src/util/coord.cpp	/^int Coord::ManhattanDistance(Coord c1, Coord c2) {$/;"	f	class:despot::Coord
MapCoord	navi_mdp/include/Dynamic_Manager.h	/^	std::vector<int> MapCoord;$/;"	m	class:Dynamic_Manager
MapCoord	navi_mdp/include/MDPmanager.h	/^	std::vector<int> MapCoord;$/;"	m	class:MDPManager
MapParam	navi_mdp/include/MapParam.h	/^class MapParam$/;"	c
MapParam	navi_mdp/src/MapParam.cpp	/^MapParam::MapParam()$/;"	f	class:MapParam
MapParam	navi_mdp/src/MapParam.cpp	/^MapParam::MapParam(int width_,int height_,double res_)$/;"	f	class:MapParam
MapSize	navi_mdp/include/MapParam.h	/^	int                 MapSize;$/;"	m	class:MapParam
Map_orig_Vector	navi_mdp/include/Dynamic_Manager.h	/^ 	std::vector<double> Map_orig_Vector;$/;"	m	class:Dynamic_Manager
Map_orig_Vector	navi_mdp/include/MDPmanager.h	/^ 	std::vector<double> Map_orig_Vector;$/;"	m	class:MDPManager
Mapcoord2DynamicCoord	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::Mapcoord2DynamicCoord(const vector<int>& _Mapcoord, vector<double>& dynamicCoord)$/;"	f	class:Dynamic_Manager
Mapcoord2DynamicCoord	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Mapcoord2DynamicCoord(const vector<int>& _Mapcoord, vector<double>& dynamicCoord)$/;"	f	class:MDPManager
Mapcoord2GlobalCoord	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::Mapcoord2GlobalCoord(const vector<int>& _Mapcoord, vector<double>& GlobalCoord)$/;"	f	class:Dynamic_Manager
Mapcoord2GlobalCoord	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Mapcoord2GlobalCoord(const vector<int>& _Mapcoord, vector<double>& GlobalCoord)$/;"	f	class:MDPManager
Maxiteration	navi_mdp/include/Dynamic_Manager.h	55;"	d
Maxiteration	navi_mdp/include/MDPmanager.h	54;"	d
MdpSols	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<int> 	  MdpSols;		\/\/ Solution of MDP$/;"	m	class:Dynamic_Manager
MdpSols	navi_mdp/include/MDPmanager.h	/^ 	vector<int> 	  MdpSols;		\/\/ Solution of MDP$/;"	m	class:MDPManager
MeanMDPPolicy	despot/examples/cpp_models/chain/src/chain.cpp	/^	MeanMDPPolicy(const Chain* model, ParticleLowerBound* bound, Belief* belief = NULL) :$/;"	f	class:despot::MeanMDPPolicy
MeanMDPPolicy	despot/examples/cpp_models/chain/src/chain.cpp	/^class MeanMDPPolicy: public Policy {$/;"	c	namespace:despot	file:
MeanMDPScenarioLowerBound	despot/examples/cpp_models/chain/src/chain.cpp	/^	MeanMDPScenarioLowerBound(const Chain* model, Belief* belief = NULL) :$/;"	f	class:despot::MeanMDPScenarioLowerBound
MeanMDPScenarioLowerBound	despot/examples/cpp_models/chain/src/chain.cpp	/^class MeanMDPScenarioLowerBound: public ScenarioLowerBound {$/;"	c	namespace:despot	file:
MeasModelPos	human_filter/include/people_tracking_filter/measmodel_pos.h	/^  MeasModelPos(const tf::Vector3& sigma)$/;"	f	class:BFL::MeasModelPos
MeasModelPos	human_filter/include/people_tracking_filter/measmodel_pos.h	/^class MeasModelPos$/;"	c	namespace:BFL
MeasModelVector	human_filter/include/people_tracking_filter/measmodel_vector.h	/^  MeasModelVector(const tf::Vector3& sigma)$/;"	f	class:BFL::MeasModelVector
MeasModelVector	human_filter/include/people_tracking_filter/measmodel_vector.h	/^class MeasModelVector$/;"	c	namespace:BFL
MeasPdfPos	human_filter/include/people_tracking_filter/measmodel_pos.h	/^class MeasPdfPos$/;"	c	namespace:BFL
MeasPdfPos	human_filter/src/measmodel_pos.cpp	/^MeasPdfPos::MeasPdfPos(const Vector3& sigma)$/;"	f	class:MeasPdfPos
MeasPdfVector	human_filter/include/people_tracking_filter/measmodel_vector.h	/^class MeasPdfVector$/;"	c	namespace:BFL
MeasPdfVector	human_filter/src/measmodel_vector.cpp	/^MeasPdfVector::MeasPdfVector(const Vector3& sigma)$/;"	f	class:MeasPdfVector
MemoryObject	despot/include/despot/util/memorypool.h	/^class MemoryObject {$/;"	c	namespace:despot
MemoryPool	despot/include/despot/util/memorypool.h	/^	MemoryPool() :$/;"	f	class:despot::MemoryPool
MemoryPool	despot/include/despot/util/memorypool.h	/^class MemoryPool {$/;"	c	namespace:despot
MicroPocman	despot/examples/cpp_models/pocman/src/pocman.cpp	/^MicroPocman::MicroPocman() :$/;"	f	class:despot::MicroPocman
MicroPocman	despot/examples/cpp_models/pocman/src/pocman.h	/^class MicroPocman: public Pocman {$/;"	c	namespace:despot
MiniPocman	despot/examples/cpp_models/pocman/src/pocman.cpp	/^MiniPocman::MiniPocman() :$/;"	f	class:despot::MiniPocman
MiniPocman	despot/examples/cpp_models/pocman/src/pocman.h	/^class MiniPocman: public Pocman {$/;"	c	namespace:despot
ModeStatePolicy	despot/include/despot/core/policy.h	/^class ModeStatePolicy: public Policy {$/;"	c	namespace:despot
ModeStatePolicy	despot/src/core/policy.cpp	/^ModeStatePolicy::ModeStatePolicy(const DSPOMDP* model,$/;"	f	class:despot::ModeStatePolicy
MostLikelyOpponentPosition	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^Coord BaseTag::MostLikelyOpponentPosition($/;"	f	class:despot::BaseTag
MostLikelyRobPosition	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^Coord BaseTag::MostLikelyRobPosition(const vector<State*>& particles) const {$/;"	f	class:despot::BaseTag
MostLikelyState	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^const TagState& BaseTag::MostLikelyState($/;"	f	class:despot::BaseTag
MoveGhost	despot/examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::MoveGhost(PocmanState& pocstate, int g, Random &random) const {$/;"	f	class:despot::Pocman
MoveGhostAggressive	despot/examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::MoveGhostAggressive(PocmanState& pocstate, int g,$/;"	f	class:despot::Pocman
MoveGhostDefensive	despot/examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::MoveGhostDefensive(PocmanState& pocstate, int g,$/;"	f	class:despot::Pocman
MoveGhostRandom	despot/examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::MoveGhostRandom(PocmanState& pocstate, int g,$/;"	f	class:despot::Pocman
MovePed	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::MovePed(NavigationState& navstate, int g, Random &random) const {$/;"	f	class:despot::Navigation
MovePed	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::MovePed(NavigationState& navstate, int g, Random &random) const {$/;"	f	class:despot::Navigation
MovePedAggressive	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::MovePedAggressive(NavigationState& navstate, int g, Random &random) const {$/;"	f	class:despot::Navigation
MovePedAggressive	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::MovePedAggressive(NavigationState& navstate, int g, Random &random) const {$/;"	f	class:despot::Navigation
MovePedDefensive	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::MovePedDefensive(NavigationState& navstate, int g,$/;"	f	class:despot::Navigation
MovePedDefensive	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::MovePedDefensive(NavigationState& navstate, int g,$/;"	f	class:despot::Navigation
MovePedPath	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::MovePedPath(NavigationState& navstate, int g,$/;"	f	class:despot::Navigation
MovePedPath	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::MovePedPath(NavigationState& navstate, int g,$/;"	f	class:despot::Navigation
MovePedRandom	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::MovePedRandom(NavigationState& navstate, int g,$/;"	f	class:despot::Navigation
MovePedRandom	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::MovePedRandom(NavigationState& navstate, int g,$/;"	f	class:despot::Navigation
N	navi_mdp/include/srBSpline.h	/^	inline double N( int IndexCP, double u ) { return OneBasisFun( IndexCP, u ); }$/;"	f	class:srBSpline
NAVIGATION_H	despot/examples/cpp_models/localnavigation/src/localnavigation.h	2;"	d
NAVIGATION_H	despot/examples/cpp_models/navigation/src/navigation.h	2;"	d
NAVIGATION_H	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	2;"	d
NBEAMS	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^int LaserTag::NBEAMS = 8;$/;"	m	class:despot::LaserTag	file:
NBEAMS	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.h	/^	static int NBEAMS;$/;"	m	class:despot::LaserTag
NBEAMS	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^int NoisyLaserTag::NBEAMS = 8;$/;"	m	class:despot::NoisyLaserTag	file:
NBEAMS	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.h	/^	static int NBEAMS;$/;"	m	class:despot::NoisyLaserTag
NEG_INFTY	despot/src/core/globals.cpp	/^const double NEG_INFTY = -POS_INFTY;$/;"	m	namespace:despot::Globals	file:
NODE_H	despot/include/despot/core/node.h	2;"	d
NOISE	despot/examples/cpp_models/tiger/src/tiger.cpp	/^const double Tiger::NOISE = 0.15;$/;"	m	class:despot::Tiger	file:
NOISE	despot/examples/cpp_models/tiger/src/tiger.h	/^	static const double NOISE;$/;"	m	class:despot::Tiger
NOISYLASERTAG_H	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.h	2;"	d
NOISY_TAG_BIN	despot/examples/cpp_models/tag/Makefile	/^NOISY_TAG_BIN = noisytag $/;"	m
NOISY_TAG_SOURCES	despot/examples/cpp_models/tag/Makefile	/^NOISY_TAG_SOURCES = $(shell find -L $(SRCDIR)\/base $(SRCDIR)\/noisy_laser_tag -name '*.cpp')$/;"	m
NONE	despot/include/despot/util/logging.h	/^	static const int NONE, ERROR, WARN, INFO, DEBUG, VERBOSE;$/;"	m	class:despot::logging
NONE	despot/src/util/logging.cpp	/^const int logging::NONE = 0;$/;"	m	class:despot::logging	file:
NORTH	despot/include/despot/util/coord.h	/^		SOUTH, EAST, NORTH, WEST, NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST$/;"	e	enum:despot::Compass::__anon1
NORTHEAST	despot/include/despot/util/coord.h	/^		SOUTH, EAST, NORTH, WEST, NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST$/;"	e	enum:despot::Compass::__anon1
NORTHWEST	despot/include/despot/util/coord.h	/^		SOUTH, EAST, NORTH, WEST, NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST$/;"	e	enum:despot::Compass::__anon1
NUM_CONDARG	human_filter/src/mcpdf_pos_vel.cpp	/^static const unsigned int NUM_CONDARG   = 1;$/;"	v	file:
NUM_CONDARG	human_filter/src/mcpdf_vector.cpp	/^static const unsigned int NUM_CONDARG   = 1;$/;"	v	file:
NUM_ENTITY	despot/include/despot/util/tinyxml/tinyxml.h	/^		NUM_ENTITY = 5, MAX_ENTITY_LENGTH = 6$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon4
NUM_MDP_STATES	despot/examples/cpp_models/chain/src/chain.h	/^	const static int NUM_MDP_STATES = 5;$/;"	m	class:despot::Chain
NUM_MEASMODEL_POS_COND_ARGS	human_filter/src/measmodel_pos.cpp	/^static const unsigned int NUM_MEASMODEL_POS_COND_ARGS   = 1;$/;"	v	file:
NUM_MEASMODEL_VECTOR_COND_ARGS	human_filter/src/measmodel_vector.cpp	/^static const unsigned int NUM_MEASMODEL_VECTOR_COND_ARGS  = 1;$/;"	v	file:
NUM_SYS_POS_VEL_COND_ARGS	human_filter/src/sysmodel_pos_vel.cpp	/^static const unsigned int NUM_SYS_POS_VEL_COND_ARGS = 1;$/;"	v	file:
NUM_SYS_VECTOR_COND_ARGS	human_filter/src/sysmodel_vector.cpp	/^static const unsigned int NUM_SYS_VECTOR_COND_ARGS  = 1;$/;"	v	file:
Name	despot/include/despot/util/tinyxml/tinyxml.h	/^	const char* Name() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
NameTStr	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TIXML_STRING& NameTStr() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
NamedVar	despot/include/despot/pomdpx/parser/variable.h	/^class NamedVar: public Variable {$/;"	c	namespace:despot
NamedVar	despot/src/pomdpx/parser/variable.cpp	/^NamedVar::NamedVar() {$/;"	f	class:despot::NamedVar
NamedVar	despot/src/pomdpx/parser/variable.cpp	/^NamedVar::NamedVar(string name) :$/;"	f	class:despot::NamedVar
Navigation	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^Navigation::Navigation(int xsize, int ysize):localmap( xsize, ysize), num_peds_(3),pedes_range_(2),	smell_range_(2), round_num(0){$/;"	f	class:despot::Navigation
Navigation	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^Navigation::Navigation(string params_file) {$/;"	f	class:despot::Navigation
Navigation	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^class Navigation: public DSPOMDP {$/;"	c	namespace:despot
Navigation	despot/examples/cpp_models/navigation/src/navigation.cpp	/^Navigation::Navigation() {$/;"	f	class:despot::Navigation
Navigation	despot/examples/cpp_models/navigation/src/navigation.cpp	/^Navigation::Navigation(string params_file) {$/;"	f	class:despot::Navigation
Navigation	despot/examples/cpp_models/navigation/src/navigation.h	/^class Navigation: public DSPOMDP,$/;"	c	namespace:despot
Navigation	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^Navigation::Navigation(int xsize, int ysize):localmap( xsize, ysize), num_peds_(4),pedes_range_(2),	smell_range_(2), path_index(0){$/;"	f	class:despot::Navigation
Navigation	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^Navigation::Navigation(string params_file) {$/;"	f	class:despot::Navigation
Navigation	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^class Navigation: public DSPOMDP {$/;"	c	namespace:despot
NavigationBelief	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^NavigationBelief::NavigationBelief(vector<State*> particles, const DSPOMDP* model,$/;"	f	class:despot::NavigationBelief
NavigationBelief	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^class NavigationBelief: public ParticleBelief {$/;"	c	namespace:despot
NavigationBelief	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^NavigationBelief::NavigationBelief(vector<State*> particles, const DSPOMDP* model,$/;"	f	class:despot::NavigationBelief
NavigationBelief	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^class NavigationBelief: public ParticleBelief {$/;"	c	namespace:despot
NavigationState	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^NavigationState::NavigationState(){$/;"	f	class:despot::NavigationState
NavigationState	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^NavigationState::NavigationState(int _state_id) {$/;"	f	class:despot::NavigationState
NavigationState	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^class NavigationState: public State {$/;"	c	namespace:despot
NavigationState	despot/examples/cpp_models/navigation/src/navigation.cpp	/^NavigationState::NavigationState() {$/;"	f	class:despot::NavigationState
NavigationState	despot/examples/cpp_models/navigation/src/navigation.cpp	/^NavigationState::NavigationState(int _state_id) {$/;"	f	class:despot::NavigationState
NavigationState	despot/examples/cpp_models/navigation/src/navigation.h	/^class NavigationState: public State {$/;"	c	namespace:despot
NavigationState	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^NavigationState::NavigationState(){$/;"	f	class:despot::NavigationState
NavigationState	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^NavigationState::NavigationState(int _state_id) {$/;"	f	class:despot::NavigationState
NavigationState	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^class NavigationState: public State {$/;"	c	namespace:despot
Navigation_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	const Navigation* Navigation_;$/;"	m	class:despot::NavigationBelief
Navigation_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	const Navigation* Navigation_;$/;"	m	class:despot::NavigationBelief
NearestHuman_V	navi_mdp/include/MapParam.h	/^	std::vector<float>  NearestHuman_V;$/;"	m	class:MapParam
NewChunk	despot/include/despot/util/memorypool.h	/^	void NewChunk() {$/;"	f	class:despot::MemoryPool
NewLevel	despot/examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::NewLevel(PocmanState& pocstate) const {$/;"	f	class:despot::Pocman
Next	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* Next() {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
Next	despot/src/util/dirichlet.cpp	/^vector<double> Dirichlet::Next() {$/;"	f	class:despot::Dirichlet
Next	despot/src/util/dirichlet.cpp	/^vector<double> Dirichlet::Next(vector<double> alpha) {$/;"	f	class:despot::Dirichlet
Next	despot/src/util/gamma.cpp	/^double Gamma::Next() {$/;"	f	class:despot::Gamma
Next	despot/src/util/gamma.cpp	/^double Gamma::Next(double k, double theta) {$/;"	f	class:despot::Gamma
Next	despot/src/util/seeds.cpp	/^unsigned Seeds::Next() {$/;"	f	class:despot::Seeds
Next	despot/src/util/seeds.cpp	/^vector<unsigned> Seeds::Next(int n) {$/;"	f	class:despot::Seeds
Next	despot/src/util/tinyxml/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Next() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
NextCategory	despot/src/util/random.cpp	/^int Random::NextCategory(const vector<double>& category_probs) {$/;"	f	class:despot::Random
NextDouble	despot/src/util/random.cpp	/^double Random::NextDouble() {$/;"	f	class:despot::Random
NextDouble	despot/src/util/random.cpp	/^double Random::NextDouble(double min, double max) {$/;"	f	class:despot::Random
NextElement	despot/include/despot/util/random.h	/^	T NextElement(const std::vector<T>& vec) {$/;"	f	class:despot::Random
NextGaussian	despot/src/util/random.cpp	/^double Random::NextGaussian() {$/;"	f	class:despot::Random
NextInt	despot/src/util/random.cpp	/^int Random::NextInt(int min, int max) {$/;"	f	class:despot::Random
NextInt	despot/src/util/random.cpp	/^int Random::NextInt(int n) {$/;"	f	class:despot::Random
NextPos	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^Coord Navigation::NextPos(const Coord& from, int dir) const {$/;"	f	class:despot::Navigation
NextPos	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^Coord Navigation::NextPos(const Coord& from, int dir) const {$/;"	f	class:despot::Navigation
NextPos	despot/examples/cpp_models/pocman/src/pocman.cpp	/^Coord Pocman::NextPos(const Coord& from, int dir) const {$/;"	f	class:despot::Pocman
NextPosPed	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^Coord Navigation::NextPosPed(const NavigationState& navstate, const Coord& from) const {$/;"	f	class:despot::Navigation
NextPos_Path	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^Coord Navigation::NextPos_Path(const Coord& from, int action,int cur_pathidx) const {$/;"	f	class:despot::Navigation
NextPosition	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^int Navigation::NextPosition(int pos, int a) const {$/;"	f	class:despot::Navigation
NextPosition	despot/examples/cpp_models/navigation/src/navigation.cpp	/^int Navigation::NextPosition(int pos, int a) const {$/;"	f	class:despot::Navigation
NextPosition	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^int Navigation::NextPosition(int pos, int a) const {$/;"	f	class:despot::Navigation
NextRobPosition	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^int BaseTag::NextRobPosition(int rob, int a) const {$/;"	f	class:despot::BaseTag
NextSibling	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* NextSibling( const std::string& _value) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSibling	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* NextSibling() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSibling	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* NextSibling(const char* _next) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSibling	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* NextSibling( const std::string& _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSibling	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* NextSibling() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSibling	despot/src/util/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::NextSibling(const char * _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSiblingElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* NextSiblingElement( const std::string& _value) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSiblingElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* NextSiblingElement() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSiblingElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* NextSiblingElement(const char *_next) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSiblingElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlElement* NextSiblingElement( const std::string& _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSiblingElement	despot/src/util/tinyxml/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextSiblingElement	despot/src/util/tinyxml/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement(const char * _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
NextState	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^int BaseRockSample::NextState(int s, int a) const {$/;"	f	class:despot::BaseRockSample
NextUnsigned	despot/src/util/random.cpp	/^unsigned Random::NextUnsigned() {$/;"	f	class:despot::Random
NoChildren	despot/include/despot/util/tinyxml/tinyxml.h	/^	bool NoChildren() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
Node	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* Node() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
NodeType	despot/include/despot/util/tinyxml/tinyxml.h	/^	enum NodeType {$/;"	g	class:despot::util::tinyxml::TiXmlNode
NoisyInitialParticleSet	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^vector<State*> BaseRockSample::NoisyInitialParticleSet() const {$/;"	f	class:despot::BaseRockSample
NoisyLaserTag	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^NoisyLaserTag::NoisyLaserTag() :$/;"	f	class:despot::NoisyLaserTag
NoisyLaserTag	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^NoisyLaserTag::NoisyLaserTag(string params_file) :$/;"	f	class:despot::NoisyLaserTag
NoisyLaserTag	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.h	/^class NoisyLaserTag: public BaseTag {$/;"	c	namespace:despot
NoisyStep	despot/src/pomdpx/pomdpx.cpp	/^bool POMDPX::NoisyStep(State& s, double random_num, int action) const {$/;"	f	class:despot::POMDPX
None	despot/include/despot/util/optionparser.h	/^	static ArgStatus None(const Option&, bool) {$/;"	f	struct:despot::option::Arg
NotUpdatedCameraregion	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::NotUpdatedCameraregion(int idx)$/;"	f	class:Dynamic_Manager
NumActions	despot/examples/cpp_models/adventurer/src/adventurer.h	/^	inline int NumActions() const {$/;"	f	class:despot::Adventurer
NumActions	despot/examples/cpp_models/bridge/src/bridge.cpp	/^int Bridge::NumActions() const {$/;"	f	class:despot::Bridge
NumActions	despot/examples/cpp_models/chain/src/chain.cpp	/^int Chain::NumActions() const {$/;"	f	class:despot::Chain
NumActions	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	inline int NumActions() const {$/;"	f	class:despot::Navigation
NumActions	despot/examples/cpp_models/navigation/src/navigation.h	/^	inline int NumActions() const {$/;"	f	class:despot::Navigation
NumActions	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	inline int NumActions() const {$/;"	f	class:despot::Navigation
NumActions	despot/examples/cpp_models/pocman/src/pocman.cpp	/^int Pocman::NumActions() const {$/;"	f	class:despot::Pocman
NumActions	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^	inline int NumActions() const {$/;"	f	class:despot::RegDemo
NumActions	despot/examples/cpp_models/rock_sample/src/fvrs/fvrs.cpp	/^int FVRS::NumActions() const {$/;"	f	class:despot::FVRS
NumActions	despot/examples/cpp_models/rock_sample/src/rock_sample/rock_sample.cpp	/^int RockSample::NumActions() const {$/;"	f	class:despot::RockSample
NumActions	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^int SimpleNavi::NumActions() const {$/;"	f	class:despot::SimpleNavi
NumActions	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^int SimpleRockSample::NumActions() const {$/;"	f	class:despot::SimpleRockSample
NumActions	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	inline int NumActions() const {$/;"	f	class:despot::BaseTag
NumActions	despot/examples/cpp_models/tiger/src/tiger.cpp	/^int Tiger::NumActions() const {$/;"	f	class:despot::Tiger
NumActions	despot/include/despot/pomdpx/parser/parser.h	/^	inline int NumActions() const {$/;"	f	class:despot::Parser
NumActions	despot/src/pomdpx/pomdpx.cpp	/^int POMDPX::NumActions() const {$/;"	f	class:despot::POMDPX
NumActiveParticles	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^int Adventurer::NumActiveParticles() const {$/;"	f	class:despot::Adventurer
NumActiveParticles	despot/examples/cpp_models/bridge/src/bridge.cpp	/^int Bridge::NumActiveParticles() const {$/;"	f	class:despot::Bridge
NumActiveParticles	despot/examples/cpp_models/chain/src/chain.cpp	/^int Chain::NumActiveParticles() const {$/;"	f	class:despot::Chain
NumActiveParticles	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^int Navigation::NumActiveParticles() const {$/;"	f	class:despot::Navigation
NumActiveParticles	despot/examples/cpp_models/navigation/src/navigation.cpp	/^int Navigation::NumActiveParticles() const {$/;"	f	class:despot::Navigation
NumActiveParticles	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^int Navigation::NumActiveParticles() const {$/;"	f	class:despot::Navigation
NumActiveParticles	despot/examples/cpp_models/pocman/src/pocman.cpp	/^int Pocman::NumActiveParticles() const {$/;"	f	class:despot::Pocman
NumActiveParticles	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^int RegDemo::NumActiveParticles() const {$/;"	f	class:despot::RegDemo
NumActiveParticles	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^int BaseRockSample::NumActiveParticles() const {$/;"	f	class:despot::BaseRockSample
NumActiveParticles	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^int SimpleNavi::NumActiveParticles() const {$/;"	f	class:despot::SimpleNavi
NumActiveParticles	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^int SimpleRockSample::NumActiveParticles() const {$/;"	f	class:despot::SimpleRockSample
NumActiveParticles	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^int BaseTag::NumActiveParticles() const {$/;"	f	class:despot::BaseTag
NumActiveParticles	despot/examples/cpp_models/tiger/src/tiger.cpp	/^int Tiger::NumActiveParticles() const {$/;"	f	class:despot::Tiger
NumActiveParticles	despot/src/pomdpx/pomdpx.cpp	/^int POMDPX::NumActiveParticles() const {$/;"	f	class:despot::POMDPX
NumCells	despot/src/util/floor.cpp	/^int Floor::NumCells() const {$/;"	f	class:despot::Floor
NumInitialStates	despot/src/pomdpx/parser/parser.cpp	/^int Parser::NumInitialStates() const {$/;"	f	class:despot::Parser
NumObservations	despot/src/pomdpx/parser/parser.cpp	/^OBS_TYPE Parser::NumObservations() const {$/;"	f	class:despot::Parser
NumStates	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^int Adventurer::NumStates() const {$/;"	f	class:despot::Adventurer
NumStates	despot/examples/cpp_models/bridge/src/bridge.cpp	/^int Bridge::NumStates() const {$/;"	f	class:despot::Bridge
NumStates	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^int Navigation::NumStates() const {$/;"	f	class:despot::Navigation
NumStates	despot/examples/cpp_models/navigation/src/navigation.cpp	/^int Navigation::NumStates() const {$/;"	f	class:despot::Navigation
NumStates	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^int Navigation::NumStates() const {$/;"	f	class:despot::Navigation
NumStates	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^int RegDemo::NumStates() const {$/;"	f	class:despot::RegDemo
NumStates	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^int BaseRockSample::NumStates() const { \/\/ one dummy terminal state$/;"	f	class:despot::BaseRockSample
NumStates	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^int BaseTag::NumStates() const {$/;"	f	class:despot::BaseTag
NumStates	despot/examples/cpp_models/tiger/src/tiger.cpp	/^int Tiger::NumStates() const {$/;"	f	class:despot::Tiger
NumStates	despot/src/pomdpx/parser/parser.cpp	/^int Parser::NumStates() const {$/;"	f	class:despot::Parser
NumStates	despot/src/pomdpx/pomdpx.cpp	/^int POMDPX::NumStates() const {$/;"	f	class:despot::POMDPX
NumStreams	despot/src/random_streams.cpp	/^int RandomStreams::NumStreams() const {$/;"	f	class:despot::RandomStreams
Num_Grids	navi_mdp/include/Dynamic_Manager.h	/^ 	int               Num_Grids;$/;"	m	class:Dynamic_Manager
Num_Grids	navi_mdp/include/MDPmanager.h	/^ 	int               Num_Grids;$/;"	m	class:MDPManager
Num_action	navi_mdp/include/Dynamic_Manager.h	53;"	d
Num_action	navi_mdp/include/MDPmanager.h	52;"	d
Num_grid_X	navi_mdp/include/MapParam.h	/^	int   		  		Num_grid_X;$/;"	m	class:MapParam
Num_grid_Y	navi_mdp/include/MapParam.h	/^	int   		  		Num_grid_Y;$/;"	m	class:MapParam
OBJDIR	despot/Makefile	/^OBJDIR = build$/;"	m
OBJS	despot/Makefile	/^OBJS = $(addprefix $(OBJDIR)\/, $(notdir $(SOURCES:.cpp=.o)))$/;"	m
OBS_TYPE	despot/include/despot/core/globals.h	/^typedef uint64_t OBS_TYPE;$/;"	t	namespace:despot
OCC_Info	navi_mdp/include/MapParam.h	/^	std::vector<int>    OCC_Info;$/;"	m	class:MapParam
ONE	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^const OBS_TYPE ONE = 1;$/;"	m	namespace:despot	file:
ONE	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^const OBS_TYPE ONE = 1;$/;"	m	namespace:despot	file:
OPTIONPARSER_H_	despot/include/despot/util/optionparser.h	215;"	d
OStreamWriter	despot/include/despot/util/optionparser.h	/^		OStreamWriter(OStream& o) :$/;"	f	struct:despot::option::PrintUsageImplementation::OStreamWriter
OStreamWriter	despot/include/despot/util/optionparser.h	/^	struct OStreamWriter: public IStringWriter {$/;"	s	struct:despot::option::PrintUsageImplementation
OUT	navi_mdp/include/srBSpline.h	11;"	d
Objects	despot/include/despot/util/memorypool.h	/^		T Objects[Size];$/;"	m	struct:despot::MemoryPool::Chunk
ObsProb	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^double Adventurer::ObsProb(OBS_TYPE obs, const State& s, int a) const {$/;"	f	class:despot::Adventurer
ObsProb	despot/examples/cpp_models/bridge/src/bridge.cpp	/^double Bridge::ObsProb(OBS_TYPE obs, const State& s, int a) const {$/;"	f	class:despot::Bridge
ObsProb	despot/examples/cpp_models/chain/src/chain.cpp	/^double Chain::ObsProb(OBS_TYPE obs, const State& s, int action) const {$/;"	f	class:despot::Chain
ObsProb	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^double Navigation::ObsProb(OBS_TYPE obs, const State& state, int a) const {$/;"	f	class:despot::Navigation
ObsProb	despot/examples/cpp_models/navigation/src/navigation.cpp	/^double Navigation::ObsProb(OBS_TYPE obs, const State& state, int a) const {$/;"	f	class:despot::Navigation
ObsProb	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^double Navigation::ObsProb(OBS_TYPE obs, const State& state, int a) const {$/;"	f	class:despot::Navigation
ObsProb	despot/examples/cpp_models/pocman/src/pocman.cpp	/^double Pocman::ObsProb(OBS_TYPE obs, const State& state, int action) const {$/;"	f	class:despot::Pocman
ObsProb	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^double RegDemo::ObsProb(OBS_TYPE obs, const State& state, int a) const {$/;"	f	class:despot::RegDemo
ObsProb	despot/examples/cpp_models/rock_sample/src/fvrs/fvrs.cpp	/^double FVRS::ObsProb(OBS_TYPE obs, const State& state, int action) const {$/;"	f	class:despot::FVRS
ObsProb	despot/examples/cpp_models/rock_sample/src/rock_sample/rock_sample.cpp	/^double RockSample::ObsProb(OBS_TYPE obs, const State& state, int action) const {$/;"	f	class:despot::RockSample
ObsProb	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^double SimpleNavi::ObsProb(OBS_TYPE obs, const State& state,$/;"	f	class:despot::SimpleNavi
ObsProb	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^double SimpleRockSample::ObsProb(OBS_TYPE obs, const State& state,$/;"	f	class:despot::SimpleRockSample
ObsProb	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^double LaserTag::ObsProb(OBS_TYPE obs, const State& state, int action) const {$/;"	f	class:despot::LaserTag
ObsProb	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^double NoisyLaserTag::ObsProb(OBS_TYPE obs, const State& state, int action) const {$/;"	f	class:despot::NoisyLaserTag
ObsProb	despot/examples/cpp_models/tag/src/tag/tag.cpp	/^double Tag::ObsProb(OBS_TYPE obs, const State& s, int a) const {$/;"	f	class:despot::Tag
ObsProb	despot/examples/cpp_models/tiger/src/tiger.cpp	/^double Tiger::ObsProb(OBS_TYPE obs, const State& s, int a) const {$/;"	f	class:despot::Tiger
ObsProb	despot/src/pomdpx/parser/parser.cpp	/^double Parser::ObsProb(OBS_TYPE obs, const vector<int>& state,$/;"	f	class:despot::Parser
ObsProb	despot/src/pomdpx/pomdpx.cpp	/^double POMDPX::ObsProb(OBS_TYPE obs, const State& s, int a) const {$/;"	f	class:despot::POMDPX
ObsVar	despot/include/despot/pomdpx/parser/variable.h	74;"	d
Observation	despot/include/despot/core/history.h	/^	OBS_TYPE Observation(int t) const {$/;"	f	class:despot::History
Observe	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::Observe(const Belief* belief, int action,$/;"	f	class:despot::Adventurer
Observe	despot/examples/cpp_models/bridge/src/bridge.cpp	/^void Bridge::Observe(const Belief* belief, int action,$/;"	f	class:despot::Bridge
Observe	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::Observe(const Belief* belief, int action,$/;"	f	class:despot::BaseRockSample
Observe	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^void LaserTag::Observe(const Belief* belief, int action,$/;"	f	class:despot::LaserTag
Observe	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^void NoisyLaserTag::Observe(const Belief* belief, int action,$/;"	f	class:despot::NoisyLaserTag
Observe	despot/examples/cpp_models/tag/src/tag/tag.cpp	/^void Tag::Observe(const Belief* belief, int action,$/;"	f	class:despot::Tag
OnceTarget	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  bool OnceTarget;$/;"	m	class:Edgeleg_manager
OnceTarget	human_filter/include/people_tracking_filter/followme_action.h	/^  bool OnceTarget;$/;"	m	class:Edgeleg_manager_action
OnceTarget	human_filter/include/people_tracking_filter/service_test.h	/^  bool OnceTarget;$/;"	m	class:Edgeleg_manager_srv
OnceTarget	navi_mdp/include/Dynamic_Manager.h	/^ 	bool 	OnceTarget;$/;"	m	class:Dynamic_Manager
OnceTargeted	villa_navi_service/include/navi_service_node.h	/^	bool OnceTargeted;$/;"	m	class:villa_navi_srv
OneBasisFun	navi_mdp/src/srBSpline.cpp	/^double srBSpline::OneBasisFun( int i, double u )$/;"	f	class:srBSpline
OneBasisFunDers	navi_mdp/src/srBSpline.cpp	/^double srBSpline::OneBasisFunDers( int i, double u, int n )$/;"	f	class:srBSpline
OneBasisFunDers	navi_mdp/src/srBSpline.cpp	/^void srBSpline::OneBasisFunDers( OUT double* ders, int i, double u, int n )$/;"	f	class:srBSpline
OneStepLookaheadChainParticleUpperBound	despot/examples/cpp_models/chain/src/chain.cpp	/^	OneStepLookaheadChainParticleUpperBound(const DSPOMDP* model) {$/;"	f	class:despot::OneStepLookaheadChainParticleUpperBound
OneStepLookaheadChainParticleUpperBound	despot/examples/cpp_models/chain/src/chain.cpp	/^class OneStepLookaheadChainParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
One_People_pos_pub	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::Publisher One_People_pos_pub;$/;"	m	class:Edgeleg_manager
One_People_pos_pub	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::Publisher One_People_pos_pub;$/;"	m	class:Edgeleg_manager_action
One_People_pos_pub	human_filter/include/people_tracking_filter/service_test.h	/^  ros::Publisher One_People_pos_pub;$/;"	m	class:Edgeleg_manager_srv
OppTransitionDistribution	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^map<int, double> BaseTag::OppTransitionDistribution(int state) const {$/;"	f	class:despot::BaseTag
Opposite	despot/src/util/coord.cpp	/^bool Compass::Opposite(int dir1, int dir2) {$/;"	f	class:despot::Compass
Opposite	despot/src/util/coord.cpp	/^int Compass::Opposite(int dir) {$/;"	f	class:despot::Compass
OptimalAction	despot/src/solver/aems.cpp	/^ValuedAction AEMS::OptimalAction(const VNode* vnode) {$/;"	f	class:despot::AEMS
OptimalAction	despot/src/solver/despot.cpp	/^ValuedAction DESPOT::OptimalAction(VNode* vnode) {$/;"	f	class:despot::DESPOT
OptimalAction	despot/src/solver/pomcp.cpp	/^ValuedAction POMCP::OptimalAction(const VNode* vnode) {$/;"	f	class:despot::POMCP
OptimalTigerPolicy	despot/examples/cpp_models/tiger/src/tiger.cpp	/^	OptimalTigerPolicy(const DSPOMDP* model,$/;"	f	class:despot::OptimalTigerPolicy
OptimalTigerPolicy	despot/examples/cpp_models/tiger/src/tiger.cpp	/^class OptimalTigerPolicy: public Policy {$/;"	c	namespace:despot	file:
Option	despot/include/despot/util/optionparser.h	/^	Option() :$/;"	f	class:despot::option::Option
Option	despot/include/despot/util/optionparser.h	/^	Option(const Descriptor* desc_, const char* name_, const char* arg_) {$/;"	f	class:despot::option::Option
Option	despot/include/despot/util/optionparser.h	/^	Option(const Option& orig) {$/;"	f	class:despot::option::Option
Option	despot/include/despot/util/optionparser.h	/^class Option {$/;"	c	namespace:despot::option
OptionIndex	despot/include/despot/simple_tui.h	/^enum OptionIndex {$/;"	g	namespace:despot
OptionParse	despot/src/simple_tui.cpp	/^void SimpleTUI::OptionParse(option::Option *options, int &num_runs,$/;"	f	class:despot::SimpleTUI
Optional	despot/include/despot/util/optionparser.h	/^	static ArgStatus Optional(const Option& option, bool) {$/;"	f	struct:despot::option::Arg
P	navi_mdp/include/srBSpline.h	/^	inline double P( int IndexCP ) { return GetControlPoint( IndexCP ); }$/;"	f	class:srBSpline
PARSER_H	despot/include/despot/pomdpx/parser/parser.h	2;"	d
PI	edge_leg_detector/src/detector.cpp	24;"	d	file:
PI	edge_leg_detector/src/edge_leg_detector/detector.cpp	23;"	d	file:
POCMAN_H	despot/examples/cpp_models/pocman/src/pocman.h	2;"	d
POLICY_H	despot/include/despot/core/policy.h	2;"	d
POMCP	despot/include/despot/solver/pomcp.h	/^class POMCP: public Solver {$/;"	c	namespace:despot
POMCP	despot/src/solver/pomcp.cpp	/^POMCP::POMCP(const DSPOMDP* model, POMCPPrior* prior, Belief* belief) :$/;"	f	class:despot::POMCP
POMCPPrior	despot/include/despot/solver/pomcp.h	/^class POMCPPrior {$/;"	c	namespace:despot
POMCPPrior	despot/src/solver/pomcp.cpp	/^POMCPPrior::POMCPPrior(const DSPOMDP* model) :$/;"	f	class:despot::POMCPPrior
POMCPScenarioLowerBound	despot/include/despot/core/lower_bound.h	/^class POMCPScenarioLowerBound: public ScenarioLowerBound {$/;"	c	namespace:despot
POMCPScenarioLowerBound	despot/src/core/lower_bound.cpp	/^POMCPScenarioLowerBound::POMCPScenarioLowerBound(const DSPOMDP* model,$/;"	f	class:despot::POMCPScenarioLowerBound
POMCP_H	despot/include/despot/solver/pomcp.h	2;"	d
POMDPEvaluator	despot/include/despot/evaluator.h	/^class POMDPEvaluator: public Evaluator {$/;"	c	namespace:despot
POMDPEvaluator	despot/src/evaluator.cpp	/^POMDPEvaluator::POMDPEvaluator(DSPOMDP* model, string belief_type,$/;"	f	class:despot::POMDPEvaluator
POMDPX	despot/include/despot/pomdpx/pomdpx.h	/^class POMDPX: public MDP,$/;"	c	namespace:despot
POMDPX	despot/src/pomdpx/pomdpx.cpp	/^POMDPX::POMDPX() {$/;"	f	class:despot::POMDPX
POMDPX	despot/src/pomdpx/pomdpx.cpp	/^POMDPX::POMDPX(string params_file) {$/;"	f	class:despot::POMDPX
POMDPXBelief	despot/src/pomdpx/pomdpx.cpp	/^	POMDPXBelief(vector<State*> particles, int max_iter,$/;"	f	class:despot::POMDPXBelief
POMDPXBelief	despot/src/pomdpx/pomdpx.cpp	/^class POMDPXBelief: public ParticleBelief {$/;"	c	namespace:despot	file:
POMDPXGreedyActionPolicy	despot/src/pomdpx/pomdpx.cpp	/^	POMDPXGreedyActionPolicy(const DSPOMDP* model, ParticleLowerBound* bound) :$/;"	f	class:despot::POMDPXGreedyActionPolicy
POMDPXGreedyActionPolicy	despot/src/pomdpx/pomdpx.cpp	/^class POMDPXGreedyActionPolicy: public Policy {$/;"	c	namespace:despot	file:
POMDPXState	despot/include/despot/pomdpx/pomdpx.h	/^class POMDPXState: public State {$/;"	c	namespace:despot
POMDPXState	despot/src/pomdpx/pomdpx.cpp	/^POMDPXState::POMDPXState() {$/;"	f	class:despot::POMDPXState
POMDPXState	despot/src/pomdpx/pomdpx.cpp	/^POMDPXState::POMDPXState(vector<int> aIndex) {$/;"	f	class:despot::POMDPXState
POMDPX_H	despot/include/despot/pomdpx/pomdpx.h	2;"	d
POMDP_H	despot/include/despot/core/pomdp.h	2;"	d
PORT	despot/include/despot/ippc/client.h	/^	std::string PORT;$/;"	m	class:despot::Client
POS_ERR	navi_mdp/include/PathManager.h	46;"	d
POS_INFTY	despot/src/core/globals.cpp	/^const double POS_INFTY = std::numeric_limits<double>::is_iec559 ?$/;"	m	namespace:despot::Globals	file:
P_H	villa_navi_service/include/navi_service_node.h	38;"	d
P_S_given_H	villa_navi_service/include/navi_service_node.h	39;"	d
P_S_given_Hc	villa_navi_service/include/navi_service_node.h	40;"	d
P_Sc_given_H	villa_navi_service/include/navi_service_node.h	42;"	d
P_Sc_given_Hc	villa_navi_service/include/navi_service_node.h	43;"	d
Parent	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* Parent() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
Parent	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* Parent() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ParentSize	despot/src/pomdpx/parser/function.cpp	/^int Function::ParentSize() const {$/;"	f	class:despot::Function
ParentSize	despot/src/pomdpx/parser/function.cpp	/^int HierarchyCPT::ParentSize() const {$/;"	f	class:despot::HierarchyCPT
Parse	despot/src/pomdpx/parser/parser.cpp	/^void Parser::Parse(string fn) {$/;"	f	class:despot::Parser
Parse	despot/src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlAttribute::Parse(const char* p, TiXmlParsingData* data,$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
Parse	despot/src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlComment::Parse(const char* p, TiXmlParsingData* data,$/;"	f	class:despot::util::tinyxml::TiXmlComment
Parse	despot/src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlDeclaration::Parse(const char* p, TiXmlParsingData* data,$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
Parse	despot/src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlDocument::Parse(const char* p, TiXmlParsingData* prevData,$/;"	f	class:despot::util::tinyxml::TiXmlDocument
Parse	despot/src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlElement::Parse(const char* p, TiXmlParsingData* data,$/;"	f	class:despot::util::tinyxml::TiXmlElement
Parse	despot/src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlText::Parse(const char* p, TiXmlParsingData* data,$/;"	f	class:despot::util::tinyxml::TiXmlText
Parse	despot/src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlUnknown::Parse(const char* p, TiXmlParsingData* data,$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
ParseDiscountTag	despot/src/pomdpx/parser/parser.cpp	/^void Parser::ParseDiscountTag(TiXmlHandle& xml_handle) {$/;"	f	class:despot::Parser
ParseHasTerminalTag	despot/src/pomdpx/parser/parser.cpp	/^void Parser::ParseHasTerminalTag(TiXmlHandle& xml_handle) {$/;"	f	class:despot::Parser
ParseHorizonTag	despot/src/pomdpx/parser/parser.cpp	/^void Parser::ParseHorizonTag(TiXmlHandle& xml_handle) {$/;"	f	class:despot::Parser
ParseInitialBeliefTag	despot/src/pomdpx/parser/parser.cpp	/^void Parser::ParseInitialBeliefTag(TiXmlHandle& handle) {$/;"	f	class:despot::Parser
ParseObsFunctionTag	despot/src/pomdpx/parser/parser.cpp	/^void Parser::ParseObsFunctionTag(TiXmlHandle& handle) {$/;"	f	class:despot::Parser
ParseRewardFunctionTag	despot/src/pomdpx/parser/parser.cpp	/^void Parser::ParseRewardFunctionTag(TiXmlHandle& handle) {$/;"	f	class:despot::Parser
ParseStateTransitionTag	despot/src/pomdpx/parser/parser.cpp	/^void Parser::ParseStateTransitionTag(TiXmlHandle& handle) {$/;"	f	class:despot::Parser
ParseTerminalStateTag	despot/src/pomdpx/parser/parser.cpp	/^void Parser::ParseTerminalStateTag(TiXmlHandle& handle) {$/;"	f	class:despot::Parser
ParseVariableTag	despot/src/pomdpx/parser/parser.cpp	/^void Parser::ParseVariableTag(TiXmlHandle& xml_handle) {$/;"	f	class:despot::Parser
Parser	despot/include/despot/pomdpx/parser/parser.h	/^class Parser {$/;"	c	namespace:despot
Parser	despot/include/despot/util/optionparser.h	/^	Parser() :$/;"	f	class:despot::option::Parser
Parser	despot/include/despot/util/optionparser.h	/^	Parser(bool gnu, const Descriptor usage[], int argc, char** argv,$/;"	f	class:despot::option::Parser
Parser	despot/include/despot/util/optionparser.h	/^	Parser(bool gnu, const Descriptor usage[], int argc, const char** argv,$/;"	f	class:despot::option::Parser
Parser	despot/include/despot/util/optionparser.h	/^	Parser(const Descriptor usage[], int argc, char** argv, Option options[],$/;"	f	class:despot::option::Parser
Parser	despot/include/despot/util/optionparser.h	/^	Parser(const Descriptor usage[], int argc, const char** argv,$/;"	f	class:despot::option::Parser
Parser	despot/include/despot/util/optionparser.h	/^class Parser {$/;"	c	namespace:despot::option
Parser	despot/src/pomdpx/parser/parser.cpp	/^Parser::Parser() :$/;"	f	class:despot::Parser
Parser	despot/src/pomdpx/parser/parser.cpp	/^Parser::Parser(const Parser&) {$/;"	f	class:despot::Parser
Parser	despot/src/pomdpx/parser/parser.cpp	/^Parser::Parser(string fn) :$/;"	f	class:despot::Parser
ParticleBelief	despot/include/despot/core/belief.h	/^class ParticleBelief: public Belief {$/;"	c	namespace:despot
ParticleBelief	despot/src/core/belief.cpp	/^ParticleBelief::ParticleBelief(vector<State*> particles, const DSPOMDP* model,$/;"	f	class:despot::ParticleBelief
ParticleLowerBound	despot/include/despot/core/lower_bound.h	/^class ParticleLowerBound : public ScenarioLowerBound {$/;"	c	namespace:despot
ParticleLowerBound	despot/src/core/lower_bound.cpp	/^ParticleLowerBound::ParticleLowerBound(const DSPOMDP* model, Belief* belief) :$/;"	f	class:despot::ParticleLowerBound
ParticleUpperBound	despot/include/despot/core/upper_bound.h	/^class ParticleUpperBound : public ScenarioUpperBound {$/;"	c	namespace:despot
ParticleUpperBound	despot/src/core/upper_bound.cpp	/^ParticleUpperBound::ParticleUpperBound() {$/;"	f	class:despot::ParticleUpperBound
Passable	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	bool Passable(const Coord& pos) const {$/;"	f	class:despot::Navigation
Passable	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	bool Passable(const Coord& pos) const {$/;"	f	class:despot::Navigation
Passable	despot/examples/cpp_models/pocman/src/pocman.h	/^	bool Passable(const Coord& pos) const {$/;"	f	class:despot::Pocman
PathManager	navi_mdp/include/PathManager.h	/^class PathManager$/;"	c
PathManager	navi_mdp/src/PathManager.cpp	/^PathManager::PathManager()$/;"	f	class:PathManager
Path_Pub	navi_mdp/include/Dynamic_Manager.h	/^	ros::Publisher   Path_Pub;$/;"	m	class:Dynamic_Manager
Path_Pub	navi_mdp/include/MDPmanager.h	/^	ros::Publisher   Path_Pub;$/;"	m	class:MDPManager
PeopleTrackingNode	human_filter/include/people_tracking_filter/people_tracking_node.h	/^class PeopleTrackingNode$/;"	c	namespace:estimation
PeopleTrackingNode	human_filter/src/people_tracking_node.cpp	/^PeopleTrackingNode::PeopleTrackingNode(ros::NodeHandle nh)$/;"	f	class:estimation::PeopleTrackingNode
Pocman	despot/examples/cpp_models/pocman/src/pocman.cpp	/^Pocman::Pocman(int xsize, int ysize) :$/;"	f	class:despot::Pocman
Pocman	despot/examples/cpp_models/pocman/src/pocman.h	/^class Pocman: public DSPOMDP {$/;"	c	namespace:despot
PocmanApproxScenarioUpperBound	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	PocmanApproxScenarioUpperBound(const Pocman* model) :$/;"	f	class:despot::PocmanApproxScenarioUpperBound
PocmanApproxScenarioUpperBound	despot/examples/cpp_models/pocman/src/pocman.cpp	/^class PocmanApproxScenarioUpperBound: public ScenarioUpperBound {$/;"	c	namespace:despot	file:
PocmanBelief	despot/examples/cpp_models/pocman/src/pocman.cpp	/^PocmanBelief::PocmanBelief(vector<State*> particles, const DSPOMDP* model,$/;"	f	class:despot::PocmanBelief
PocmanBelief	despot/examples/cpp_models/pocman/src/pocman.h	/^class PocmanBelief: public ParticleBelief {$/;"	c	namespace:despot
PocmanLegalParticleLowerBound	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	PocmanLegalParticleLowerBound(const DSPOMDP* model) :$/;"	f	class:despot::PocmanLegalParticleLowerBound
PocmanLegalParticleLowerBound	despot/examples/cpp_models/pocman/src/pocman.cpp	/^class PocmanLegalParticleLowerBound: public ParticleLowerBound {$/;"	c	namespace:despot	file:
PocmanPOMCPPrior	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	PocmanPOMCPPrior(const Pocman* model) :$/;"	f	class:despot::PocmanPOMCPPrior
PocmanPOMCPPrior	despot/examples/cpp_models/pocman/src/pocman.cpp	/^class PocmanPOMCPPrior: public POMCPPrior {$/;"	c	namespace:despot	file:
PocmanSmartParticleUpperBound	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	PocmanSmartParticleUpperBound(const Pocman* model) :$/;"	f	class:despot::PocmanSmartParticleUpperBound
PocmanSmartParticleUpperBound	despot/examples/cpp_models/pocman/src/pocman.cpp	/^class PocmanSmartParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
PocmanSmartPolicy	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	PocmanSmartPolicy(const Pocman* model, ParticleLowerBound* bound) :$/;"	f	class:despot::PocmanSmartPolicy
PocmanSmartPolicy	despot/examples/cpp_models/pocman/src/pocman.cpp	/^class PocmanSmartPolicy : public Policy {$/;"	c	namespace:despot	file:
PocmanState	despot/examples/cpp_models/pocman/src/pocman.h	/^class PocmanState: public State {$/;"	c	namespace:despot
Points	navi_mdp/include/Dynamic_Manager.h	/^	vector< std::vector<int> > Points;$/;"	m	class:Dynamic_Manager
Points	navi_mdp/include/MDPmanager.h	/^	vector< std::vector<int> > Points;$/;"	m	class:MDPManager
Policies	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<char>  	  Policies;		\/\/ Policy (Pi)$/;"	m	class:Dynamic_Manager
Policies	navi_mdp/include/MDPmanager.h	/^ 	vector<char>  	  Policies;		\/\/ Policy (Pi)$/;"	m	class:MDPManager
Policy	despot/include/despot/core/policy.h	/^class Policy: public ScenarioLowerBound {$/;"	c	namespace:despot
Policy	despot/src/core/policy.cpp	/^Policy::Policy(const DSPOMDP* model, ParticleLowerBound* particle_lower_bound,$/;"	f	class:despot::Policy
PolicyNum	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<int>  	  PolicyNum;	\/\/ Policy (PiNum)$/;"	m	class:Dynamic_Manager
PolicyNum	navi_mdp/include/MDPmanager.h	/^ 	vector<int>  	  PolicyNum;	\/\/ Policy (PiNum)$/;"	m	class:MDPManager
PolicyTreeSize	despot/src/core/node.cpp	/^int QNode::PolicyTreeSize() const {$/;"	f	class:despot::QNode
PolicyTreeSize	despot/src/core/node.cpp	/^int VNode::PolicyTreeSize() const {$/;"	f	class:despot::VNode
PopAll	despot/include/despot/solver/pomcp.h	/^  inline virtual void PopAll() {$/;"	f	class:despot::POMCPPrior
PopLast	despot/include/despot/solver/pomcp.h	/^	inline virtual void PopLast() {$/;"	f	class:despot::POMCPPrior
Pre_dynamicSplinePath	navi_mdp/include/Dynamic_Manager.h	/^	nav_msgs::Path Pre_dynamicSplinePath;$/;"	m	class:Dynamic_Manager
Pre_dynamicSplinePath	navi_mdp/include/MDPmanager.h	/^	nav_msgs::Path 		Pre_dynamicSplinePath;$/;"	m	class:MDPManager
Previous	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* Previous() {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
Previous	despot/src/util/tinyxml/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Previous() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
PreviousSibling	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* PreviousSibling( const std::string& _value ) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
PreviousSibling	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* PreviousSibling() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
PreviousSibling	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* PreviousSibling(const char *_prev) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
PreviousSibling	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* PreviousSibling( const std::string& _value ) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
PreviousSibling	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlNode* PreviousSibling() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
PreviousSibling	despot/src/util/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::PreviousSibling(const char * _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
Print	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual void Print(FILE* cfile, int depth) const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
Print	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual void Print(FILE* cfile, int depth) const {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
Print	despot/include/despot/util/tinyxml/tinyxml.h	/^	void Print() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
Print	despot/src/pomdpx/parser/parser.cpp	/^void Parser::Print(ostream& out) const {$/;"	f	class:despot::Parser
Print	despot/src/util/exec_tracker.cpp	/^void ExecTracker::Print(ostream& out) const {$/;"	f	class:despot::ExecTracker
Print	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlAttribute::Print(FILE* cfile, int \/*depth*\/,$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
Print	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlComment::Print(FILE* cfile, int depth) const {$/;"	f	class:despot::util::tinyxml::TiXmlComment
Print	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlDeclaration::Print(FILE* cfile, int \/*depth*\/,$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
Print	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlDocument::Print(FILE* cfile, int depth) const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
Print	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::Print(FILE* cfile, int depth) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
Print	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlText::Print(FILE* cfile, int depth) const {$/;"	f	class:despot::util::tinyxml::TiXmlText
Print	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlUnknown::Print(FILE* cfile, int depth) const {$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
PrintAction	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Adventurer
PrintAction	despot/examples/cpp_models/bridge/src/bridge.cpp	/^void Bridge::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Bridge
PrintAction	despot/examples/cpp_models/chain/src/chain.cpp	/^void Chain::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Chain
PrintAction	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Navigation
PrintAction	despot/examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Navigation
PrintAction	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Navigation
PrintAction	despot/examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Pocman
PrintAction	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::RegDemo
PrintAction	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::BaseRockSample
PrintAction	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^void SimpleNavi::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::SimpleNavi
PrintAction	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^void SimpleRockSample::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::SimpleRockSample
PrintAction	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^void BaseTag::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::BaseTag
PrintAction	despot/examples/cpp_models/tiger/src/tiger.cpp	/^void Tiger::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Tiger
PrintAction	despot/src/pomdpx/parser/parser.cpp	/^void Parser::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::Parser
PrintAction	despot/src/pomdpx/pomdpx.cpp	/^void POMDPX::PrintAction(int action, ostream& out) const {$/;"	f	class:despot::POMDPX
PrintBelief	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::Adventurer
PrintBelief	despot/examples/cpp_models/bridge/src/bridge.cpp	/^void Bridge::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::Bridge
PrintBelief	despot/examples/cpp_models/chain/src/chain.cpp	/^void Chain::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::Chain
PrintBelief	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::Navigation
PrintBelief	despot/examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::Navigation
PrintBelief	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::Navigation
PrintBelief	despot/examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::Pocman
PrintBelief	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::RegDemo
PrintBelief	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::BaseRockSample
PrintBelief	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^void SimpleNavi::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::SimpleNavi
PrintBelief	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^void SimpleRockSample::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::SimpleRockSample
PrintBelief	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^void BaseTag::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::BaseTag
PrintBelief	despot/examples/cpp_models/tiger/src/tiger.cpp	/^void Tiger::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::Tiger
PrintBelief	despot/src/pomdpx/pomdpx.cpp	/^void POMDPX::PrintBelief(const Belief& belief, ostream& out) const {$/;"	f	class:despot::POMDPX
PrintDefaultActions	despot/src/pomdpx/pomdpx.cpp	/^void POMDPX::PrintDefaultActions() {$/;"	f	class:despot::POMDPX
PrintLocs	despot/include/despot/core/globals.h	/^inline void PrintLocs() {$/;"	f	namespace:despot::Globals
PrintLocs	despot/src/util/exec_tracker.cpp	/^void ExecTracker::PrintLocs(ostream& out) const {$/;"	f	class:despot::ExecTracker
PrintMDPPolicy	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::PrintMDPPolicy() const {$/;"	f	class:despot::Adventurer
PrintMDPPolicy	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::PrintMDPPolicy() const {$/;"	f	class:despot::Navigation
PrintMDPPolicy	despot/examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::PrintMDPPolicy() const {$/;"	f	class:despot::Navigation
PrintMDPPolicy	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::PrintMDPPolicy() const {$/;"	f	class:despot::Navigation
PrintMDPPolicy	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::PrintMDPPolicy() const {$/;"	f	class:despot::RegDemo
PrintModel	despot/src/pomdpx/pomdpx.cpp	/^void POMDPX::PrintModel(ostream& out) const {$/;"	f	class:despot::POMDPX
PrintObs	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::PrintObs(const State& state, OBS_TYPE obs,$/;"	f	class:despot::Adventurer
PrintObs	despot/examples/cpp_models/bridge/src/bridge.cpp	/^void Bridge::PrintObs(const State& state, OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::Bridge
PrintObs	despot/examples/cpp_models/chain/src/chain.cpp	/^void Chain::PrintObs(const State& state, OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::Chain
PrintObs	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::PrintObs(const State& state, OBS_TYPE observation,$/;"	f	class:despot::Navigation
PrintObs	despot/examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::PrintObs(const State& state, OBS_TYPE obs,$/;"	f	class:despot::Navigation
PrintObs	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::PrintObs(const State& state, OBS_TYPE observation,$/;"	f	class:despot::Navigation
PrintObs	despot/examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::PrintObs(const State& state, OBS_TYPE observation,$/;"	f	class:despot::Pocman
PrintObs	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::PrintObs(const State& state, OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::RegDemo
PrintObs	despot/examples/cpp_models/rock_sample/src/fvrs/fvrs.cpp	/^void FVRS::PrintObs(const State& state, OBS_TYPE observation,$/;"	f	class:despot::FVRS
PrintObs	despot/examples/cpp_models/rock_sample/src/rock_sample/rock_sample.cpp	/^void RockSample::PrintObs(const State& state, OBS_TYPE observation,$/;"	f	class:despot::RockSample
PrintObs	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^void SimpleNavi::PrintObs(const State& state, OBS_TYPE observation,$/;"	f	class:despot::SimpleNavi
PrintObs	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^void SimpleRockSample::PrintObs(const State& state, OBS_TYPE observation,$/;"	f	class:despot::SimpleRockSample
PrintObs	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^void LaserTag::PrintObs(const State& state, OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::LaserTag
PrintObs	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^void NoisyLaserTag::PrintObs(const State& state, OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::NoisyLaserTag
PrintObs	despot/examples/cpp_models/tag/src/tag/tag.cpp	/^void Tag::PrintObs(const State& state, OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::Tag
PrintObs	despot/examples/cpp_models/tiger/src/tiger.cpp	/^void Tiger::PrintObs(const State& state, OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::Tiger
PrintObs	despot/src/pomdpx/parser/parser.cpp	/^void Parser::PrintObs(OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::Parser
PrintObs	despot/src/pomdpx/pomdpx.cpp	/^void POMDPX::PrintObs(const State& state, OBS_TYPE obs, ostream& out) const {$/;"	f	class:despot::POMDPX
PrintPOMDPX	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::PrintPOMDPX() const {$/;"	f	class:despot::Adventurer
PrintPolicyTree	despot/src/core/node.cpp	/^void VNode::PrintPolicyTree(int depth, ostream& os) {$/;"	f	class:despot::VNode
PrintResult	despot/src/simple_tui.cpp	/^void SimpleTUI::PrintResult(int num_runs, Evaluator *simulator,$/;"	f	class:despot::SimpleTUI
PrintState	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::PrintState(const State& s, ostream& out) const {$/;"	f	class:despot::Adventurer
PrintState	despot/examples/cpp_models/bridge/src/bridge.cpp	/^void Bridge::PrintState(const State& state, ostream& out) const {$/;"	f	class:despot::Bridge
PrintState	despot/examples/cpp_models/chain/src/chain.cpp	/^void Chain::PrintState(const State& s, ostream& out) const {$/;"	f	class:despot::Chain
PrintState	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::PrintState(const State& state, ostream& ostr) const {$/;"	f	class:despot::Navigation
PrintState	despot/examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::PrintState(const State& s, ostream& out) const {$/;"	f	class:despot::Navigation
PrintState	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::PrintState(const State& state, ostream& ostr) const {$/;"	f	class:despot::Navigation
PrintState	despot/examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::PrintState(const State& state, ostream& ostr) const {$/;"	f	class:despot::Pocman
PrintState	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::PrintState(const State& s, ostream& out) const {$/;"	f	class:despot::RegDemo
PrintState	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::PrintState(const State& state, ostream& out) const {$/;"	f	class:despot::BaseRockSample
PrintState	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^void SimpleNavi::PrintState(const State& state, ostream& out) const {$/;"	f	class:despot::SimpleNavi
PrintState	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^void SimpleRockSample::PrintState(const State& state, ostream& out) const {$/;"	f	class:despot::SimpleRockSample
PrintState	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^void BaseTag::PrintState(const State& s, ostream& out) const {$/;"	f	class:despot::BaseTag
PrintState	despot/examples/cpp_models/tiger/src/tiger.cpp	/^void Tiger::PrintState(const State& state, ostream& out) const {$/;"	f	class:despot::Tiger
PrintState	despot/src/pomdpx/parser/parser.cpp	/^void Parser::PrintState(const vector<int>& state, ostream& out) const {$/;"	f	class:despot::Parser
PrintState	despot/src/pomdpx/pomdpx.cpp	/^void POMDPX::PrintState(const State& s, ostream& out) const {$/;"	f	class:despot::POMDPX
PrintTransitions	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^void Adventurer::PrintTransitions() const {$/;"	f	class:despot::Adventurer
PrintTransitions	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void Navigation::PrintTransitions() const {$/;"	f	class:despot::Navigation
PrintTransitions	despot/examples/cpp_models/navigation/src/navigation.cpp	/^void Navigation::PrintTransitions() const {$/;"	f	class:despot::Navigation
PrintTransitions	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::PrintTransitions() const {$/;"	f	class:despot::Navigation
PrintTransitions	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^void RegDemo::PrintTransitions() const {$/;"	f	class:despot::RegDemo
PrintTransitions	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^void BaseTag::PrintTransitions() const {$/;"	f	class:despot::BaseTag
PrintTransitions	despot/src/pomdpx/pomdpx.cpp	/^void POMDPX::PrintTransitions() {$/;"	f	class:despot::POMDPX
PrintTree	despot/src/core/node.cpp	/^void VNode::PrintTree(int depth, ostream& os) {$/;"	f	class:despot::VNode
PrintUsageImplementation	despot/include/despot/util/optionparser.h	/^struct PrintUsageImplementation {$/;"	s	namespace:despot::option
Prob_bad	navi_mdp/include/Dynamic_Manager.h	/^	double Prob_bad;$/;"	m	class:Dynamic_Manager
Prob_bad	navi_mdp/include/MDPmanager.h	/^	double Prob_bad;$/;"	m	class:MDPManager
Prob_good	navi_mdp/include/Dynamic_Manager.h	/^	double Prob_good;$/;"	m	class:Dynamic_Manager
Prob_good	navi_mdp/include/MDPmanager.h	/^	double Prob_good;$/;"	m	class:MDPManager
ProbabilityGet	human_filter/src/gaussian_pos_vel.cpp	/^Probability GaussianPosVel::ProbabilityGet(const StatePosVel& input) const$/;"	f	class:BFL::GaussianPosVel
ProbabilityGet	human_filter/src/gaussian_vector.cpp	/^Probability GaussianVector::ProbabilityGet(const Vector3& input) const$/;"	f	class:BFL::GaussianVector
ProbabilityGet	human_filter/src/measmodel_pos.cpp	/^MeasPdfPos::ProbabilityGet(const Vector3& measurement) const$/;"	f	class:MeasPdfPos
ProbabilityGet	human_filter/src/measmodel_vector.cpp	/^MeasPdfVector::ProbabilityGet(const Vector3& measurement) const$/;"	f	class:MeasPdfVector
ProbabilityGet	human_filter/src/sysmodel_pos_vel.cpp	/^SysPdfPosVel::ProbabilityGet(const StatePosVel& state) const$/;"	f	class:SysPdfPosVel
ProbabilityGet	human_filter/src/sysmodel_vector.cpp	/^SysPdfVector::ProbabilityGet(const Vector3& state) const$/;"	f	class:SysPdfVector
ProbabilityGet	human_filter/src/uniform_vector.cpp	/^Probability UniformVector::ProbabilityGet(const Vector3& input) const$/;"	f	class:BFL::UniformVector
Prune	despot/src/solver/despot.cpp	/^QNode* DESPOT::Prune(QNode* qnode, double& pruned_value) {$/;"	f	class:despot::DESPOT
Prune	despot/src/solver/despot.cpp	/^VNode* DESPOT::Prune(VNode* vnode, int& pruned_action, double& pruned_value) {$/;"	f	class:despot::DESPOT
Publish_beliefmap	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::Publish_beliefmap()$/;"	f	class:Dynamic_Manager
Publish_dynamicPath	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::Publish_dynamicPath()$/;"	f	class:Dynamic_Manager
Publish_filter_measurment	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::Publish_filter_measurment(int measurement_type)$/;"	f	class:Dynamic_Manager
Publish_nav_target	human_filter/src/edge_leg_filter_node.cpp	/^void Edgeleg_manager::Publish_nav_target()$/;"	f	class:Edgeleg_manager
Publish_nav_target	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::Publish_nav_target()$/;"	f	class:Edgeleg_manager_action
Publish_nav_target	human_filter/src/service_test.cpp	/^void Edgeleg_manager_srv::Publish_nav_target()$/;"	f	class:Edgeleg_manager_srv
Publish_nav_target	villa_navi_service/src/navi_service_node.cpp	/^void villa_navi_srv::Publish_nav_target(float _x, float _y, float _theta)$/;"	f	class:villa_navi_srv
QNode	despot/include/despot/core/node.h	/^class QNode {$/;"	c	namespace:despot
QNode	despot/src/core/node.cpp	/^QNode::QNode(VNode* parent, int edge) :$/;"	f	class:despot::QNode
QNode	despot/src/core/node.cpp	/^QNode::QNode(int count, double value) :$/;"	f	class:despot::QNode
QueryDoubleAttribute	despot/src/util/tinyxml/tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const std::string& name, double* dval ) const$/;"	f	class:despot::util::tinyxml::TiXmlElement
QueryDoubleAttribute	despot/src/util/tinyxml/tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute(const char* name, double* dval) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
QueryDoubleValue	despot/src/util/tinyxml/tinyxml.cpp	/^int TiXmlAttribute::QueryDoubleValue(double* dval) const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
QueryFloatAttribute	despot/include/despot/util/tinyxml/tinyxml.h	/^	int QueryFloatAttribute(const char* name, float* _value) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
QueryIntAttribute	despot/src/util/tinyxml/tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const std::string& name, int* ival ) const$/;"	f	class:despot::util::tinyxml::TiXmlElement
QueryIntAttribute	despot/src/util/tinyxml/tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute(const char* name, int* ival) const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
QueryIntValue	despot/src/util/tinyxml/tinyxml.cpp	/^int TiXmlAttribute::QueryIntValue(int* ival) const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
QueryValueAttribute	despot/include/despot/util/tinyxml/tinyxml.h	/^	template< typename T> int QueryValueAttribute( const std::string& name, T* outValue ) const$/;"	f	class:despot::util::tinyxml::TiXmlElement
RAD2DEG	navi_mdp/include/types.h	/^inline real_s RAD2DEG(double r){ return (r * SR_DEGREE); }$/;"	f
RAD2DEG	navi_mdp/include/types.h	/^inline real_s RAD2DEG(float r) { return (r * SR_DEGREE); }$/;"	f
RAD2DEG	navi_mdp/include/types.h	/^inline real_s RAD2DEG(int r)	 { return (r * SR_DEGREE); }$/;"	f
RANDOM	despot/include/despot/util/random.h	/^	static Random RANDOM;$/;"	m	class:despot::Random
RANDOM_H	despot/include/despot/util/random.h	2;"	d
RANDOM_STREAMS_H	despot/include/despot/random_streams.h	2;"	d
REG_DEMO_H	despot/examples/cpp_models/reg_demo/src/reg_demo.h	2;"	d
REWARD_VAR_VALUE	despot/include/despot/pomdpx/parser/parser.h	21;"	d
RIGHT	despot/examples/cpp_models/bridge/src/bridge.cpp	/^int Bridge::RIGHT = 1;$/;"	m	class:despot::Bridge	file:
RIGHT	despot/examples/cpp_models/bridge/src/bridge.h	/^	static int LEFT, RIGHT, HELP, BRIDGELENGTH;$/;"	m	class:despot::Bridge
RIGHT	despot/examples/cpp_models/tiger/src/tiger.cpp	/^const int Tiger::RIGHT = 1;$/;"	m	class:despot::Tiger	file:
RIGHT	despot/examples/cpp_models/tiger/src/tiger.h	/^	static const int LEFT, RIGHT, LISTEN;$/;"	m	class:despot::Tiger
ROCKSAMPLE_H	despot/examples/cpp_models/rock_sample/src/rock_sample/rock_sample.h	2;"	d
RS_BIN	despot/examples/cpp_models/rock_sample/Makefile	/^RS_BIN = rock_sample$/;"	m
RS_SOURCES	despot/examples/cpp_models/rock_sample/Makefile	/^RS_SOURCES = $(shell find -L $(SRCDIR)\/base $(SRCDIR)\/rock_sample -name '*.cpp')$/;"	m
Ra	navi_mdp/include/Dynamic_Manager.h	/^ 	double Ra;$/;"	m	class:Dynamic_Manager
Ra	navi_mdp/include/MDPmanager.h	/^ 	double Ra;$/;"	m	class:MDPManager
Random	despot/include/despot/util/random.h	/^class Random {$/;"	c	namespace:despot
Random	despot/src/util/random.cpp	/^Random::Random(double seed) :$/;"	f	class:despot::Random
Random	despot/src/util/random.cpp	/^Random::Random(unsigned seed) :$/;"	f	class:despot::Random
RandomMap	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^string BaseTag::RandomMap(int height, int width, int obstacles) {$/;"	f	class:despot::BaseTag
RandomPolicy	despot/include/despot/core/policy.h	/^class RandomPolicy: public Policy {$/;"	c	namespace:despot
RandomPolicy	despot/src/core/policy.cpp	/^RandomPolicy::RandomPolicy(const DSPOMDP* model, ParticleLowerBound* bound,$/;"	f	class:despot::RandomPolicy
RandomPolicy	despot/src/core/policy.cpp	/^RandomPolicy::RandomPolicy(const DSPOMDP* model,$/;"	f	class:despot::RandomPolicy
RandomStreams	despot/include/despot/random_streams.h	/^class RandomStreams {$/;"	c	namespace:despot
RandomStreams	despot/src/random_streams.cpp	/^RandomStreams::RandomStreams(int num_streams, int length) :$/;"	f	class:despot::RandomStreams
ReachGoal	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	bool ReachGoal;$/;"	m	class:despot::Navigation
ReachGoal	despot/examples/cpp_models/navigation/src/navigation.h	/^	bool ReachGoal;$/;"	m	class:despot::Navigation
ReachGoal	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	bool ReachGoal;$/;"	m	class:despot::Navigation
ReadConfig	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^void BaseTag::ReadConfig(istream& is) {$/;"	f	class:despot::BaseTag
ReadName	despot/src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlBase::ReadName(const char* p, TIXML_STRING * name,$/;"	f	class:despot::util::tinyxml::TiXmlBase
ReadText	despot/src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlBase::ReadText(const char* p, TIXML_STRING * text,$/;"	f	class:despot::util::tinyxml::TiXmlBase
ReadValue	despot/src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlElement::ReadValue(const char* p, TiXmlParsingData* data,$/;"	f	class:despot::util::tinyxml::TiXmlElement
ReceiveData	navi_mdp/include/Dynamic_Manager.h	/^ 	int ReceiveData;$/;"	m	class:Dynamic_Manager
ReceiveData	navi_mdp/include/MDPmanager.h	/^ 	int ReceiveData;$/;"	m	class:MDPManager
Receive_count	navi_mdp/src/dynamic_planner.cpp	/^static int  Receive_count=0;$/;"	v	file:
Receive_count	navi_mdp/src/global_planner.cpp	/^static int  Receive_count=0;$/;"	v	file:
Recived_path	navi_mdp/include/PathManager.h	/^	std::vector< std::vector<double> > Recived_path;$/;"	m	class:PathManager
RecursiveValue	despot/src/core/policy.cpp	/^ValuedAction Policy::RecursiveValue(const vector<State*>& particles,$/;"	f	class:despot::Policy
RegDemo	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^RegDemo::RegDemo() {$/;"	f	class:despot::RegDemo
RegDemo	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^RegDemo::RegDemo(string params_file) {$/;"	f	class:despot::RegDemo
RegDemo	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^class RegDemo: public DSPOMDP,$/;"	c	namespace:despot
RegDemoState	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^RegDemoState::RegDemoState() {$/;"	f	class:despot::RegDemoState
RegDemoState	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^RegDemoState::RegDemoState(int _state_id) {$/;"	f	class:despot::RegDemoState
RegDemoState	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^class RegDemoState: public State {$/;"	c	namespace:despot
Remove	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlAttributeSet::Remove(TiXmlAttribute* removeMe) {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
RemoveAttribute	despot/include/despot/util/tinyxml/tinyxml.h	/^	void RemoveAttribute( const std::string& name ) {$/;"	f	class:despot::util::tinyxml::TiXmlElement
RemoveAttribute	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::RemoveAttribute(const char * name) {$/;"	f	class:despot::util::tinyxml::TiXmlElement
RemoveChild	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlNode::RemoveChild(TiXmlNode* removeThis) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
RemoveLast	despot/include/despot/core/history.h	/^	void RemoveLast() {$/;"	f	class:despot::History
Rep	despot/include/despot/util/tinyxml/tinystr.h	/^	struct Rep {$/;"	s	class:despot::util::tinyxml::TiXmlString
ReplaceChild	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlNode::ReplaceChild(TiXmlNode* replaceThis,$/;"	f	class:despot::util::tinyxml::TiXmlNode
ReportStepReward	despot/src/evaluator.cpp	/^void Evaluator::ReportStepReward() {$/;"	f	class:despot::Evaluator
Required	despot/include/despot/util/optionparser.h	/^	static option::ArgStatus Required(const option::Option& option, bool msg) {$/;"	f	struct:despot::option::Arg
Resample	despot/src/core/belief.cpp	/^vector<State*> Belief::Resample(int num, const Belief& belief, History history,$/;"	f	class:despot::Belief
Resample	despot/src/core/belief.cpp	/^vector<State*> Belief::Resample(int num, const DSPOMDP* model,$/;"	f	class:despot::Belief
Resample	despot/src/core/belief.cpp	/^vector<State*> Belief::Resample(int num, const vector<State*>& belief,$/;"	f	class:despot::Belief
Reset	despot/src/core/lower_bound.cpp	/^void ScenarioLowerBound::Reset() {$/;"	f	class:despot::ScenarioLowerBound
Reset	despot/src/core/policy.cpp	/^void Policy::Reset() {$/;"	f	class:despot::Policy
Resize	despot/include/despot/util/grid.h	/^	void Resize(int xsize, int ysize) {$/;"	f	class:despot::Grid
Reward	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^double Adventurer::Reward(int s, int action) const {$/;"	f	class:despot::Adventurer
Reward	despot/examples/cpp_models/chain/src/chain.cpp	/^double Chain::Reward(int s1, int action, int s2) const {$/;"	f	class:despot::Chain
Reward	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^double Navigation::Reward(int s, int action) const {$/;"	f	class:despot::Navigation
Reward	despot/examples/cpp_models/navigation/src/navigation.cpp	/^double Navigation::Reward(int s, int action) const {$/;"	f	class:despot::Navigation
Reward	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^double Navigation::Reward(int s, int action) const {$/;"	f	class:despot::Navigation
Reward	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^double RegDemo::Reward(int s, int action) const {$/;"	f	class:despot::RegDemo
Reward	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^double BaseRockSample::Reward(int s, int a) const {$/;"	f	class:despot::BaseRockSample
Reward	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^double BaseTag::Reward(int s, int action) const {$/;"	f	class:despot::BaseTag
Reward	despot/src/pomdpx/pomdpx.cpp	/^double POMDPX::Reward(int s, int a) const {$/;"	f	class:despot::POMDPX
RewardVar	despot/include/despot/pomdpx/parser/variable.h	76;"	d
Rewards	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<double>    Rewards; 		\/\/ R$/;"	m	class:Dynamic_Manager
Rewards	navi_mdp/include/MDPmanager.h	/^ 	vector<double>    Rewards; 		\/\/ R$/;"	m	class:MDPManager
RobOppIndicesToStateIndex	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	inline int RobOppIndicesToStateIndex(int rob, int opp) const {$/;"	f	class:despot::BaseTag
RobotHeading_V	navi_mdp/include/MapParam.h	/^	std::vector<float>  RobotHeading_V;$/;"	m	class:MapParam
RobotHeading_pub	navi_mdp/include/Dynamic_Manager.h	/^	ros::Publisher   RobotHeading_pub;$/;"	m	class:Dynamic_Manager
RobotHeading_pub	navi_mdp/include/MDPmanager.h	/^	ros::Publisher   RobotHeading_pub;$/;"	m	class:MDPManager
Robot_Pos	villa_navi_service/include/navi_service_node.h	/^	std::vector<double> Robot_Pos;				\/\/x,y,theta$/;"	m	class:villa_navi_srv
Robot_localpos	navi_mdp/include/MapParam.h	/^	std::vector<int>    Robot_localpos;$/;"	m	class:MapParam
Robotheading_Callback	navi_mdp/src/base_conti_actionlib.cpp	/^void Robotheading_Callback(const geometry_msgs::Pose::ConstPtr& msg)$/;"	f
RockSample	despot/examples/cpp_models/rock_sample/src/rock_sample/rock_sample.cpp	/^RockSample::RockSample(int size, int rocks) :$/;"	f	class:despot::RockSample
RockSample	despot/examples/cpp_models/rock_sample/src/rock_sample/rock_sample.cpp	/^RockSample::RockSample(string map) :$/;"	f	class:despot::RockSample
RockSample	despot/examples/cpp_models/rock_sample/src/rock_sample/rock_sample.h	/^class RockSample: public BaseRockSample {$/;"	c	namespace:despot
RockSampleApproxParticleUpperBound	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleApproxParticleUpperBound(const BaseRockSample* model) :$/;"	f	class:despot::RockSampleApproxParticleUpperBound
RockSampleApproxParticleUpperBound	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleApproxParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
RockSampleBelief	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleBelief(vector<State*> particles, const DSPOMDP* model,$/;"	f	class:despot::RockSampleBelief
RockSampleBelief	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleBelief: public ParticleBelief {$/;"	c	namespace:despot	file:
RockSampleENTScenarioLowerBound	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleENTScenarioLowerBound(const DSPOMDP* model) : \/\/ ENT: Explore Nearest in Thresholded State$/;"	f	class:despot::RockSampleENTScenarioLowerBound
RockSampleENTScenarioLowerBound	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleENTScenarioLowerBound: public ScenarioLowerBound {$/;"	c	namespace:despot	file:
RockSampleEastBeliefPolicy	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleEastBeliefPolicy(const DSPOMDP* model, Belief* belief = NULL) :$/;"	f	class:despot::RockSampleEastBeliefPolicy
RockSampleEastBeliefPolicy	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleEastBeliefPolicy: public BeliefLowerBound {$/;"	c	namespace:despot	file:
RockSampleEastScenarioLowerBound	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleEastScenarioLowerBound(const DSPOMDP* model) :$/;"	f	class:despot::RockSampleEastScenarioLowerBound
RockSampleEastScenarioLowerBound	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleEastScenarioLowerBound : public ScenarioLowerBound {$/;"	c	namespace:despot	file:
RockSampleMDPBeliefUpperBound	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleMDPBeliefUpperBound(const BaseRockSample* model) :$/;"	f	class:despot::RockSampleMDPBeliefUpperBound
RockSampleMDPBeliefUpperBound	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleMDPBeliefUpperBound: public BeliefUpperBound {$/;"	c	namespace:despot	file:
RockSampleMDPParticleUpperBound	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleMDPParticleUpperBound(const BaseRockSample* model) :$/;"	f	class:despot::RockSampleMDPParticleUpperBound
RockSampleMDPParticleUpperBound	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleMDPParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
RockSampleMMAPStateScenarioLowerBound	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleMMAPStateScenarioLowerBound(const DSPOMDP* model) :$/;"	f	class:despot::RockSampleMMAPStateScenarioLowerBound
RockSampleMMAPStateScenarioLowerBound	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleMMAPStateScenarioLowerBound : public ScenarioLowerBound {$/;"	c	namespace:despot	file:
RockSamplePOMCPPrior	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSamplePOMCPPrior(const DSPOMDP* model) :$/;"	f	class:despot::RockSamplePOMCPPrior
RockSamplePOMCPPrior	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSamplePOMCPPrior: public POMCPPrior {$/;"	c	namespace:despot	file:
RockSampleParticleUpperBound1	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleParticleUpperBound1(const BaseRockSample* model) :$/;"	f	class:despot::RockSampleParticleUpperBound1
RockSampleParticleUpperBound1	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleParticleUpperBound1: public ParticleUpperBound {$/;"	c	namespace:despot	file:
RockSampleParticleUpperBound2	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	RockSampleParticleUpperBound2(const BaseRockSample* model) :$/;"	f	class:despot::RockSampleParticleUpperBound2
RockSampleParticleUpperBound2	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^class RockSampleParticleUpperBound2: public ParticleUpperBound {$/;"	c	namespace:despot	file:
RockSampleState	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^RockSampleState::RockSampleState() {$/;"	f	class:despot::RockSampleState
RockSampleState	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^RockSampleState::RockSampleState(int _state_id) {$/;"	f	class:despot::RockSampleState
RockSampleState	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^class RockSampleState: public State {$/;"	c	namespace:despot
Rollout	despot/src/solver/pomcp.cpp	/^double POMCP::Rollout(State* particle, RandomStreams& streams, int depth,$/;"	f	class:despot::POMCP
Rollout	despot/src/solver/pomcp.cpp	/^double POMCP::Rollout(State* particle, int depth, const DSPOMDP* model,$/;"	f	class:despot::POMCP
RootElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* RootElement() {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
RootElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TiXmlElement* RootElement() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
Row	despot/include/despot/util/tinyxml/tinyxml.h	/^	int Row() const {$/;"	f	class:despot::util::tinyxml::TiXmlBase
RunEvaluator	despot/src/simple_tui.cpp	/^void SimpleTUI::RunEvaluator(DSPOMDP *model, Evaluator *simulator,$/;"	f	class:despot::SimpleTUI
RunStep	despot/src/evaluator.cpp	/^bool Evaluator::RunStep(int step, int round) {$/;"	f	class:despot::Evaluator
SEEDS_H	despot/include/despot/util/seeds.h	2;"	d
SIMPLEROCKSAMPLE_H	despot/examples/cpp_models/simpleNavi/src/simpleNavi.h	2;"	d
SIMPLEROCKSAMPLE_H	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	2;"	d
SIMPLETUI_H	despot/include/despot/simple_tui.h	2;"	d
SIMULATOR_H	despot/include/despot/evaluator.h	2;"	d
SLIP	despot/examples/cpp_models/chain/src/chain.h	/^		SUCCESS, SLIP$/;"	e	enum:despot::SemiChainBelief::__anon13
SOLVER_H	despot/include/despot/core/solver.h	2;"	d
SOURCES	despot/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	despot/examples/cpp_models/adventurer/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	despot/examples/cpp_models/bridge/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	despot/examples/cpp_models/chain/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	despot/examples/cpp_models/localnavigation/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	despot/examples/cpp_models/navigation/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	despot/examples/cpp_models/pathfollowing/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	despot/examples/cpp_models/pocman/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	despot/examples/cpp_models/reg_demo/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	despot/examples/cpp_models/simpleNavi/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	despot/examples/cpp_models/simple_rock_sample/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	despot/examples/cpp_models/tiger/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOURCES	despot/examples/pomdpx_models/Makefile	/^SOURCES = $(shell find -L $(SRCDIR) -name '*.cpp')$/;"	m
SOUTH	despot/include/despot/util/coord.h	/^		SOUTH, EAST, NORTH, WEST, NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST$/;"	e	enum:despot::Compass::__anon1
SOUTHEAST	despot/include/despot/util/coord.h	/^		SOUTH, EAST, NORTH, WEST, NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST$/;"	e	enum:despot::Compass::__anon1
SOUTHWEST	despot/include/despot/util/coord.h	/^		SOUTH, EAST, NORTH, WEST, NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST$/;"	e	enum:despot::Compass::__anon1
SRCDIR	despot/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	despot/examples/cpp_models/adventurer/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	despot/examples/cpp_models/bridge/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	despot/examples/cpp_models/chain/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	despot/examples/cpp_models/localnavigation/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	despot/examples/cpp_models/navigation/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	despot/examples/cpp_models/pathfollowing/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	despot/examples/cpp_models/pocman/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	despot/examples/cpp_models/reg_demo/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	despot/examples/cpp_models/rock_sample/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	despot/examples/cpp_models/simpleNavi/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	despot/examples/cpp_models/simple_rock_sample/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	despot/examples/cpp_models/tag/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	despot/examples/cpp_models/tiger/Makefile	/^SRCDIR = src$/;"	m
SRCDIR	despot/examples/pomdpx_models/Makefile	/^SRCDIR = src$/;"	m
SRLIB_DOUBLE	navi_mdp/include/types.h	4;"	d
SRLIB_TYPE	navi_mdp/include/types.h	2;"	d
SR_DEGREE	navi_mdp/include/types.h	22;"	d
SR_DEGREE	navi_mdp/include/types.h	45;"	d
SR_EPS	navi_mdp/include/types.h	31;"	d
SR_EPS	navi_mdp/include/types.h	8;"	d
SR_FOURTHIRD	navi_mdp/include/types.h	20;"	d
SR_FOURTHIRD	navi_mdp/include/types.h	43;"	d
SR_HALF	navi_mdp/include/types.h	10;"	d
SR_HALF	navi_mdp/include/types.h	33;"	d
SR_ISEQUAL	navi_mdp/include/types.h	25;"	d
SR_ISEQUAL	navi_mdp/include/types.h	48;"	d
SR_ISZERO	navi_mdp/include/types.h	24;"	d
SR_ISZERO	navi_mdp/include/types.h	47;"	d
SR_ONE	navi_mdp/include/types.h	11;"	d
SR_ONE	navi_mdp/include/types.h	34;"	d
SR_ONESIXTH	navi_mdp/include/types.h	19;"	d
SR_ONESIXTH	navi_mdp/include/types.h	42;"	d
SR_ONETHIRD	navi_mdp/include/types.h	18;"	d
SR_ONETHIRD	navi_mdp/include/types.h	41;"	d
SR_PI	navi_mdp/include/types.h	14;"	d
SR_PI	navi_mdp/include/types.h	37;"	d
SR_PI_HALF	navi_mdp/include/types.h	13;"	d
SR_PI_HALF	navi_mdp/include/types.h	36;"	d
SR_PI_SQR	navi_mdp/include/types.h	17;"	d
SR_PI_SQR	navi_mdp/include/types.h	40;"	d
SR_PI_SQRT2	navi_mdp/include/types.h	16;"	d
SR_PI_SQRT2	navi_mdp/include/types.h	39;"	d
SR_RADIAN	navi_mdp/include/types.h	21;"	d
SR_RADIAN	navi_mdp/include/types.h	44;"	d
SR_RAND	navi_mdp/include/types.h	27;"	d
SR_RAND	navi_mdp/include/types.h	50;"	d
SR_ROUND	navi_mdp/include/types.h	26;"	d
SR_ROUND	navi_mdp/include/types.h	49;"	d
SR_SAFE_DELETE	navi_mdp/include/utils.h	4;"	d
SR_SAFE_DELETE_AR	navi_mdp/include/utils.h	6;"	d
SR_SAFE_DESTROY_WINDOW	navi_mdp/include/utils.h	5;"	d
SR_SAFE_RELEASE	navi_mdp/include/utils.h	7;"	d
SR_SENSOR_MSG_NA	navi_mdp/include/types.h	67;"	d
SR_TWO	navi_mdp/include/types.h	12;"	d
SR_TWO	navi_mdp/include/types.h	35;"	d
SR_TWO_PI	navi_mdp/include/types.h	15;"	d
SR_TWO_PI	navi_mdp/include/types.h	38;"	d
SR_ZERO	navi_mdp/include/types.h	32;"	d
SR_ZERO	navi_mdp/include/types.h	9;"	d
STATE_NUM_THRESHOLD	despot/include/despot/pomdpx/pomdpx.h	/^	static int STATE_NUM_THRESHOLD;$/;"	m	class:despot::POMDPX
STATE_NUM_THRESHOLD	despot/src/pomdpx/pomdpx.cpp	/^int POMDPX::STATE_NUM_THRESHOLD = 1000000;$/;"	m	class:despot::POMDPX	file:
STATE_POS_VEL_H	human_filter/include/people_tracking_filter/state_pos_vel.h	39;"	d
SUCCESS	despot/examples/cpp_models/chain/src/chain.h	/^		SUCCESS, SLIP$/;"	e	enum:despot::SemiChainBelief::__anon13
SYSMODEL_POS_VEL_H	human_filter/include/people_tracking_filter/sysmodel_pos_vel.h	38;"	d
SYSMODEL_VECTOR_H	human_filter/include/people_tracking_filter/sysmodel_vector.h	38;"	d
Same_POS_diff	villa_navi_service/include/navi_service_node.h	45;"	d
Sample	despot/examples/cpp_models/chain/src/chain.cpp	/^vector<State*> FullChainBelief::Sample(int num_particles) const {$/;"	f	class:despot::FullChainBelief
Sample	despot/examples/cpp_models/chain/src/chain.cpp	/^vector<State*> SemiChainBelief::Sample(int num_particles) const {$/;"	f	class:despot::SemiChainBelief
Sample	despot/src/core/belief.cpp	/^vector<State*> Belief::Sample(int num, vector<State*> particles,$/;"	f	class:despot::Belief
Sample	despot/src/core/belief.cpp	/^vector<State*> ParticleBelief::Sample(int num) const {$/;"	f	class:despot::ParticleBelief
SampleFrom	human_filter/src/gaussian_pos_vel.cpp	/^GaussianPosVel::SampleFrom(Sample<StatePosVel>& one_sample, int method, void * args) const$/;"	f	class:BFL::GaussianPosVel
SampleFrom	human_filter/src/gaussian_pos_vel.cpp	/^GaussianPosVel::SampleFrom(vector<Sample<StatePosVel> >& list_samples, const int num_samples, int method, void * args) const$/;"	f	class:BFL::GaussianPosVel
SampleFrom	human_filter/src/gaussian_vector.cpp	/^GaussianVector::SampleFrom(Sample<Vector3>& one_sample, int method, void * args) const$/;"	f	class:BFL::GaussianVector
SampleFrom	human_filter/src/gaussian_vector.cpp	/^GaussianVector::SampleFrom(vector<Sample<Vector3> >& list_samples, const int num_samples, int method, void * args) const$/;"	f	class:BFL::GaussianVector
SampleFrom	human_filter/src/measmodel_pos.cpp	/^MeasPdfPos::SampleFrom(Sample<Vector3>& one_sample, int method, void *args) const$/;"	f	class:MeasPdfPos
SampleFrom	human_filter/src/measmodel_vector.cpp	/^MeasPdfVector::SampleFrom(Sample<Vector3>& one_sample, int method, void *args) const$/;"	f	class:MeasPdfVector
SampleFrom	human_filter/src/sysmodel_pos_vel.cpp	/^SysPdfPosVel::SampleFrom(Sample<StatePosVel>& one_sample, int method, void *args) const$/;"	f	class:SysPdfPosVel
SampleFrom	human_filter/src/sysmodel_vector.cpp	/^SysPdfVector::SampleFrom(Sample<Vector3>& one_sample, int method, void *args) const$/;"	f	class:SysPdfVector
SampleFrom	human_filter/src/uniform_vector.cpp	/^UniformVector::SampleFrom(Sample<Vector3>& one_sample, int method, void * args) const$/;"	f	class:BFL::UniformVector
SampleFrom	human_filter/src/uniform_vector.cpp	/^UniformVector::SampleFrom(vector<Sample<Vector3> >& list_samples, const int num_samples, int method, void * args) const$/;"	f	class:BFL::UniformVector
SampleGet	human_filter/src/mcpdf_pos_vel.cpp	/^MCPdfPosVel::SampleGet(unsigned int particle) const$/;"	f	class:MCPdfPosVel
SampleGet	human_filter/src/mcpdf_vector.cpp	/^MCPdfVector::SampleGet(unsigned int particle) const$/;"	f	class:MCPdfVector
SampleRock	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^void BaseRockSample::SampleRock(State* state, int rock) const {$/;"	f	class:despot::BaseRockSample
Save	despot/src/evaluator.cpp	/^void EvalLog::Save() {$/;"	f	class:despot::EvalLog
SaveBelief	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::SaveBelief(const Belief& belief)$/;"	f	class:despot::Navigation
SaveBelief	despot/include/despot/core/pomdp.h	/^	virtual void SaveBelief(const Belief& belief){};	$/;"	f	class:despot::DSPOMDP
SaveFile	despot/include/despot/util/tinyxml/tinyxml.h	/^	bool SaveFile( const std::string& filename ) const \/\/\/< STL std::string version.$/;"	f	class:despot::util::tinyxml::TiXmlDocument
SaveFile	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::SaveFile() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
SaveFile	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::SaveFile(FILE* fp) const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
SaveFile	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::SaveFile(const char * filename) const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
Scaled_dynamic_map	navi_mdp/include/Dynamic_Manager.h	/^	nav_msgs::OccupancyGrid Scaled_dynamic_map;$/;"	m	class:Dynamic_Manager
Scaled_dynamic_map	navi_mdp/include/MDPmanager.h	/^	nav_msgs::OccupancyGrid Scaled_dynamic_map;$/;"	m	class:MDPManager
Scaled_dynamic_map_path	navi_mdp/include/Dynamic_Manager.h	/^	nav_msgs::OccupancyGrid Scaled_dynamic_map_path;$/;"	m	class:Dynamic_Manager
Scaled_dynamic_map_path	navi_mdp/include/MDPmanager.h	/^	nav_msgs::OccupancyGrid Scaled_dynamic_map_path;$/;"	m	class:MDPManager
Scaled_dynamic_map_path_pub	navi_mdp/include/Dynamic_Manager.h	/^	ros::Publisher   Scaled_dynamic_map_path_pub;$/;"	m	class:Dynamic_Manager
Scaled_dynamic_map_path_pub	navi_mdp/include/MDPmanager.h	/^	ros::Publisher   Scaled_dynamic_map_path_pub;$/;"	m	class:MDPManager
Scaled_dynamic_map_pub	navi_mdp/include/Dynamic_Manager.h	/^	ros::Publisher   Scaled_dynamic_map_pub;$/;"	m	class:Dynamic_Manager
Scaled_dynamic_map_pub	navi_mdp/include/MDPmanager.h	/^	ros::Publisher   Scaled_dynamic_map_pub;$/;"	m	class:MDPManager
Scaled_map	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  nav_msgs::OccupancyGrid Scaled_map;$/;"	m	class:Edgeleg_manager
Scaled_map	human_filter/include/people_tracking_filter/followme_action.h	/^  nav_msgs::OccupancyGrid Scaled_map;$/;"	m	class:Edgeleg_manager_action
Scaled_map	human_filter/include/people_tracking_filter/service_test.h	/^  nav_msgs::OccupancyGrid Scaled_map;$/;"	m	class:Edgeleg_manager_srv
Scaled_static_map	navi_mdp/include/Dynamic_Manager.h	/^	nav_msgs::OccupancyGrid Scaled_static_map;$/;"	m	class:Dynamic_Manager
Scaled_static_map	navi_mdp/include/MDPmanager.h	/^	nav_msgs::OccupancyGrid Scaled_static_map;$/;"	m	class:MDPManager
Scaled_static_map_path	navi_mdp/include/Dynamic_Manager.h	/^	nav_msgs::OccupancyGrid Scaled_static_map_path;$/;"	m	class:Dynamic_Manager
Scaled_static_map_path	navi_mdp/include/MDPmanager.h	/^	nav_msgs::OccupancyGrid Scaled_static_map_path;$/;"	m	class:MDPManager
Scaled_static_map_path_pub	navi_mdp/include/MDPmanager.h	/^	ros::Publisher   Scaled_static_map_path_pub;$/;"	m	class:MDPManager
Scaled_static_map_pub	navi_mdp/include/Dynamic_Manager.h	/^	ros::Publisher   Scaled_static_map_pub;$/;"	m	class:Dynamic_Manager
Scaled_static_map_pub	navi_mdp/include/MDPmanager.h	/^	ros::Publisher   Scaled_static_map_pub;$/;"	m	class:MDPManager
Scaled_static_map_sub	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::Subscriber Scaled_static_map_sub;$/;"	m	class:Edgeleg_manager
Scaled_static_map_sub	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::Subscriber Scaled_static_map_sub;$/;"	m	class:Edgeleg_manager_action
Scaled_static_map_sub	human_filter/include/people_tracking_filter/service_test.h	/^  ros::Subscriber Scaled_static_map_sub;$/;"	m	class:Edgeleg_manager_srv
ScenarioLowerBound	despot/include/despot/core/lower_bound.h	/^class ScenarioLowerBound: public Solver {$/;"	c	namespace:despot
ScenarioLowerBound	despot/src/core/lower_bound.cpp	/^ScenarioLowerBound::ScenarioLowerBound(const DSPOMDP* model, Belief* belief) :$/;"	f	class:despot::ScenarioLowerBound
ScenarioUpperBound	despot/include/despot/core/upper_bound.h	/^class ScenarioUpperBound {$/;"	c	namespace:despot
ScenarioUpperBound	despot/src/core/upper_bound.cpp	/^ScenarioUpperBound::ScenarioUpperBound() {$/;"	f	class:despot::ScenarioUpperBound
Search	despot/src/core/lower_bound.cpp	/^ValuedAction BeliefLowerBound::Search() {$/;"	f	class:despot::BeliefLowerBound
Search	despot/src/core/lower_bound.cpp	/^ValuedAction ScenarioLowerBound::Search() {$/;"	f	class:despot::ScenarioLowerBound
Search	despot/src/core/policy.cpp	/^ValuedAction BlindPolicy::Search() {$/;"	f	class:despot::BlindPolicy
Search	despot/src/core/policy.cpp	/^ValuedAction Policy::Search() {$/;"	f	class:despot::Policy
Search	despot/src/core/policy.cpp	/^ValuedAction RandomPolicy::Search() {$/;"	f	class:despot::RandomPolicy
Search	despot/src/solver/aems.cpp	/^ValuedAction AEMS::Search() {$/;"	f	class:despot::AEMS
Search	despot/src/solver/despot.cpp	/^ValuedAction DESPOT::Search() {$/;"	f	class:despot::DESPOT
Search	despot/src/solver/pomcp.cpp	/^ValuedAction DPOMCP::Search(double timeout) {$/;"	f	class:despot::DPOMCP
Search	despot/src/solver/pomcp.cpp	/^ValuedAction POMCP::Search() {$/;"	f	class:despot::POMCP
Search	despot/src/solver/pomcp.cpp	/^ValuedAction POMCP::Search(double timeout) {$/;"	f	class:despot::POMCP
SearchStatistics	despot/include/despot/core/solver.h	/^struct SearchStatistics {$/;"	s	namespace:despot
SearchStatistics	despot/src/core/solver.cpp	/^SearchStatistics::SearchStatistics() :$/;"	f	class:despot::SearchStatistics
SeeGhost	despot/examples/cpp_models/pocman/src/pocman.cpp	/^int Pocman::SeeGhost(const PocmanState& pocstate, int action) const {$/;"	f	class:despot::Pocman
SeePed	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^int Navigation::SeePed(const NavigationState& navstate, int action) const {$/;"	f	class:despot::Navigation
SeePed	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^int Navigation::SeePed(const NavigationState& navstate, int action) const {$/;"	f	class:despot::Navigation
SeePed2	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^int Navigation::SeePed2(const NavigationState& navstate, int action) const {$/;"	f	class:despot::Navigation
Seeds	despot/include/despot/util/seeds.h	/^class Seeds {$/;"	c	namespace:despot
SelectBestUpperBoundNode	despot/src/solver/despot.cpp	/^QNode* DESPOT::SelectBestUpperBoundNode(VNode* vnode) {$/;"	f	class:despot::DESPOT
SelectBestWEUNode	despot/src/solver/despot.cpp	/^VNode* DESPOT::SelectBestWEUNode(QNode* qnode) {$/;"	f	class:despot::DESPOT
SemiChainBelief	despot/examples/cpp_models/chain/src/chain.cpp	/^SemiChainBelief::SemiChainBelief(const DSPOMDP* model, int num_mdp_states,$/;"	f	class:despot::SemiChainBelief
SemiChainBelief	despot/examples/cpp_models/chain/src/chain.h	/^class SemiChainBelief: public Belief {$/;"	c	namespace:despot
Sending_cmd_Robot	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::Sending_cmd_Robot()$/;"	f	class:despot::Navigation
SensorMsg	edge_leg_detector/src/detector.cpp	/^sensor_msgs::LaserScan SensorMsg;$/;"	v
SensorMsg	edge_leg_detector/src/edge_leg_detector/detector.cpp	/^sensor_msgs::LaserScan SensorMsg;$/;"	v
Set	navi_mdp/src/srBSpline.cpp	/^void srBSpline::Set( int Degree, int NumCPs, double Ti, double Tf , bool KnotRepeat \/*= true*\/ )$/;"	f	class:srBSpline
Set	navi_mdp/src/srBSpline.cpp	/^void srBSpline::Set( int Degree, int NumCPs, double* CPs, double Ti, double Tf , bool KnotRepeat \/*= true*\/ )$/;"	f	class:srBSpline
Set	navi_mdp/src/srBSpline.cpp	/^void srBSpline::Set( int Degree, int NumCPs, double* CPs, int NumKnots, double* Knots )$/;"	f	class:srBSpline
SetAllValues	despot/include/despot/util/grid.h	/^	void SetAllValues(const T& value) {$/;"	f	class:despot::Grid
SetAllocated	despot/include/despot/util/memorypool.h	/^	void SetAllocated() {$/;"	f	class:despot::MemoryObject
SetAttribute	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, const std::string& _value )$/;"	f	class:despot::util::tinyxml::TiXmlElement
SetAttribute	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, int val )$/;"	f	class:despot::util::tinyxml::TiXmlElement
SetAttribute	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::SetAttribute(const char * cname, const char * cvalue) {$/;"	f	class:despot::util::tinyxml::TiXmlElement
SetAttribute	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::SetAttribute(const char * name, int val) {$/;"	f	class:despot::util::tinyxml::TiXmlElement
SetCDATA	despot/include/despot/util/tinyxml/tinyxml.h	/^	void SetCDATA(bool _cdata) {$/;"	f	class:despot::util::tinyxml::TiXmlText
SetCol	despot/include/despot/util/grid.h	/^	void SetCol(int x, T* values) {$/;"	f	class:despot::Grid
SetCondenseWhiteSpace	despot/include/despot/util/tinyxml/tinyxml.h	/^	static void SetCondenseWhiteSpace(bool condense) {$/;"	f	class:despot::util::tinyxml::TiXmlBase
SetControlPoint	navi_mdp/include/srBSpline.h	/^	void SetControlPoint( int Index, double NewValue ) { m_ControlPoints[Index] = NewValue; }$/;"	f	class:srBSpline
SetCtrlPts	navi_mdp/src/srBSpline.cpp	/^bool srBSpline::SetCtrlPts( double aXi, double aXf, const double* pCtrlPts, int aRepeatedCtrlPts_Initial, int aRepeatedCtrlPts_Final, int NumCtrlPt )$/;"	f	class:srBSpline
SetDifferentialBSpline	navi_mdp/src/srBSpline.cpp	/^void srBSpline::SetDifferentialBSpline( srBSpline& aBSplineSource )$/;"	f	class:srBSpline
SetDocument	despot/include/despot/util/tinyxml/tinyxml.h	/^	void SetDocument(TiXmlDocument* doc) {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
SetDoubleAttribute	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute(const char * name, double val) {$/;"	f	class:despot::util::tinyxml::TiXmlElement
SetDoubleValue	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlAttribute::SetDoubleValue(double _value) {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
SetDt	human_filter/include/people_tracking_filter/gaussian_pos_vel.h	/^  void SetDt(double dt) const$/;"	f	class:BFL::GaussianPosVel
SetDt	human_filter/include/people_tracking_filter/sysmodel_pos_vel.h	/^  void SetDt(double dt)$/;"	f	class:BFL::SysModelPosVel
SetDt	human_filter/include/people_tracking_filter/sysmodel_pos_vel.h	/^  void SetDt(double dt)$/;"	f	class:BFL::SysPdfPosVel
SetDt	human_filter/include/people_tracking_filter/sysmodel_vector.h	/^  void SetDt(double dt)$/;"	f	class:BFL::SysModelVector
SetDt	human_filter/include/people_tracking_filter/sysmodel_vector.h	/^  void SetDt(double dt)$/;"	f	class:BFL::SysPdfVector
SetError	despot/src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlDocument::SetError(int err, const char* pError,$/;"	f	class:despot::util::tinyxml::TiXmlDocument
SetFlag	despot/include/despot/util/util.h	/^inline void SetFlag(int& flags, int bit) {$/;"	f	namespace:despot
SetIndent	despot/include/despot/util/tinyxml/tinyxml.h	/^	void SetIndent(const char* _indent) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
SetInitialBudget	despot/src/evaluator.cpp	/^void EvalLog::SetInitialBudget(string instance) {$/;"	f	class:despot::EvalLog
SetIntValue	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlAttribute::SetIntValue(int _value) {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
SetKnot	navi_mdp/include/srBSpline.h	/^	void SetKnot( int Index, double NewValue ) { m_Knots[Index] = NewValue; }$/;"	f	class:srBSpline
SetLineBreak	despot/include/despot/util/tinyxml/tinyxml.h	/^	void SetLineBreak(const char* _lineBreak) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
SetName	despot/include/despot/util/tinyxml/tinyxml.h	/^	void SetName( const std::string& _name ) {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
SetName	despot/include/despot/util/tinyxml/tinyxml.h	/^	void SetName(const char* _name) {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
SetParents	despot/src/pomdpx/parser/function.cpp	/^void HierarchyCPT::SetParents(int val, vector<NamedVar*> parents) {$/;"	f	class:despot::HierarchyCPT
SetReading	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^void LaserTag::SetReading(OBS_TYPE& obs, OBS_TYPE reading, OBS_TYPE dir) {$/;"	f	class:despot::LaserTag
SetReading	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^void NoisyLaserTag::SetReading(OBS_TYPE& obs, OBS_TYPE reading, OBS_TYPE dir) {$/;"	f	class:despot::NoisyLaserTag
SetRow	despot/include/despot/util/grid.h	/^	void SetRow(int y, T* values) {$/;"	f	class:despot::Grid
SetSize	despot/include/despot/util/util.h	/^void SetSize(std::vector<std::vector<T> > v, int d1, int d2) {$/;"	f	namespace:despot
SetSize	despot/include/despot/util/util.h	/^void SetSize(std::vector<std::vector<std::vector<T> > >& v, int d1, int d2, int d3) {$/;"	f	namespace:despot
SetStreamPrinting	despot/include/despot/util/tinyxml/tinyxml.h	/^	void SetStreamPrinting() {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
SetTabSize	despot/include/despot/util/tinyxml/tinyxml.h	/^	void SetTabSize(int _tabsize) {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
SetTransition	despot/examples/cpp_models/chain/src/chain.cpp	/^void ChainState::SetTransition(int state, int action, vector<double> row) {$/;"	f	class:despot::ChainState
SetTransition	despot/examples/cpp_models/chain/src/chain.h	/^	void SetTransition(int state1, int action, int state2, double value) {$/;"	f	class:despot::ChainState
SetUserData	despot/include/despot/util/tinyxml/tinyxml.h	/^	void SetUserData(void* user) {$/;"	f	class:despot::util::tinyxml::TiXmlBase
SetValue	despot/include/despot/pomdpx/parser/function.h	/^	inline bool SetValue(const std::vector<std::string>& keys,$/;"	f	class:despot::HierarchyCPT
SetValue	despot/include/despot/pomdpx/parser/function.h	/^	inline void SetValue(int pid, int cid, double value) {$/;"	f	class:despot::HierarchyCPT
SetValue	despot/include/despot/util/tinyxml/tinyxml.h	/^	void SetValue( const std::string& _value ) {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
SetValue	despot/include/despot/util/tinyxml/tinyxml.h	/^	void SetValue( const std::string& _value ) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
SetValue	despot/include/despot/util/tinyxml/tinyxml.h	/^	void SetValue(const char * _value) {$/;"	f	class:despot::util::tinyxml::TiXmlNode
SetValue	despot/include/despot/util/tinyxml/tinyxml.h	/^	void SetValue(const char* _value) {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
SetValue	despot/src/pomdpx/parser/function.cpp	/^bool Function::SetValue(const vector<string>& keys,$/;"	f	class:despot::Function
SetValue	despot/src/pomdpx/parser/function.cpp	/^bool Function::SetValue(vector<string>& keys, int key_pos, int pid, int cid,$/;"	f	class:despot::Function
SetValue	despot/src/pomdpx/parser/function.cpp	/^bool HierarchyCPT::SetValue(int val, const vector<string>& keys,$/;"	f	class:despot::HierarchyCPT
SetValue	despot/src/pomdpx/parser/function.cpp	/^void Function::SetValue(int pid, int cid, double value) {$/;"	f	class:despot::Function
SimpleNavi	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^SimpleNavi::SimpleNavi() {$/;"	f	class:despot::SimpleNavi
SimpleNavi	despot/examples/cpp_models/simpleNavi/src/simpleNavi.h	/^class SimpleNavi: public DSPOMDP {$/;"	c	namespace:despot
SimpleNaviEastPolicy	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^	SimpleNaviEastPolicy(const DSPOMDP* model, ParticleLowerBound* bound) :$/;"	f	class:despot::SimpleNaviEastPolicy
SimpleNaviEastPolicy	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^class SimpleNaviEastPolicy: public Policy {$/;"	c	namespace:despot	file:
SimpleNaviParticleUpperBound	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^	SimpleNaviParticleUpperBound(const DSPOMDP* model) {$/;"	f	class:despot::SimpleNaviParticleUpperBound
SimpleNaviParticleUpperBound	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^class SimpleNaviParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
SimpleRockSample	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^SimpleRockSample::SimpleRockSample() {$/;"	f	class:despot::SimpleRockSample
SimpleRockSample	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^class SimpleRockSample: public DSPOMDP {$/;"	c	namespace:despot
SimpleRockSampleEastPolicy	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^	SimpleRockSampleEastPolicy(const DSPOMDP* model, ParticleLowerBound* bound) :$/;"	f	class:despot::SimpleRockSampleEastPolicy
SimpleRockSampleEastPolicy	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^class SimpleRockSampleEastPolicy: public Policy {$/;"	c	namespace:despot	file:
SimpleRockSampleParticleUpperBound	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^	SimpleRockSampleParticleUpperBound(const DSPOMDP* model) {$/;"	f	class:despot::SimpleRockSampleParticleUpperBound
SimpleRockSampleParticleUpperBound	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^class SimpleRockSampleParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot	file:
SimpleState	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^SimpleState::SimpleState() {$/;"	f	class:despot::SimpleState
SimpleState	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^SimpleState::SimpleState(int _rover_position, int _rock_status) {$/;"	f	class:despot::SimpleState
SimpleState	despot/examples/cpp_models/simpleNavi/src/simpleNavi.h	/^class SimpleState: public State {$/;"	c	namespace:despot
SimpleState	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^SimpleState::SimpleState() {$/;"	f	class:despot::SimpleState
SimpleState	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^SimpleState::SimpleState(int _rover_position, int _rock_status) {$/;"	f	class:despot::SimpleState
SimpleState	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^class SimpleState: public State {$/;"	c	namespace:despot
SimpleTUI	despot/include/despot/simple_tui.h	/^class SimpleTUI {$/;"	c	namespace:despot
SimpleTUI	despot/src/simple_tui.cpp	/^SimpleTUI::SimpleTUI() {}$/;"	f	class:despot::SimpleTUI
Simulate	despot/src/solver/pomcp.cpp	/^double POMCP::Simulate(State* particle, RandomStreams& streams, VNode* vnode,$/;"	f	class:despot::POMCP
Simulate	despot/src/solver/pomcp.cpp	/^double POMCP::Simulate(State* particle, VNode* vnode, const DSPOMDP* model,$/;"	f	class:despot::POMCP
Size	despot/include/despot/core/history.h	/^	size_t Size() const {$/;"	f	class:despot::History
Size	despot/include/despot/pomdpx/parser/variable.h	/^	inline int Size() const {$/;"	f	class:despot::Variable
Size	despot/include/despot/util/memorypool.h	/^		static const int Size = 256;$/;"	m	struct:despot::MemoryPool::Chunk
Size	despot/include/despot/util/tinyxml/tinyxml.h	/^	size_t Size() {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
Size	despot/src/core/node.cpp	/^int QNode::Size() const {$/;"	f	class:despot::QNode
Size	despot/src/core/node.cpp	/^int VNode::Size() const {$/;"	f	class:despot::VNode
SkipWhiteSpace	despot/src/util/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlBase::SkipWhiteSpace(const char* p, TiXmlEncoding encoding) {$/;"	f	class:despot::util::tinyxml::TiXmlBase
SmartCount	despot/include/despot/solver/pomcp.h	/^	inline virtual int SmartCount(int action) const {$/;"	f	class:despot::POMCPPrior
SmartValue	despot/include/despot/solver/pomcp.h	/^	inline virtual double SmartValue(int action) const {$/;"	f	class:despot::POMCPPrior
SmellFood	despot/examples/cpp_models/pocman/src/pocman.cpp	/^bool Pocman::SmellFood(const PocmanState& pocstate) const {$/;"	f	class:despot::Pocman
SmellGoal	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^bool Navigation::SmellGoal(const NavigationState& navstate) const {$/;"	f	class:despot::Navigation
SmellGoal	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^bool Navigation::SmellGoal(const NavigationState& navstate) const {$/;"	f	class:despot::Navigation
SolveTridiagonal	navi_mdp/src/srBSpline.cpp	/^void srBSpline::SolveTridiagonal( int _n, std::vector<double>& _Q,double* _P )$/;"	f	class:srBSpline
SolveTridiagonal	navi_mdp/src/srBSpline.cpp	/^void srBSpline::SolveTridiagonal( int _n,double* _Q,double* _P )$/;"	f	class:srBSpline
Solver	despot/include/despot/core/solver.h	/^class Solver {$/;"	c	namespace:despot
Solver	despot/src/core/solver.cpp	/^Solver::Solver(const DSPOMDP* model, Belief* belief) :$/;"	f	class:despot::Solver
SortByKey	despot/include/despot/util/util.h	/^std::vector<std::pair<K, V> > SortByKey(std::map<K, V> m) {$/;"	f	namespace:despot
SortByValue	despot/include/despot/util/util.h	/^std::vector<std::pair<K, V> > SortByValue(std::map<K, V> m) {$/;"	f	namespace:despot
SpeechGui	navi_mdp/scripts/gui_move.py	/^class SpeechGui(QtGui.QWidget):$/;"	c
SplinePath_pub	navi_mdp/include/Dynamic_Manager.h	/^	ros::Publisher 	 SplinePath_pub;$/;"	m	class:Dynamic_Manager
SplinePath_pub	navi_mdp/include/MDPmanager.h	/^	ros::Publisher 	 SplinePath_pub;$/;"	m	class:MDPManager
SplinePath_pub2	navi_mdp/include/Dynamic_Manager.h	/^	ros::Publisher 	 SplinePath_pub2;$/;"	m	class:Dynamic_Manager
SplinePath_pub2	navi_mdp/include/MDPmanager.h	/^	ros::Publisher 	 SplinePath_pub2;$/;"	m	class:MDPManager
St_OBS_CELL	navi_mdp/include/Dynamic_Manager.h	40;"	d
St_OBS_CELL	navi_mdp/include/MDPmanager.h	36;"	d
Stamp	despot/src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlParsingData::Stamp(const char* now, TiXmlEncoding encoding) {$/;"	f	class:despot::util::tinyxml::TiXmlParsingData
Standalone	despot/include/despot/util/tinyxml/tinyxml.h	/^	const char *Standalone() const {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
Start_X	navi_mdp/include/Dynamic_Manager.h	44;"	d
Start_X	navi_mdp/include/MDPmanager.h	42;"	d
Start_Y	navi_mdp/include/Dynamic_Manager.h	45;"	d
Start_Y	navi_mdp/include/MDPmanager.h	43;"	d
State	despot/include/despot/core/pomdp.h	/^class State: public MemoryObject {$/;"	c	namespace:despot
State	despot/src/core/pomdp.cpp	/^State::State() :$/;"	f	class:despot::State
State	despot/src/core/pomdp.cpp	/^State::State(int _state_id, double _weight) :$/;"	f	class:despot::State
StateIndexToOppIndex	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	inline int StateIndexToOppIndex(int index) const {$/;"	f	class:despot::BaseTag
StateIndexToRobIndex	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	inline int StateIndexToRobIndex(int index) const {$/;"	f	class:despot::BaseTag
StateIndexer	despot/include/despot/core/pomdp.h	/^class StateIndexer {$/;"	c	namespace:despot
StatePolicy	despot/include/despot/core/pomdp.h	/^class StatePolicy {$/;"	c	namespace:despot
StatePosVel	human_filter/include/people_tracking_filter/state_pos_vel.h	/^  StatePosVel(const tf::Vector3& pos = tf::Vector3(0, 0, 0),$/;"	f	class:BFL::StatePosVel
StatePosVel	human_filter/include/people_tracking_filter/state_pos_vel.h	/^class StatePosVel$/;"	c	namespace:BFL
StateVar	despot/include/despot/pomdpx/parser/variable.h	/^class StateVar: public NamedVar {$/;"	c	namespace:despot
StateVar	despot/src/pomdpx/parser/variable.cpp	/^StateVar::StateVar() {$/;"	f	class:despot::StateVar
StateVec_Sub	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^    ros::Subscriber  StateVec_Sub;$/;"	m	class:despot::Navigation
StateVec_Sub	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^    ros::Subscriber  StateVec_Sub;$/;"	m	class:despot::Navigation
State_Distance	navi_mdp/include/MapParam.h	/^	std::vector<float>  State_Distance;$/;"	m	class:MapParam
State_Type	navi_mdp/include/MapParam.h	/^	std::vector<int>    State_Type;$/;"	m	class:MapParam
State_dim	navi_mdp/include/Dynamic_Manager.h	/^ 	int               State_dim;$/;"	m	class:Dynamic_Manager
State_dim	navi_mdp/include/MDPmanager.h	/^ 	int               State_dim;$/;"	m	class:MDPManager
Stateid_pub	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	ros::Publisher	 Stateid_pub; 	$/;"	m	class:despot::Navigation
Stateid_pub	despot/examples/cpp_models/navigation/src/navigation.h	/^	ros::Publisher	Stateid_pub; 	$/;"	m	class:despot::Navigation
Stateid_pub	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	ros::Publisher	 Stateid_pub; 	$/;"	m	class:despot::Navigation
States_Pub	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	ros::Publisher   States_Pub;$/;"	m	class:despot::Navigation
States_Pub	despot/examples/cpp_models/navigation/src/navigation.h	/^	ros::Publisher   States_Pub;$/;"	m	class:despot::Navigation
States_Pub	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	ros::Publisher   States_Pub;$/;"	m	class:despot::Navigation
States_sub	despot/include/despot/evaluator.h	/^	ros::Subscriber   States_sub;$/;"	m	class:despot::Evaluator
Stats	despot/include/despot/util/optionparser.h	/^	Stats() :$/;"	f	struct:despot::option::Stats
Stats	despot/include/despot/util/optionparser.h	/^	Stats(bool gnu, const Descriptor usage[], int argc, char** argv,$/;"	f	struct:despot::option::Stats
Stats	despot/include/despot/util/optionparser.h	/^	Stats(bool gnu, const Descriptor usage[], int argc, const char** argv,$/;"	f	struct:despot::option::Stats
Stats	despot/include/despot/util/optionparser.h	/^	Stats(const Descriptor usage[], int argc, char** argv, int min_abbr_len = 0, \/\/$/;"	f	struct:despot::option::Stats
Stats	despot/include/despot/util/optionparser.h	/^	Stats(const Descriptor usage[], int argc, const char** argv,$/;"	f	struct:despot::option::Stats
Stats	despot/include/despot/util/optionparser.h	/^struct Stats {$/;"	s	namespace:despot::option
StderrDiscountedRoundReward	despot/src/evaluator.cpp	/^double Evaluator::StderrDiscountedRoundReward() const {$/;"	f	class:despot::Evaluator
StderrUndiscountedRoundReward	despot/src/evaluator.cpp	/^double Evaluator::StderrUndiscountedRoundReward() const {$/;"	f	class:despot::Evaluator
Step	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^bool Adventurer::Step(State& s, double random_num, int action, double& reward,$/;"	f	class:despot::Adventurer
Step	despot/examples/cpp_models/bridge/src/bridge.cpp	/^bool Bridge::Step(State& s, double random_num, int action, double& reward,$/;"	f	class:despot::Bridge
Step	despot/examples/cpp_models/chain/src/chain.cpp	/^bool Chain::Step(State& s, double random_num, int action, double &reward,$/;"	f	class:despot::Chain
Step	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^bool Navigation::Step(State& s, double random_num, int action, double& reward,$/;"	f	class:despot::Navigation
Step	despot/examples/cpp_models/navigation/src/navigation.cpp	/^bool Navigation::Step(State& s, double random_num, int action, double& reward,$/;"	f	class:despot::Navigation
Step	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^bool Navigation::Step(State& s, double random_num, int action, double& reward,$/;"	f	class:despot::Navigation
Step	despot/examples/cpp_models/pocman/src/pocman.cpp	/^bool Pocman::Step(State& state, double rand_num, int action, double& reward,$/;"	f	class:despot::Pocman
Step	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^bool RegDemo::Step(State& s, double random_num, int action, double& reward,$/;"	f	class:despot::RegDemo
Step	despot/examples/cpp_models/rock_sample/src/fvrs/fvrs.cpp	/^bool FVRS::Step(State& state, double rand_num, int action, double& reward,$/;"	f	class:despot::FVRS
Step	despot/examples/cpp_models/rock_sample/src/rock_sample/rock_sample.cpp	/^bool RockSample::Step(State& state, double rand_num, int action, double& reward,$/;"	f	class:despot::RockSample
Step	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^bool SimpleNavi::Step(State& state, double rand_num, int action,$/;"	f	class:despot::SimpleNavi
Step	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^bool SimpleRockSample::Step(State& state, double rand_num, int action,$/;"	f	class:despot::SimpleRockSample
Step	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^bool BaseTag::Step(State& s, double random_num, int action,$/;"	f	class:despot::BaseTag
Step	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^bool LaserTag::Step(State& state, double random_num, int action, double& reward,$/;"	f	class:despot::LaserTag
Step	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^bool LaserTag::Step(State& state, double random_num, int action,$/;"	f	class:despot::LaserTag
Step	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^bool NoisyLaserTag::Step(State& state, double random_num, int action, double& reward,$/;"	f	class:despot::NoisyLaserTag
Step	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^bool NoisyLaserTag::Step(State& state, double random_num, int action,$/;"	f	class:despot::NoisyLaserTag
Step	despot/examples/cpp_models/tag/src/tag/tag.cpp	/^bool Tag::Step(State& state, double random_num, int action, double& reward,$/;"	f	class:despot::Tag
Step	despot/examples/cpp_models/tiger/src/tiger.cpp	/^bool Tiger::Step(State& s, double random_num, int action, double& reward,$/;"	f	class:despot::Tiger
Step	despot/src/core/pomdp.cpp	/^bool DSPOMDP::Step(State& state, double random_num, int action,$/;"	f	class:despot::DSPOMDP
Step	despot/src/core/pomdp.cpp	/^bool DSPOMDP::Step(State& state, int action, double& reward,$/;"	f	class:despot::DSPOMDP
Step	despot/src/pomdpx/parser/parser.cpp	/^bool Parser::Step(vector<int>& state, double random, int action, double& reward,$/;"	f	class:despot::Parser
Step	despot/src/pomdpx/pomdpx.cpp	/^bool POMDPX::Step(State& s, double random_num, int action, double& reward,$/;"	f	class:despot::POMDPX
StepReal	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^ bool Navigation::StepReal(State& state, double random_num, int action, double& reward, OBS_TYPE& obs)$/;"	f	class:despot::Navigation
StepReward	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^double Adventurer::StepReward(const Belief* belief, int action) const {$/;"	f	class:despot::Adventurer
StepReward	despot/examples/cpp_models/bridge/src/bridge.cpp	/^double Bridge::StepReward(const Belief* belief, int action) const {$/;"	f	class:despot::Bridge
StepReward	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^double BaseRockSample::StepReward(const Belief* belief, int action) const {$/;"	f	class:despot::BaseRockSample
StepReward	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^double BaseTag::StepReward(const Belief* belief, int action) const {$/;"	f	class:despot::BaseTag
StoreOptionAction	despot/include/despot/util/optionparser.h	/^	StoreOptionAction(Parser& parser_, Option options_[], Option buffer_[],$/;"	f	class:despot::option::Parser::StoreOptionAction
StoreOptionAction	despot/include/despot/util/optionparser.h	/^class Parser::StoreOptionAction: public Parser::Action {$/;"	c	class:despot::option::Parser
Str	despot/include/despot/util/tinyxml/tinyxml.h	/^	const std::string& Str() {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
StreamIn	despot/src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlComment::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:despot::util::tinyxml::TiXmlComment
StreamIn	despot/src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlDeclaration::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
StreamIn	despot/src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlDocument::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:despot::util::tinyxml::TiXmlDocument
StreamIn	despot/src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlElement::StreamIn (std::istream * in, TIXML_STRING * tag)$/;"	f	class:despot::util::tinyxml::TiXmlElement
StreamIn	despot/src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlText::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:despot::util::tinyxml::TiXmlText
StreamIn	despot/src/util/tinyxml/tinyxmlparser.cpp	/^void TiXmlUnknown::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
StreamTo	despot/src/util/tinyxml/tinyxmlparser.cpp	/^\/*static*\/bool TiXmlBase::StreamTo( std::istream * in, int character, TIXML_STRING * tag )$/;"	f	class:despot::util::tinyxml::TiXmlBase
StreamWhiteSpace	despot/src/util/tinyxml/tinyxmlparser.cpp	/^\/*static*\/bool TiXmlBase::StreamWhiteSpace( std::istream * in, TIXML_STRING * tag )$/;"	f	class:despot::util::tinyxml::TiXmlBase
StreamWriter	despot/include/despot/util/optionparser.h	/^		StreamWriter(Function* w, Stream* s) :$/;"	f	struct:despot::option::PrintUsageImplementation::StreamWriter
StreamWriter	despot/include/despot/util/optionparser.h	/^	struct StreamWriter: public IStringWriter {$/;"	s	struct:despot::option::PrintUsageImplementation
StringEqual	despot/src/util/tinyxml/tinyxmlparser.cpp	/^bool TiXmlBase::StringEqual(const char* p, const char* tag, bool ignoreCase,$/;"	f	class:despot::util::tinyxml::TiXmlBase
Suffix	despot/include/despot/core/history.h	/^	History Suffix(int s) const {$/;"	f	class:despot::History
SurfMeshParams	navi_mdp/src/srBSpline.cpp	/^void srBSpline::SurfMeshParams( OUT double* uk, double* vl, std::vector<std::vector<double>> Datapoints , int datasize_u, int datasize_v)$/;"	f	class:srBSpline
SurfaceDerivsA1g1	navi_mdp/src/srBSpline.cpp	/^void srBSpline::SurfaceDerivsA1g1( OUT double** SKL, double u,double v, int d )$/;"	f	class:srBSpline
SysModelPosVel	human_filter/include/people_tracking_filter/sysmodel_pos_vel.h	/^  SysModelPosVel(const StatePosVel& sigma)$/;"	f	class:BFL::SysModelPosVel
SysModelPosVel	human_filter/include/people_tracking_filter/sysmodel_pos_vel.h	/^class SysModelPosVel$/;"	c	namespace:BFL
SysModelVector	human_filter/include/people_tracking_filter/sysmodel_vector.h	/^  SysModelVector(const tf::Vector3& sigma)$/;"	f	class:BFL::SysModelVector
SysModelVector	human_filter/include/people_tracking_filter/sysmodel_vector.h	/^class SysModelVector$/;"	c	namespace:BFL
SysPdfPosVel	human_filter/include/people_tracking_filter/sysmodel_pos_vel.h	/^class SysPdfPosVel$/;"	c	namespace:BFL
SysPdfPosVel	human_filter/src/sysmodel_pos_vel.cpp	/^SysPdfPosVel::SysPdfPosVel(const StatePosVel& sigma)$/;"	f	class:SysPdfPosVel
SysPdfVector	human_filter/include/people_tracking_filter/sysmodel_vector.h	/^class SysPdfVector$/;"	c	namespace:BFL
SysPdfVector	human_filter/src/sysmodel_vector.cpp	/^SysPdfVector::SysPdfVector(const Vector3& sigma)$/;"	f	class:SysPdfVector
SyscallWriter	despot/include/despot/util/optionparser.h	/^		SyscallWriter(Syscall* w, int f) :$/;"	f	struct:despot::option::PrintUsageImplementation::SyscallWriter
SyscallWriter	despot/include/despot/util/optionparser.h	/^	struct SyscallWriter: public IStringWriter {$/;"	s	struct:despot::option::PrintUsageImplementation
TAG_BIN	despot/examples/cpp_models/tag/Makefile	/^TAG_BIN = tag $/;"	m
TAG_H	despot/examples/cpp_models/tag/src/tag/tag.h	2;"	d
TAG_REWARD	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^double BaseTag::TAG_REWARD = 10;$/;"	m	class:despot::BaseTag	file:
TAG_REWARD	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	static double TAG_REWARD;$/;"	m	class:despot::BaseTag
TAG_SOURCES	despot/examples/cpp_models/tag/Makefile	/^TAG_SOURCES = $(shell find -L $(SRCDIR)\/base $(SRCDIR)\/tag -name '*.cpp')$/;"	m
TEXT	despot/include/despot/util/tinyxml/tinyxml.h	/^		DOCUMENT, ELEMENT, COMMENT, UNKNOWN, TEXT, DECLARATION, TYPECOUNT$/;"	e	enum:despot::util::tinyxml::TiXmlNode::NodeType
TIGER_H	despot/examples/cpp_models/tiger/src/tiger.h	2;"	d
TIMER_H	despot/include/despot/util/timer.h	2;"	d
TINY	despot/src/core/globals.cpp	/^const double TINY = 1e-8;$/;"	m	namespace:despot::Globals	file:
TIXML_DEFAULT_ENCODING	despot/include/despot/util/tinyxml/tinyxml.h	/^const TiXmlEncoding TIXML_DEFAULT_ENCODING = TIXML_ENCODING_UNKNOWN;$/;"	m	namespace:despot::util::tinyxml
TIXML_ENCODING_LEGACY	despot/include/despot/util/tinyxml/tinyxml.h	/^	TIXML_ENCODING_UNKNOWN, TIXML_ENCODING_UTF8, TIXML_ENCODING_LEGACY$/;"	e	enum:despot::util::tinyxml::TiXmlEncoding
TIXML_ENCODING_UNKNOWN	despot/include/despot/util/tinyxml/tinyxml.h	/^	TIXML_ENCODING_UNKNOWN, TIXML_ENCODING_UTF8, TIXML_ENCODING_LEGACY$/;"	e	enum:despot::util::tinyxml::TiXmlEncoding
TIXML_ENCODING_UTF8	despot/include/despot/util/tinyxml/tinyxml.h	/^	TIXML_ENCODING_UNKNOWN, TIXML_ENCODING_UTF8, TIXML_ENCODING_LEGACY$/;"	e	enum:despot::util::tinyxml::TiXmlEncoding
TIXML_ERROR	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_ERROR_DOCUMENT_EMPTY	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_DOCUMENT_EMPTY,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_ERROR_DOCUMENT_TOP_ONLY	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_DOCUMENT_TOP_ONLY,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_ERROR_EMBEDDED_NULL	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_EMBEDDED_NULL,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_ERROR_OPENING_FILE	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_OPENING_FILE,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_ERROR_OUT_OF_MEMORY	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_OUT_OF_MEMORY,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_ERROR_PARSING_CDATA	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_CDATA,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_ERROR_PARSING_COMMENT	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_COMMENT,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_ERROR_PARSING_DECLARATION	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_DECLARATION,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_ERROR_PARSING_ELEMENT	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_ELEMENT,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_ERROR_PARSING_EMPTY	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_EMPTY,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_ERROR_PARSING_UNKNOWN	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_ERROR_READING_ATTRIBUTES	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_READING_ATTRIBUTES,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_ERROR_READING_ELEMENT_VALUE	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_READING_ELEMENT_VALUE,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_ERROR_READING_END_TAG	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_READING_END_TAG,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_ERROR_STRING_COUNT	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_ERROR_STRING_COUNT$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_EXPLICIT	despot/include/despot/util/tinyxml/tinystr.h	51;"	d
TIXML_EXPLICIT	despot/include/despot/util/tinyxml/tinystr.h	54;"	d
TIXML_EXPLICIT	despot/include/despot/util/tinyxml/tinystr.h	56;"	d
TIXML_LOG	despot/src/util/tinyxml/tinyxmlparser.cpp	34;"	d	file:
TIXML_LOG	despot/src/util/tinyxml/tinyxmlparser.cpp	36;"	d	file:
TIXML_MAJOR_VERSION	despot/include/despot/util/tinyxml/tinyxml.h	/^const int TIXML_MAJOR_VERSION = 2;$/;"	m	namespace:despot::util::tinyxml
TIXML_MINOR_VERSION	despot/include/despot/util/tinyxml/tinyxml.h	/^const int TIXML_MINOR_VERSION = 5;$/;"	m	namespace:despot::util::tinyxml
TIXML_NO_ATTRIBUTE	despot/include/despot/util/tinyxml/tinyxml.h	/^	TIXML_SUCCESS, TIXML_NO_ATTRIBUTE, TIXML_WRONG_TYPE$/;"	e	enum:despot::util::tinyxml::__anon2
TIXML_NO_ERROR	despot/include/despot/util/tinyxml/tinyxml.h	/^		TIXML_NO_ERROR = 0,$/;"	e	enum:despot::util::tinyxml::TiXmlBase::__anon3
TIXML_PATCH_VERSION	despot/include/despot/util/tinyxml/tinyxml.h	/^const int TIXML_PATCH_VERSION = 3;$/;"	m	namespace:despot::util::tinyxml
TIXML_SAFE	despot/include/despot/util/tinyxml/tinyxml.h	59;"	d
TIXML_SNPRINTF	despot/include/despot/util/tinyxml/tinyxml.h	64;"	d
TIXML_SNPRINTF	despot/include/despot/util/tinyxml/tinyxml.h	70;"	d
TIXML_SNPRINTF	despot/include/despot/util/tinyxml/tinyxml.h	76;"	d
TIXML_SNSCANF	despot/include/despot/util/tinyxml/tinyxml.h	65;"	d
TIXML_SNSCANF	despot/include/despot/util/tinyxml/tinyxml.h	71;"	d
TIXML_SNSCANF	despot/include/despot/util/tinyxml/tinyxml.h	77;"	d
TIXML_SSCANF	despot/include/despot/util/tinyxml/tinyxml.h	66;"	d
TIXML_SSCANF	despot/include/despot/util/tinyxml/tinyxml.h	72;"	d
TIXML_SSCANF	despot/include/despot/util/tinyxml/tinyxml.h	78;"	d
TIXML_SSCANF	despot/include/despot/util/tinyxml/tinyxml.h	80;"	d
TIXML_STRING	despot/include/despot/util/tinyxml/tinyxml.h	49;"	d
TIXML_STRING	despot/include/despot/util/tinyxml/tinyxml.h	52;"	d
TIXML_STRING_INCLUDED	despot/include/despot/util/tinyxml/tinystr.h	40;"	d
TIXML_SUCCESS	despot/include/despot/util/tinyxml/tinyxml.h	/^	TIXML_SUCCESS, TIXML_NO_ATTRIBUTE, TIXML_WRONG_TYPE$/;"	e	enum:despot::util::tinyxml::__anon2
TIXML_UTF_LEAD_0	despot/src/util/tinyxml/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	m	namespace:despot::util::tinyxml	file:
TIXML_UTF_LEAD_1	despot/src/util/tinyxml/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	m	namespace:despot::util::tinyxml	file:
TIXML_UTF_LEAD_2	despot/src/util/tinyxml/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	m	namespace:despot::util::tinyxml	file:
TIXML_WRONG_TYPE	despot/include/despot/util/tinyxml/tinyxml.h	/^	TIXML_SUCCESS, TIXML_NO_ATTRIBUTE, TIXML_WRONG_TYPE$/;"	e	enum:despot::util::tinyxml::__anon2
TUI	despot/examples/cpp_models/adventurer/src/main.cpp	/^	TUI() {$/;"	f	class:TUI
TUI	despot/examples/cpp_models/adventurer/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	despot/examples/cpp_models/bridge/src/main.cpp	/^	TUI() {$/;"	f	class:TUI
TUI	despot/examples/cpp_models/bridge/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	despot/examples/cpp_models/chain/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	despot/examples/cpp_models/chain/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	despot/examples/cpp_models/localnavigation/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	despot/examples/cpp_models/localnavigation/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	despot/examples/cpp_models/navigation/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	despot/examples/cpp_models/navigation/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	despot/examples/cpp_models/pathfollowing/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	despot/examples/cpp_models/pathfollowing/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	despot/examples/cpp_models/pocman/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	despot/examples/cpp_models/pocman/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	despot/examples/cpp_models/reg_demo/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	despot/examples/cpp_models/reg_demo/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	despot/examples/cpp_models/rock_sample/src/fvrs/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	despot/examples/cpp_models/rock_sample/src/fvrs/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	despot/examples/cpp_models/rock_sample/src/rock_sample/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	despot/examples/cpp_models/rock_sample/src/rock_sample/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	despot/examples/cpp_models/simpleNavi/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	despot/examples/cpp_models/simpleNavi/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	despot/examples/cpp_models/simple_rock_sample/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	despot/examples/cpp_models/simple_rock_sample/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	despot/examples/cpp_models/tag/src/laser_tag/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	despot/examples/cpp_models/tag/src/laser_tag/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	despot/examples/cpp_models/tag/src/noisy_laser_tag/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	despot/examples/cpp_models/tag/src/noisy_laser_tag/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	despot/examples/cpp_models/tag/src/tag/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	despot/examples/cpp_models/tag/src/tag/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	despot/examples/cpp_models/tiger/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	despot/examples/cpp_models/tiger/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TUI	despot/examples/pomdpx_models/src/main.cpp	/^  TUI() {$/;"	f	class:TUI
TUI	despot/examples/pomdpx_models/src/main.cpp	/^class TUI: public SimpleTUI {$/;"	c	file:
TYPECOUNT	despot/include/despot/util/tinyxml/tinyxml.h	/^		DOCUMENT, ELEMENT, COMMENT, UNKNOWN, TEXT, DECLARATION, TYPECOUNT$/;"	e	enum:despot::util::tinyxml::TiXmlNode::NodeType
TYPE_FS	edge_leg_detector/src/detector.cpp	41;"	d	file:
TYPE_FS	edge_leg_detector/src/edge_leg_detector/detector.cpp	40;"	d	file:
TYPE_LA	edge_leg_detector/src/detector.cpp	40;"	d	file:
TYPE_LA	edge_leg_detector/src/edge_leg_detector/detector.cpp	39;"	d	file:
TYPE_SL	edge_leg_detector/src/detector.cpp	42;"	d	file:
TYPE_SL	edge_leg_detector/src/edge_leg_detector/detector.cpp	41;"	d	file:
TabSize	despot/include/despot/util/tinyxml/tinyxml.h	/^	int TabSize() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
TabularCPT	despot/include/despot/pomdpx/parser/function.h	/^class TabularCPT: public CPT {$/;"	c	namespace:despot
TabularCPT	despot/src/pomdpx/parser/function.cpp	/^TabularCPT::TabularCPT(NamedVar* child, vector<NamedVar*> parents) {$/;"	f	class:despot::TabularCPT
Tag	despot/examples/cpp_models/tag/src/tag/tag.cpp	/^Tag::Tag() {$/;"	f	class:despot::Tag
Tag	despot/examples/cpp_models/tag/src/tag/tag.cpp	/^Tag::Tag(string params_file) :$/;"	f	class:despot::Tag
Tag	despot/examples/cpp_models/tag/src/tag/tag.h	/^class Tag: public BaseTag {$/;"	c	namespace:despot
TagAction	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	inline int TagAction() const {$/;"	f	class:despot::BaseTag
TagBelief	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^TagBelief::TagBelief(vector<State*> particles, const BaseTag* model,$/;"	f	class:despot::TagBelief
TagBelief	despot/examples/cpp_models/tag/src/base/base_tag.h	/^class TagBelief: public ParticleBelief {$/;"	c	namespace:despot
TagBlindBeliefPolicy	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	TagBlindBeliefPolicy(const BaseTag* model, Belief* belief = NULL) :$/;"	f	class:despot::TagBlindBeliefPolicy
TagBlindBeliefPolicy	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^class TagBlindBeliefPolicy: public BeliefLowerBound {$/;"	c	namespace:despot	file:
TagHistoryModePolicy	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	TagHistoryModePolicy(const DSPOMDP* model, ParticleLowerBound* bound) :$/;"	f	class:despot::TagHistoryModePolicy
TagHistoryModePolicy	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^class TagHistoryModePolicy: public Policy {$/;"	c	namespace:despot	file:
TagManhattanUpperBound	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	TagManhattanUpperBound(const BaseTag* model) :$/;"	f	class:despot::TagManhattanUpperBound
TagManhattanUpperBound	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^class TagManhattanUpperBound: public ParticleUpperBound, public BeliefUpperBound {$/;"	c	namespace:despot	file:
TagPOMCPPrior	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	TagPOMCPPrior(const DSPOMDP* model) :$/;"	f	class:despot::TagPOMCPPrior
TagPOMCPPrior	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^class TagPOMCPPrior: public POMCPPrior {$/;"	c	namespace:despot	file:
TagSHRPolicy	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	TagSHRPolicy(const DSPOMDP* model, ParticleLowerBound* bound) :$/;"	f	class:despot::TagSHRPolicy
TagSHRPolicy	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^class TagSHRPolicy: public Policy { \/\/ Smart History-based Rollout$/;"	c	namespace:despot	file:
TagSPParticleUpperBound	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	TagSPParticleUpperBound(const BaseTag* model) :$/;"	f	class:despot::TagSPParticleUpperBound
TagSPParticleUpperBound	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^class TagSPParticleUpperBound: public ParticleUpperBound { \/\/ Shortest path$/;"	c	namespace:despot	file:
TagState	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^TagState::TagState() {$/;"	f	class:despot::TagState
TagState	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^TagState::TagState(int _state_id) {$/;"	f	class:despot::TagState
TagState	despot/examples/cpp_models/tag/src/base/base_tag.h	/^class TagState: public State {$/;"	c	namespace:despot
Target_Dist_person	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	41;"	d
Target_Dist_person	human_filter/include/people_tracking_filter/followme_action.h	46;"	d
Target_Dist_person	human_filter/include/people_tracking_filter/service_test.h	42;"	d
Tau	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^Belief* Adventurer::Tau(const Belief* belief, int action, OBS_TYPE obs) const {$/;"	f	class:despot::Adventurer
Tau	despot/examples/cpp_models/bridge/src/bridge.cpp	/^Belief* Bridge::Tau(const Belief* belief, int action, OBS_TYPE obs) const {$/;"	f	class:despot::Bridge
Tau	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^Belief* BaseRockSample::Tau(const Belief* belief, int action,$/;"	f	class:despot::BaseRockSample
Tau	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^Belief* BaseTag::Tau(const Belief* belief, int action, OBS_TYPE obs) const {$/;"	f	class:despot::BaseTag
TemporaryWriter	despot/include/despot/util/optionparser.h	/^		TemporaryWriter(const Temporary& u) :$/;"	f	struct:despot::option::PrintUsageImplementation::TemporaryWriter
TemporaryWriter	despot/include/despot/util/optionparser.h	/^	struct TemporaryWriter: public IStringWriter {$/;"	s	struct:despot::option::PrintUsageImplementation
TerminalPattern	despot/include/despot/pomdpx/parser/parser.h	/^struct TerminalPattern {$/;"	s	namespace:despot
TestSortByKey	despot/src/test/util_test.cpp	/^void TestSortByKey() {$/;"	f	namespace:despot
TestSortByValue	despot/src/test/util_test.cpp	/^void TestSortByValue() {$/;"	f	namespace:despot
Text	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlText* Text() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
TiXmlAttribute	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
TiXmlAttribute	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute() :$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
TiXmlAttribute	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute(const char * _name, const char * _value) {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
TiXmlAttribute	despot/include/despot/util/tinyxml/tinyxml.h	/^class TiXmlAttribute: public TiXmlBase {$/;"	c	namespace:despot::util::tinyxml
TiXmlAttributeSet	despot/include/despot/util/tinyxml/tinyxml.h	/^class TiXmlAttributeSet {$/;"	c	namespace:despot::util::tinyxml
TiXmlAttributeSet	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlAttributeSet::TiXmlAttributeSet() {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
TiXmlBase	despot/include/despot/pomdpx/parser/parser.h	/^  typedef util::tinyxml::TiXmlBase TiXmlBase;$/;"	t	class:despot::Parser
TiXmlBase	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlBase() :$/;"	f	class:despot::util::tinyxml::TiXmlBase
TiXmlBase	despot/include/despot/util/tinyxml/tinyxml.h	/^class TiXmlBase {$/;"	c	namespace:despot::util::tinyxml
TiXmlComment	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlComment() :$/;"	f	class:despot::util::tinyxml::TiXmlComment
TiXmlComment	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlComment(const char* _value) :$/;"	f	class:despot::util::tinyxml::TiXmlComment
TiXmlComment	despot/include/despot/util/tinyxml/tinyxml.h	/^class TiXmlComment: public TiXmlNode {$/;"	c	namespace:despot::util::tinyxml
TiXmlComment	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlComment::TiXmlComment(const TiXmlComment& copy) :$/;"	f	class:despot::util::tinyxml::TiXmlComment
TiXmlCursor	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlCursor() {$/;"	f	struct:despot::util::tinyxml::TiXmlCursor
TiXmlCursor	despot/include/despot/util/tinyxml/tinyxml.h	/^struct TiXmlCursor {$/;"	s	namespace:despot::util::tinyxml
TiXmlDeclaration	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlDeclaration() :$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
TiXmlDeclaration	despot/include/despot/util/tinyxml/tinyxml.h	/^class TiXmlDeclaration: public TiXmlNode {$/;"	c	namespace:despot::util::tinyxml
TiXmlDeclaration	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const std::string& _version,$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
TiXmlDeclaration	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration(const TiXmlDeclaration& copy) :$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
TiXmlDeclaration	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration(const char * _version,$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
TiXmlDocument	despot/include/despot/util/tinyxml/tinyxml.h	/^class TiXmlDocument: public TiXmlNode {$/;"	c	namespace:despot::util::tinyxml
TiXmlDocument	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const std::string& documentName ) : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:despot::util::tinyxml::TiXmlDocument
TiXmlDocument	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument() :$/;"	f	class:despot::util::tinyxml::TiXmlDocument
TiXmlDocument	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument(const TiXmlDocument& copy) :$/;"	f	class:despot::util::tinyxml::TiXmlDocument
TiXmlDocument	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument(const char * documentName) :$/;"	f	class:despot::util::tinyxml::TiXmlDocument
TiXmlElement	despot/include/despot/pomdpx/parser/parser.h	/^  typedef util::tinyxml::TiXmlElement TiXmlElement;$/;"	t	class:despot::Parser
TiXmlElement	despot/include/despot/util/tinyxml/tinyxml.h	/^class TiXmlElement: public TiXmlNode {$/;"	c	namespace:despot::util::tinyxml
TiXmlElement	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlElement::TiXmlElement( const std::string& _value )$/;"	f	class:despot::util::tinyxml::TiXmlElement
TiXmlElement	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlElement::TiXmlElement(const TiXmlElement& copy) :$/;"	f	class:despot::util::tinyxml::TiXmlElement
TiXmlElement	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlElement::TiXmlElement(const char * _value) :$/;"	f	class:despot::util::tinyxml::TiXmlElement
TiXmlEncoding	despot/include/despot/util/tinyxml/tinyxml.h	/^enum TiXmlEncoding {$/;"	g	namespace:despot::util::tinyxml
TiXmlFOpen	despot/src/util/tinyxml/tinyxml.cpp	/^FILE* TiXmlFOpen(const char* filename, const char* mode) {$/;"	f	namespace:despot::util::tinyxml
TiXmlHandle	despot/include/despot/pomdpx/parser/parser.h	/^  typedef util::tinyxml::TiXmlHandle TiXmlHandle;$/;"	t	class:despot::Parser
TiXmlHandle	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlHandle(TiXmlNode* _node) {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
TiXmlHandle	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlHandle(const TiXmlHandle& ref) {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
TiXmlHandle	despot/include/despot/util/tinyxml/tinyxml.h	/^class TiXmlHandle {$/;"	c	namespace:despot::util::tinyxml
TiXmlNode	despot/include/despot/util/tinyxml/tinyxml.h	/^class TiXmlNode: public TiXmlBase {$/;"	c	namespace:despot::util::tinyxml
TiXmlNode	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlNode::TiXmlNode(NodeType _type) :$/;"	f	class:despot::util::tinyxml::TiXmlNode
TiXmlOutStream	despot/include/despot/util/tinyxml/tinystr.h	/^class TiXmlOutStream: public TiXmlString {$/;"	c	namespace:despot::util::tinyxml
TiXmlParsingData	despot/src/util/tinyxml/tinyxmlparser.cpp	/^	TiXmlParsingData(const char* start, int _tabsize, int row, int col) {$/;"	f	class:despot::util::tinyxml::TiXmlParsingData	file:
TiXmlParsingData	despot/src/util/tinyxml/tinyxmlparser.cpp	/^class TiXmlParsingData {$/;"	c	namespace:despot::util::tinyxml	file:
TiXmlPrinter	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlPrinter() :$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
TiXmlPrinter	despot/include/despot/util/tinyxml/tinyxml.h	/^class TiXmlPrinter: public TiXmlVisitor {$/;"	c	namespace:despot::util::tinyxml
TiXmlString	despot/include/despot/util/tinyxml/tinystr.h	/^	TIXML_EXPLICIT TiXmlString(const char * copy) :$/;"	f	class:despot::util::tinyxml::TiXmlString
TiXmlString	despot/include/despot/util/tinyxml/tinystr.h	/^	TIXML_EXPLICIT TiXmlString(const char * str, size_type len) :$/;"	f	class:despot::util::tinyxml::TiXmlString
TiXmlString	despot/include/despot/util/tinyxml/tinystr.h	/^	TiXmlString() :$/;"	f	class:despot::util::tinyxml::TiXmlString
TiXmlString	despot/include/despot/util/tinyxml/tinystr.h	/^	TiXmlString(const TiXmlString & copy) :$/;"	f	class:despot::util::tinyxml::TiXmlString
TiXmlString	despot/include/despot/util/tinyxml/tinystr.h	/^class TiXmlString {$/;"	c	namespace:despot::util::tinyxml
TiXmlText	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlText( const std::string& initValue ) : TiXmlNode (TiXmlNode::TEXT)$/;"	f	class:despot::util::tinyxml::TiXmlText
TiXmlText	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlText(const TiXmlText& copy) :$/;"	f	class:despot::util::tinyxml::TiXmlText
TiXmlText	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlText(const char * initValue) :$/;"	f	class:despot::util::tinyxml::TiXmlText
TiXmlText	despot/include/despot/util/tinyxml/tinyxml.h	/^class TiXmlText: public TiXmlNode {$/;"	c	namespace:despot::util::tinyxml
TiXmlUnknown	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlUnknown() :$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
TiXmlUnknown	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlUnknown(const TiXmlUnknown& copy) :$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
TiXmlUnknown	despot/include/despot/util/tinyxml/tinyxml.h	/^class TiXmlUnknown: public TiXmlNode {$/;"	c	namespace:despot::util::tinyxml
TiXmlVisitor	despot/include/despot/util/tinyxml/tinyxml.h	/^class TiXmlVisitor {$/;"	c	namespace:despot::util::tinyxml
Tiger	despot/examples/cpp_models/tiger/src/tiger.cpp	/^Tiger::Tiger() {$/;"	f	class:despot::Tiger
Tiger	despot/examples/cpp_models/tiger/src/tiger.h	/^class Tiger: public DSPOMDP {$/;"	c	namespace:despot
TigerState	despot/examples/cpp_models/tiger/src/tiger.cpp	/^TigerState::TigerState() :$/;"	f	class:despot::TigerState
TigerState	despot/examples/cpp_models/tiger/src/tiger.cpp	/^TigerState::TigerState(int position) :$/;"	f	class:despot::TigerState
TigerState	despot/examples/cpp_models/tiger/src/tiger.h	/^class TigerState: public State {$/;"	c	namespace:despot
Timer	despot/include/despot/util/timer.h	/^	Timer(int millis) {$/;"	f	class:despot::Timer
Timer	despot/include/despot/util/timer.h	/^class Timer {$/;"	c	namespace:despot
ToComment	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlComment* ToComment() {$/;"	f	class:despot::util::tinyxml::TiXmlComment
ToComment	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlComment* ToComment() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToComment	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlComment* ToComment() const {$/;"	f	class:despot::util::tinyxml::TiXmlComment
ToComment	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlComment* ToComment() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToDeclaration	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlDeclaration* ToDeclaration() {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
ToDeclaration	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlDeclaration* ToDeclaration() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToDeclaration	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
ToDeclaration	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToDocument	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlDocument* ToDocument() {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
ToDocument	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlDocument* ToDocument() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToDocument	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlDocument* ToDocument() const {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
ToDocument	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlDocument* ToDocument() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlElement* ToElement() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
ToElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlElement* ToElement() {$/;"	f	class:despot::util::tinyxml::TiXmlElement
ToElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlElement* ToElement() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlElement* ToElement() const {$/;"	f	class:despot::util::tinyxml::TiXmlElement
ToElement	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlElement* ToElement() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToLower	despot/include/despot/util/tinyxml/tinyxml.h	/^	inline static int ToLower(int v, TiXmlEncoding encoding) {$/;"	f	class:despot::util::tinyxml::TiXmlBase
ToNode	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* ToNode() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
ToText	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlText* ToText() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
ToText	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlText* ToText() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToText	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlText* ToText() {$/;"	f	class:despot::util::tinyxml::TiXmlText
ToText	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlText* ToText() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToText	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlText* ToText() const {$/;"	f	class:despot::util::tinyxml::TiXmlText
ToUnknown	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlUnknown* ToUnknown() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
ToUnknown	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlUnknown* ToUnknown() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToUnknown	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual TiXmlUnknown* ToUnknown() {$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
ToUnknown	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlUnknown* ToUnknown() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ToUnknown	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual const TiXmlUnknown* ToUnknown() const {$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
Tokenize	despot/src/util/util.cpp	/^vector<string> Tokenize(const string& str, const string& delimiters) {$/;"	f	namespace:despot
Tokenize	despot/src/util/util.cpp	/^vector<string> Tokenize(string line, char delim) {$/;"	f	namespace:despot
Track	despot/include/despot/core/globals.h	/^inline void Track(std::string addr, std::string loc) {$/;"	f	namespace:despot::Globals
Track	despot/src/util/exec_tracker.cpp	/^void ExecTracker::Track(string addr, string position) {$/;"	f	class:despot::ExecTracker
Track_human_target	villa_navi_service/include/navi_service_node.h	/^	std::vector<double> Track_human_target;				\/\/x,y,theta$/;"	m	class:villa_navi_srv
Tracker	human_filter/include/people_tracking_filter/tracker.h	/^  Tracker(const std::string& name): name_(name) {};$/;"	f	class:estimation::Tracker
Tracker	human_filter/include/people_tracking_filter/tracker.h	/^class Tracker$/;"	c	namespace:estimation
TrackerKalman	human_filter/include/people_tracking_filter/tracker_kalman.h	/^class TrackerKalman: public Tracker$/;"	c	namespace:estimation
TrackerKalman	human_filter/src/tracker_kalman.cpp	/^TrackerKalman::TrackerKalman(const string& name, const StatePosVel& sysnoise):$/;"	f	class:estimation::TrackerKalman
TrackerParticle	human_filter/include/people_tracking_filter/tracker_particle.h	/^class TrackerParticle: public Tracker$/;"	c	namespace:estimation
TrackerParticle	human_filter/src/tracker_particle.cpp	/^TrackerParticle::TrackerParticle(const string& name, unsigned int num_particles, const StatePosVel& sysnoise):$/;"	f	class:estimation::TrackerParticle
TransitionProbability	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^const vector<State>& Adventurer::TransitionProbability(int s, int a) const {$/;"	f	class:despot::Adventurer
TransitionProbability	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^const vector<State>& Navigation::TransitionProbability(int s, int a) const {$/;"	f	class:despot::Navigation
TransitionProbability	despot/examples/cpp_models/navigation/src/navigation.cpp	/^const vector<State>& Navigation::TransitionProbability(int s, int a) const {$/;"	f	class:despot::Navigation
TransitionProbability	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^const vector<State>& Navigation::TransitionProbability(int s, int a) const {$/;"	f	class:despot::Navigation
TransitionProbability	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^const vector<State>& RegDemo::TransitionProbability(int s, int a) const {$/;"	f	class:despot::RegDemo
TransitionProbability	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^const vector<State>& BaseRockSample::TransitionProbability(int s, int a) const {$/;"	f	class:despot::BaseRockSample
TransitionProbability	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^const vector<State>& BaseTag::TransitionProbability(int s, int a) const {$/;"	f	class:despot::BaseTag
TransitionProbability	despot/src/pomdpx/pomdpx.cpp	/^const vector<State>& POMDPX::TransitionProbability(int s, int a) const {$/;"	f	class:despot::POMDPX
Trial	despot/src/solver/despot.cpp	/^VNode* DESPOT::Trial(VNode* root, RandomStreams& streams,$/;"	f	class:despot::DESPOT
TrivialBeliefLowerBound	despot/include/despot/core/lower_bound.h	/^class TrivialBeliefLowerBound: public BeliefLowerBound {$/;"	c	namespace:despot
TrivialBeliefLowerBound	despot/src/core/lower_bound.cpp	/^TrivialBeliefLowerBound::TrivialBeliefLowerBound(const DSPOMDP* model,$/;"	f	class:despot::TrivialBeliefLowerBound
TrivialBeliefUpperBound	despot/include/despot/core/upper_bound.h	/^class TrivialBeliefUpperBound: public BeliefUpperBound {$/;"	c	namespace:despot
TrivialBeliefUpperBound	despot/src/core/upper_bound.cpp	/^TrivialBeliefUpperBound::TrivialBeliefUpperBound(const DSPOMDP* model) :$/;"	f	class:despot::TrivialBeliefUpperBound
TrivialParticleLowerBound	despot/include/despot/core/lower_bound.h	/^class TrivialParticleLowerBound: public ParticleLowerBound {$/;"	c	namespace:despot
TrivialParticleLowerBound	despot/src/core/lower_bound.cpp	/^TrivialParticleLowerBound::TrivialParticleLowerBound(const DSPOMDP* model) :$/;"	f	class:despot::TrivialParticleLowerBound
TrivialParticleUpperBound	despot/include/despot/core/upper_bound.h	/^class TrivialParticleUpperBound: public ParticleUpperBound {$/;"	c	namespace:despot
TrivialParticleUpperBound	despot/src/core/upper_bound.cpp	/^TrivialParticleUpperBound::TrivialParticleUpperBound(const DSPOMDP* model) :$/;"	f	class:despot::TrivialParticleUpperBound
Truncate	despot/include/despot/core/history.h	/^	void Truncate(int d) {$/;"	f	class:despot::History
Type	despot/include/despot/util/tinyxml/tinyxml.h	/^	int Type() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
U	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<double>	  U;			\/\/ Long term Utility$/;"	m	class:Dynamic_Manager
U	navi_mdp/include/MDPmanager.h	/^ 	vector<double>	  U;			\/\/ Long term Utility$/;"	m	class:MDPManager
U	navi_mdp/include/srBSpline.h	/^	inline double U( int IndexKnot ) { return GetKnot( IndexKnot ); }$/;"	f	class:srBSpline
UInt16	navi_mdp/include/types.h	/^typedef unsigned short int	UInt16;		\/\/< 2 bytes integer 0 ~ 65535$/;"	t
UInt32	navi_mdp/include/types.h	/^typedef unsigned int		UInt32;		\/\/< 4 bytes integer 0 ~ 4294967255$/;"	t
UNIFORM_VECTOR_H	human_filter/include/people_tracking_filter/uniform_vector.h	38;"	d
UNKNOWN	despot/include/despot/util/tinyxml/tinyxml.h	/^		DOCUMENT, ELEMENT, COMMENT, UNKNOWN, TEXT, DECLARATION, TYPECOUNT$/;"	e	enum:despot::util::tinyxml::TiXmlNode::NodeType
UPPER_BOUND_H	despot/include/despot/core/upper_bound.h	2;"	d
UTIL_H	despot/include/despot/util/util.h	2;"	d
UTIL_TEST_H	despot/include/despot/test/util_test.h	2;"	d
UniformPOMCPPrior	despot/include/despot/solver/pomcp.h	/^class UniformPOMCPPrior: public POMCPPrior {$/;"	c	namespace:despot
UniformPOMCPPrior	despot/src/solver/pomcp.cpp	/^UniformPOMCPPrior::UniformPOMCPPrior(const DSPOMDP* model) :$/;"	f	class:despot::UniformPOMCPPrior
UniformVector	human_filter/include/people_tracking_filter/uniform_vector.h	/^class UniformVector: public Pdf<tf::Vector3>$/;"	c	namespace:BFL
UniformVector	human_filter/src/uniform_vector.cpp	/^UniformVector::UniformVector(const Vector3& mu, const Vector3& size)$/;"	f	class:BFL::UniformVector
UnitGoalVec_pub	navi_mdp/include/MDPmanager.h	/^	ros::Publisher   UnitGoalVec_pub;$/;"	m	class:MDPManager
Unknown	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlUnknown* Unknown() const {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
UnsetFlag	despot/include/despot/util/util.h	/^inline void UnsetFlag(int& flags, int bit) {$/;"	f	namespace:despot
Untrack	despot/include/despot/core/globals.h	/^inline void Untrack(std::string addr) {$/;"	f	namespace:despot::Globals
Untrack	despot/src/util/exec_tracker.cpp	/^void ExecTracker::Untrack(string addr) {$/;"	f	class:despot::ExecTracker
Up	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<double>	  Up;			\/\/ Uprime, used in updates$/;"	m	class:Dynamic_Manager
Up	navi_mdp/include/MDPmanager.h	/^ 	vector<double>	  Up;			\/\/ Uprime, used in updates$/;"	m	class:MDPManager
Update	despot/examples/cpp_models/chain/src/chain.cpp	/^void FullChainBelief::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::FullChainBelief
Update	despot/examples/cpp_models/chain/src/chain.cpp	/^void SemiChainBelief::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::SemiChainBelief
Update	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^void NavigationBelief::Update(int action, OBS_TYPE obs){$/;"	f	class:despot::NavigationBelief
Update	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void NavigationBelief::Update(int action, OBS_TYPE obs){$/;"	f	class:despot::NavigationBelief
Update	despot/examples/cpp_models/pocman/src/pocman.cpp	/^void PocmanBelief::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::PocmanBelief
Update	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	void Update(int action, OBS_TYPE obs) { \/\/ TODO: Not complete yet$/;"	f	class:despot::RockSampleBelief
Update	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^void TagBelief::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::TagBelief
Update	despot/src/core/belief.cpp	/^void ParticleBelief::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::ParticleBelief
Update	despot/src/core/policy.cpp	/^void BlindPolicy::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::BlindPolicy
Update	despot/src/core/policy.cpp	/^void RandomPolicy::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::RandomPolicy
Update	despot/src/core/solver.cpp	/^void Solver::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::Solver
Update	despot/src/pomdpx/pomdpx.cpp	/^	void Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::POMDPXBelief
Update	despot/src/solver/aems.cpp	/^void AEMS::Update(QNode* qnode) {$/;"	f	class:despot::AEMS
Update	despot/src/solver/aems.cpp	/^void AEMS::Update(VNode* vnode) {$/;"	f	class:despot::AEMS
Update	despot/src/solver/aems.cpp	/^void AEMS::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::AEMS
Update	despot/src/solver/despot.cpp	/^void DESPOT::Update(QNode* qnode) {$/;"	f	class:despot::DESPOT
Update	despot/src/solver/despot.cpp	/^void DESPOT::Update(VNode* vnode) {$/;"	f	class:despot::DESPOT
Update	despot/src/solver/despot.cpp	/^void DESPOT::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::DESPOT
Update	despot/src/solver/pomcp.cpp	/^void DPOMCP::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::DPOMCP
Update	despot/src/solver/pomcp.cpp	/^void POMCP::Update(int action, OBS_TYPE obs) {$/;"	f	class:despot::POMCP
UpdateModelStates	despot/src/evaluator.cpp	/^void Evaluator::UpdateModelStates()$/;"	f	class:despot::Evaluator
UpdateModelStates	despot/src/evaluator.cpp	/^void POMDPEvaluator::UpdateModelStates(){$/;"	f	class:despot::POMDPEvaluator
UpdateTimeInfo	despot/src/evaluator.cpp	/^void IPPCEvaluator::UpdateTimeInfo(string instance) {$/;"	f	class:despot::IPPCEvaluator
UpdateTimePerMove	despot/src/evaluator.cpp	/^void IPPCEvaluator::UpdateTimePerMove(double step_time) {$/;"	f	class:despot::IPPCEvaluator
UpdateTimePerMove	despot/src/evaluator.cpp	/^void POMDPEvaluator::UpdateTimePerMove(double step_time) {$/;"	f	class:despot::POMDPEvaluator
UpperBoundAction	despot/src/solver/pomcp.cpp	/^int POMCP::UpperBoundAction(const VNode* vnode, double explore_constant) {$/;"	f	class:despot::POMCP
VARIABLE_H	despot/include/despot/pomdpx/parser/variable.h	2;"	d
VERBOSE	despot/include/despot/util/logging.h	/^	static const int NONE, ERROR, WARN, INFO, DEBUG, VERBOSE;$/;"	m	class:despot::logging
VERBOSE	despot/src/util/logging.cpp	/^const int logging::VERBOSE = 5;$/;"	m	class:despot::logging	file:
VNode	despot/include/despot/core/node.h	/^class VNode {$/;"	c	namespace:despot
VNode	despot/src/core/node.cpp	/^VNode::VNode(Belief* belief, int depth, QNode* parent, OBS_TYPE edge) :$/;"	f	class:despot::VNode
VNode	despot/src/core/node.cpp	/^VNode::VNode(int count, double value, int depth, QNode* parent, OBS_TYPE edge) :$/;"	f	class:despot::VNode
VNode	despot/src/core/node.cpp	/^VNode::VNode(vector<State*>& particles, int depth, QNode* parent,$/;"	f	class:despot::VNode
VPATH	despot/Makefile	/^VPATH = $(shell find -L $(INCDIR) $(SRCDIR) -type d \\( ! -name '.*' \\))$/;"	m
Validate	despot/examples/cpp_models/pocman/src/pocman.cpp	/^void Pocman::Validate(const State& state) const {$/;"	f	class:despot::Pocman
Validate	despot/src/pomdpx/parser/function.cpp	/^bool HierarchyCPT::Validate() const {$/;"	f	class:despot::HierarchyCPT
Validate	despot/src/pomdpx/parser/function.cpp	/^bool TabularCPT::Validate() const {$/;"	f	class:despot::TabularCPT
ValidateDistance	edge_leg_detector/src/detector.cpp	/^void ValidateDistance(){$/;"	f
ValidateDistance	edge_leg_detector/src/edge_leg_detector/detector.cpp	/^void ValidateDistance(){$/;"	f
ValidatePattern	edge_leg_detector/src/detector.cpp	/^void ValidatePattern( list <int> *Pattern_list, int TYPE,  vector <int> flank_id0,  vector <int> flank_id1, vector <double> laser_x, vector <double> laser_y){$/;"	f
ValidatePattern	edge_leg_detector/src/edge_leg_detector/detector.cpp	/^void ValidatePattern( list <int> *Pattern_list, int TYPE,  vector <int> flank_id0,  vector <int> flank_id1, vector <double> laser_x, vector <double> laser_y){$/;"	f
Value	despot/examples/cpp_models/chain/src/chain.cpp	/^	ValuedAction Value(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::MeanMDPScenarioLowerBound
Value	despot/examples/cpp_models/chain/src/chain.cpp	/^	double Value(const State& s) const {$/;"	f	class:despot::ApproxMDPChainParticleUpperBound
Value	despot/examples/cpp_models/chain/src/chain.cpp	/^	double Value(const State& s) const {$/;"	f	class:despot::OneStepLookaheadChainParticleUpperBound
Value	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	ValuedAction Value(const vector<State*>& particles) const {$/;"	f	class:despot::LocalLegalParticleLowerBound
Value	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	double Value(const State& state) const {$/;"	f	class:despot::LocalnavigationParticleUpperBound
Value	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	double Value(const vector<State*>& particles,$/;"	f	class:despot::LocalApproxScenarioUpperBound
Value	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	ValuedAction Value(const vector<State*>& particles) const {$/;"	f	class:despot::LocalLegalParticleLowerBound
Value	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	double Value(const State& state) const {$/;"	f	class:despot::LocalnavigationParticleUpperBound
Value	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	double Value(const vector<State*>& particles,$/;"	f	class:despot::LocalApproxScenarioUpperBound
Value	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	ValuedAction Value(const vector<State*>& particles) const {$/;"	f	class:despot::PocmanLegalParticleLowerBound
Value	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	double Value(const State& state) const {$/;"	f	class:despot::PocmanSmartParticleUpperBound
Value	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	double Value(const vector<State*>& particles,$/;"	f	class:despot::PocmanApproxScenarioUpperBound
Value	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	ValuedAction Value(const Belief* belief) const {$/;"	f	class:despot::RockSampleEastBeliefPolicy
Value	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	ValuedAction Value(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::RockSampleENTScenarioLowerBound
Value	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	ValuedAction Value(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::RockSampleEastScenarioLowerBound
Value	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	ValuedAction Value(const vector<State*>& particles, RandomStreams& streams,$/;"	f	class:despot::RockSampleMMAPStateScenarioLowerBound
Value	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	double Value(const Belief* belief) const {$/;"	f	class:despot::RockSampleMDPBeliefUpperBound
Value	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	double Value(const State& state) const {$/;"	f	class:despot::RockSampleApproxParticleUpperBound
Value	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	double Value(const State& state) const {$/;"	f	class:despot::RockSampleMDPParticleUpperBound
Value	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	double Value(const State& state) const {$/;"	f	class:despot::RockSampleParticleUpperBound1
Value	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	double Value(const State& state) const {$/;"	f	class:despot::RockSampleParticleUpperBound2
Value	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^	double Value(const State& s) const {$/;"	f	class:despot::SimpleNaviParticleUpperBound
Value	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^	double Value(const State& s) const {$/;"	f	class:despot::SimpleRockSampleParticleUpperBound
Value	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	ValuedAction Value(const Belief* belief) const {$/;"	f	class:despot::TagBlindBeliefPolicy
Value	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	double Value(const Belief* belief) const {$/;"	f	class:despot::TagManhattanUpperBound
Value	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	double Value(const State& s) const {$/;"	f	class:despot::TagManhattanUpperBound
Value	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	double Value(const State& s) const {$/;"	f	class:despot::TagSPParticleUpperBound
Value	despot/include/despot/util/tinyxml/tinyxml.h	/^	const char *Value() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
Value	despot/include/despot/util/tinyxml/tinyxml.h	/^	const char* Value() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
Value	despot/src/core/lower_bound.cpp	/^ValuedAction POMCPScenarioLowerBound::Value(const vector<State*>& particles,$/;"	f	class:despot::POMCPScenarioLowerBound
Value	despot/src/core/lower_bound.cpp	/^ValuedAction ParticleLowerBound::Value(const vector<State*>& particles,$/;"	f	class:despot::ParticleLowerBound
Value	despot/src/core/lower_bound.cpp	/^ValuedAction TrivialBeliefLowerBound::Value(const Belief* belief) const {$/;"	f	class:despot::TrivialBeliefLowerBound
Value	despot/src/core/lower_bound.cpp	/^ValuedAction TrivialParticleLowerBound::Value($/;"	f	class:despot::TrivialParticleLowerBound
Value	despot/src/core/policy.cpp	/^ValuedAction Policy::Value(const vector<State*>& particles,$/;"	f	class:despot::Policy
Value	despot/src/core/upper_bound.cpp	/^double LookaheadUpperBound::Value(const vector<State*>& particles,$/;"	f	class:despot::LookaheadUpperBound
Value	despot/src/core/upper_bound.cpp	/^double MDPUpperBound::Value(const Belief* belief) const {$/;"	f	class:despot::MDPUpperBound
Value	despot/src/core/upper_bound.cpp	/^double MDPUpperBound::Value(const State& state) const {$/;"	f	class:despot::MDPUpperBound
Value	despot/src/core/upper_bound.cpp	/^double ParticleUpperBound::Value(const vector<State*>& particles,$/;"	f	class:despot::ParticleUpperBound
Value	despot/src/core/upper_bound.cpp	/^double TrivialBeliefUpperBound::Value(const Belief* belief) const {$/;"	f	class:despot::TrivialBeliefUpperBound
Value	despot/src/core/upper_bound.cpp	/^double TrivialParticleUpperBound::Value(const State& state) const {$/;"	f	class:despot::TrivialParticleUpperBound
Value	despot/src/core/upper_bound.cpp	/^double TrivialParticleUpperBound::Value(const vector<State*>& particles,$/;"	f	class:despot::TrivialParticleUpperBound
ValueStr	despot/include/despot/util/tinyxml/tinyxml.h	/^	const std::string& ValueStr() const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
ValueStr	despot/include/despot/util/tinyxml/tinyxml.h	/^	const std::string& ValueStr() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ValueTStr	despot/include/despot/util/tinyxml/tinyxml.h	/^	const TIXML_STRING& ValueTStr() const {$/;"	f	class:despot::util::tinyxml::TiXmlNode
ValuedAction	despot/include/despot/core/policy.h	/^struct ValuedAction {$/;"	s	namespace:despot
ValuedAction	despot/src/core/lower_bound.cpp	/^ValuedAction::ValuedAction() :$/;"	f	class:despot::ValuedAction
ValuedAction	despot/src/core/lower_bound.cpp	/^ValuedAction::ValuedAction(int _action, double _value) :$/;"	f	class:despot::ValuedAction
Variable	despot/include/despot/pomdpx/parser/variable.h	/^class Variable {$/;"	c	namespace:despot
Variable	despot/src/pomdpx/parser/variable.cpp	/^Variable::Variable() {$/;"	f	class:despot::Variable
Version	despot/include/despot/util/tinyxml/tinyxml.h	/^	const char *Version() const {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
Visit	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual bool Visit(const TiXmlComment& \/*comment*\/) {$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
Visit	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual bool Visit(const TiXmlDeclaration& \/*declaration*\/) {$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
Visit	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual bool Visit(const TiXmlText& \/*text*\/) {$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
Visit	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual bool Visit(const TiXmlUnknown& \/*unknown*\/) {$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
Visit	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::Visit(const TiXmlComment& comment) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
Visit	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::Visit(const TiXmlDeclaration& declaration) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
Visit	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::Visit(const TiXmlText& text) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
Visit	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::Visit(const TiXmlUnknown& unknown) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
VisitEnter	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual bool VisitEnter(const TiXmlDocument& \/*doc*\/) {$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
VisitEnter	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual bool VisitEnter(const TiXmlElement& \/*element*\/,$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
VisitEnter	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter(const TiXmlDocument&) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
VisitEnter	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter(const TiXmlElement& element,$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
VisitExit	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual bool VisitExit(const TiXmlDocument& \/*doc*\/) {$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
VisitExit	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual bool VisitExit(const TiXmlElement& \/*element*\/) {$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
VisitExit	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::VisitExit(const TiXmlDocument&) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
VisitExit	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::VisitExit(const TiXmlElement& element) {$/;"	f	class:despot::util::tinyxml::TiXmlPrinter
WARN	despot/include/despot/util/logging.h	/^	static const int NONE, ERROR, WARN, INFO, DEBUG, VERBOSE;$/;"	m	class:despot::logging
WARN	despot/src/util/logging.cpp	/^const int logging::WARN = 2;$/;"	m	class:despot::logging	file:
WEST	despot/include/despot/util/coord.h	/^		SOUTH, EAST, NORTH, WEST, NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST$/;"	e	enum:despot::Compass::__anon1
WEU	despot/src/solver/despot.cpp	/^double DESPOT::WEU(VNode* vnode) {$/;"	f	class:despot::DESPOT
WEU	despot/src/solver/despot.cpp	/^double DESPOT::WEU(VNode* vnode, double xi) {$/;"	f	class:despot::DESPOT
Weight	despot/src/core/node.cpp	/^double QNode::Weight() const {$/;"	f	class:despot::QNode
Weight	despot/src/core/node.cpp	/^double VNode::Weight() const {$/;"	f	class:despot::VNode
Weight	despot/src/core/pomdp.cpp	/^double State::Weight(const vector<State*>& particles) {$/;"	f	class:despot::State
XML_INPUT_ERROR	despot/include/despot/pomdpx/parser/parser.h	22;"	d
X_mapSize	navi_mdp/include/Dynamic_Manager.h	/^ 	int               X_mapSize;$/;"	m	class:Dynamic_Manager
X_mapSize	navi_mdp/include/MDPmanager.h	/^ 	int               X_mapSize;$/;"	m	class:MDPManager
YOLO_range_person	navi_mdp/include/Dynamic_Manager.h	59;"	d
YOLO_range_person	navi_mdp/include/MDPmanager.h	56;"	d
Y_mapSize	navi_mdp/include/Dynamic_Manager.h	/^ 	int               Y_mapSize;$/;"	m	class:Dynamic_Manager
Y_mapSize	navi_mdp/include/MDPmanager.h	/^ 	int               Y_mapSize;$/;"	m	class:MDPManager
Yolo_iter	navi_mdp/include/Dynamic_Manager.h	/^ 	int Yolo_iter;$/;"	m	class:Dynamic_Manager
_AveragingAlg	navi_mdp/src/srBSpline.cpp	/^void srBSpline::_AveragingAlg( double* u, double* \/*_U*\/, int _p, int _m )$/;"	f	class:srBSpline
_CalcKnot	navi_mdp/src/srBSpline.cpp	/^inline void srBSpline::_CalcKnot( OUT double* Knot, int NumKnots, double Ti, double Tf, int NumRepeat1, int NumRepeat2 )$/;"	f	class:srBSpline
_CalcKnot2	navi_mdp/src/srBSpline.cpp	/^void srBSpline::_CalcKnot2( OUT double* Knot, int NumKnots, double* t, int NumRepeat1 \/*= 4*\/, int NumRepeat2 \/*= 4*\/ )$/;"	f	class:srBSpline
_CalcKnot2	navi_mdp/src/srBSpline.cpp	/^void srBSpline::_CalcKnot2( OUT double* Knot, int NumKnots, std::vector<double>& t, int NumRepeat1 \/*= 4*\/, int NumRepeat2 \/*= 4*\/ )$/;"	f	class:srBSpline
_CalcKnot3	navi_mdp/src/srBSpline.cpp	/^void srBSpline::_CalcKnot3( OUT double* Knot, int NumKnots, std::vector<double>& t, int NumRepeat1 \/*= 4*\/, int NumRepeat2 \/*= 4*\/ )$/;"	f	class:srBSpline
_CalcukChordlength	navi_mdp/src/srBSpline.cpp	/^void srBSpline::_CalcukChordlength(double* t, double* Q, double* U, int NumData )$/;"	f	class:srBSpline
_Clear	navi_mdp/src/srBSpline.cpp	/^void srBSpline::_Clear( void )$/;"	f	class:srBSpline
_Left	navi_mdp/src/srBSpline.cpp	/^inline double srBSpline::_Left( int i, int j, double u )$/;"	f	class:srBSpline
_Linspace	navi_mdp/src/srBSpline.cpp	/^inline void srBSpline::_Linspace( OUT double* Array, double Ti, double Tf, int NumData )$/;"	f	class:srBSpline
_Right	navi_mdp/src/srBSpline.cpp	/^inline double srBSpline::_Right( int i, int j, double u )$/;"	f	class:srBSpline
_UTILS_H_	navi_mdp/include/utils.h	2;"	d
__DETECTOR_PARTICLE__	human_filter/include/people_tracking_filter/detector_particle.h	38;"	d
__PEOPLE_TRACKING_NODE__	human_filter/include/people_tracking_filter/people_tracking_node.h	38;"	d
__RGB__	human_filter/include/people_tracking_filter/rgb.h	2;"	d
__ROS_KEYBOARD_H__	ros-keyboard/src/keyboard.h	2;"	d
__TRACKER_KALMAN__	human_filter/include/people_tracking_filter/tracker_kalman.h	38;"	d
__TRACKER_PARTICLE__	human_filter/include/people_tracking_filter/tracker_particle.h	38;"	d
__TRACKER__	human_filter/include/people_tracking_filter/tracker.h	38;"	d
___SRLIB_BSPLINE___	navi_mdp/include/srBSpline.h	5;"	d
__builtin_clz	despot/include/despot/util/optionparser.h	234;"	d
__init__	navi_mdp/scripts/base_move.py	/^    def __init__(self, wait=0.0):$/;"	m	class:BaseMoveCBA
__init__	navi_mdp/scripts/gui_move.py	/^  def __init__(self):$/;"	m	class:SpeechGui
action	despot/include/despot/core/policy.h	/^	int action;$/;"	m	struct:despot::ValuedAction
action_	despot/include/despot/core/policy.h	/^	int action_;$/;"	m	class:despot::BlindPolicy
action_cmd	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^    std_msgs::Int32  action_cmd;$/;"	m	class:despot::Navigation
action_cmd	despot/include/despot/evaluator.h	/^	std_msgs::Int32   action_cmd;$/;"	m	class:despot::Evaluator
action_name_	human_filter/include/people_tracking_filter/followme_action.h	/^  std::string action_name_;$/;"	m	class:Edgeleg_manager_action
action_probs_	despot/include/despot/core/policy.h	/^	std::vector<double> action_probs_;$/;"	m	class:despot::RandomPolicy
action_vars_	despot/include/despot/pomdpx/parser/parser.h	/^	mutable std::vector<ActionVar> action_vars_;$/;"	m	class:despot::Parser
actions_	despot/include/despot/core/history.h	/^  std::vector<int> actions_;$/;"	m	class:despot::History
add	despot/include/despot/util/optionparser.h	/^	void add(bool gnu, const Descriptor usage[], int argc, char** argv,$/;"	f	struct:despot::option::Stats
add	despot/include/despot/util/optionparser.h	/^	void add(const Descriptor usage[], int argc, char** argv, int min_abbr_len =$/;"	f	struct:despot::option::Stats
add	despot/include/despot/util/optionparser.h	/^	void add(const Descriptor usage[], int argc, const char** argv,$/;"	f	struct:despot::option::Stats
add	despot/include/despot/util/optionparser.h	/^inline void Stats::add(bool gnu, const Descriptor usage[], int argc,$/;"	f	class:despot::option::Stats
allocated_	despot/include/despot/util/memorypool.h	/^	bool allocated_;$/;"	m	class:despot::MemoryObject
allocated_time	despot/include/despot/evaluator.h	/^	static double allocated_time;$/;"	m	class:despot::EvalLog
allocated_time	despot/src/evaluator.cpp	/^double EvalLog::allocated_time = 1.0;$/;"	m	class:despot::EvalLog	file:
alpha	despot/src/util/dirichlet.cpp	/^vector<double> Dirichlet::alpha() {$/;"	f	class:despot::Dirichlet
alpha_	despot/examples/cpp_models/chain/src/chain.h	/^	double alpha_;$/;"	m	class:despot::Chain
alpha_	despot/examples/cpp_models/chain/src/chain.h	/^	std::vector<std::vector<double> > alpha_;$/;"	m	class:despot::SemiChainBelief
alpha_	despot/examples/cpp_models/chain/src/chain.h	/^	std::vector<std::vector<std::vector<double> > > alpha_;$/;"	m	class:despot::FullChainBelief
alpha_	despot/include/despot/util/dirichlet.h	/^  std::vector<double> alpha_;$/;"	m	class:despot::Dirichlet
alpha_vectors_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	std::vector<std::vector<double> > alpha_vectors_; \/\/ For blind policy$/;"	m	class:despot::BaseRockSample
alpha_vectors_	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	vector<vector<double> > alpha_vectors_;$/;"	m	class:despot::TagBlindBeliefPolicy	file:
angle_criticalvalue	villa_navi_service/include/navi_service_node.h	/^	std::vector<double> angle_criticalvalue;$/;"	m	class:villa_navi_srv
angle_people_set	villa_navi_service/include/navi_service_node.h	/^	std::vector<double> angle_people_set;$/;"	m	class:villa_navi_srv
append	despot/include/despot/util/optionparser.h	/^	void append(Option* new_last) {$/;"	f	class:despot::option::Option
append	despot/src/util/tinyxml/tinystr.cpp	/^TiXmlString& TiXmlString::append(const char* str, size_type len) {$/;"	f	class:despot::util::tinyxml::TiXmlString
arg	despot/include/despot/util/optionparser.h	/^	const char* arg;$/;"	m	class:despot::option::Option
array_publisher	navi_mdp/scripts/human_marker.py	/^array_publisher = rospy.Publisher(topic_array, MarkerArray,queue_size=10)$/;"	v
as_	human_filter/include/people_tracking_filter/followme_action.h	/^  actionlib::SimpleActionServer<human_filter::FollowMe> as_; \/\/ NodeHandle instance must be created before this line. Otherwise strange error occurs.$/;"	m	class:Edgeleg_manager_action
assign	despot/src/util/tinyxml/tinystr.cpp	/^TiXmlString& TiXmlString::assign(const char* str, size_type len) {$/;"	f	class:despot::util::tinyxml::TiXmlString
at	despot/include/despot/util/tinyxml/tinystr.h	/^	const char& at(size_type index) const {$/;"	f	class:despot::util::tinyxml::TiXmlString
attributeSet	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttributeSet attributeSet;$/;"	m	class:despot::util::tinyxml::TiXmlElement
base_pose_callback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::base_pose_callback(const nav_msgs::Odometry::ConstPtr& msg)$/;"	f	class:MDPManager
base_trajectory	navi_mdp/include/PathManager.h	/^ 	std::vector< std::vector<double> > base_trajectory;$/;"	m	class:PathManager
belief	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	void belief(Belief* belief) {$/;"	f	class:despot::TagHistoryModePolicy
belief	despot/src/core/node.cpp	/^Belief* VNode::belief() const {$/;"	f	class:despot::VNode
belief	despot/src/core/solver.cpp	/^Belief* Solver::belief() {$/;"	f	class:despot::Solver
belief	despot/src/core/solver.cpp	/^void Solver::belief(Belief* b) {$/;"	f	class:despot::Solver
belief	despot/src/solver/aems.cpp	/^void AEMS::belief(Belief* b) {$/;"	f	class:despot::AEMS
belief	despot/src/solver/despot.cpp	/^void DESPOT::belief(Belief* b) {$/;"	f	class:despot::DESPOT
belief	despot/src/solver/pomcp.cpp	/^void DPOMCP::belief(Belief* b) {$/;"	f	class:despot::DPOMCP
belief	despot/src/solver/pomcp.cpp	/^void POMCP::belief(Belief* b) {$/;"	f	class:despot::POMCP
belief_	despot/include/despot/core/node.h	/^	Belief* belief_; \/\/ Used in AEMS$/;"	m	class:despot::VNode
belief_	despot/include/despot/core/solver.h	/^	Belief* belief_;$/;"	m	class:despot::Solver
belief_pub	navi_mdp/include/Dynamic_Manager.h	/^	ros::Publisher   belief_pub;$/;"	m	class:Dynamic_Manager
belief_pub	villa_navi_service/include/navi_service_node.h	/^	ros::Publisher belief_pub;$/;"	m	class:villa_navi_srv
belief_size	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  int belief_size;$/;"	m	class:Edgeleg_manager
belief_size	human_filter/include/people_tracking_filter/followme_action.h	/^  int belief_size;$/;"	m	class:Edgeleg_manager_action
belief_size	human_filter/include/people_tracking_filter/service_test.h	/^  int belief_size;$/;"	m	class:Edgeleg_manager_srv
belief_size	villa_navi_service/include/navi_service_node.h	/^	int belief_size;$/;"	m	class:villa_navi_srv
belief_type_	despot/include/despot/evaluator.h	/^	std::string belief_type_;$/;"	m	class:despot::Evaluator
blind_alpha_	despot/include/despot/core/mdp.h	/^	std::vector<std::vector<double> > blind_alpha_; \/\/ For blind policy$/;"	m	class:despot::MDP
boolDynamic	navi_mdp/include/MapParam.h	/^	bool                boolDynamic;$/;"	m	class:MapParam
boolSolve	navi_mdp/src/global_planner.cpp	/^bool boolSolve=false;$/;"	v
boolreceive	navi_mdp/include/PathManager.h	/^	bool boolreceive;$/;"	m	class:PathManager
booltrackHuman	navi_mdp/include/Dynamic_Manager.h	/^	bool       booltrackHuman;$/;"	m	class:Dynamic_Manager
booltrackHuman	navi_mdp/include/MDPmanager.h	/^	bool       			booltrackHuman;$/;"	m	class:MDPManager
bounds_	despot/include/despot/core/upper_bound.h	/^	std::vector<std::vector<std::vector<double> > > bounds_;$/;"	m	class:despot::LookaheadUpperBound
buf_empty	despot/include/despot/util/optionparser.h	/^		bool buf_empty() {$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
buf_full	despot/include/despot/util/optionparser.h	/^		bool buf_full() {$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
buf_next	despot/include/despot/util/optionparser.h	/^		void buf_next() {$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
buf_store	despot/include/despot/util/optionparser.h	/^		void buf_store(const char* data, int len) {$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
buffer	despot/include/despot/util/optionparser.h	/^	Option* buffer;$/;"	m	class:despot::option::Parser::StoreOptionAction
buffer	despot/include/despot/util/tinyxml/tinyxml.h	/^	bool simpleTextPrint;TIXML_STRING buffer;TIXML_STRING indent;TIXML_STRING lineBreak;$/;"	m	class:despot::util::tinyxml::TiXmlPrinter
buffer_	despot/include/despot/util/logging.h	/^	log_buf buffer_;$/;"	m	class:despot::log_ostream
buffer_max	despot/include/despot/util/optionparser.h	/^	unsigned buffer_max;$/;"	m	struct:despot::option::Stats
buffer_max	despot/include/despot/util/optionparser.h	/^	unsigned* buffer_max;$/;"	m	class:despot::option::Stats::CountOptionsAction
bufmask	despot/include/despot/util/optionparser.h	/^		static const int bufmask = 15; \/\/!< Must be a power of 2 minus 1.$/;"	m	class:despot::option::PrintUsageImplementation::LineWrapper
bufmax	despot/include/despot/util/optionparser.h	/^	int bufmax; \/\/! Number of slots in @c buffer. @c -1 means "large enou.h>.$/;"	m	class:despot::option::Parser::StoreOptionAction
builtin_clz	despot/include/despot/util/optionparser.h	/^	static int builtin_clz(unsigned x)$/;"	f	struct:despot::option::MSC_Builtin_CLZ
c_str	despot/include/despot/util/tinyxml/tinystr.h	/^	const char * c_str() const {$/;"	f	class:despot::util::tinyxml::TiXmlString
calculateQuality	human_filter/src/tracker_kalman.cpp	/^double TrackerKalman::calculateQuality()$/;"	f	class:estimation::TrackerKalman
callbackDrop	human_filter/src/people_tracking_node.cpp	/^void PeopleTrackingNode::callbackDrop(const people_msgs::PositionMeasurement::ConstPtr& message)$/;"	f	class:estimation::PeopleTrackingNode
callbackRcv	human_filter/src/edge_leg_filter_node.cpp	/^void Edgeleg_manager::callbackRcv(const people_msgs::PositionMeasurement::ConstPtr& msg)$/;"	f	class:Edgeleg_manager
callbackRcv	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::callbackRcv(const people_msgs::PositionMeasurement::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_action
callbackRcv	human_filter/src/people_tracking_node.cpp	/^void PeopleTrackingNode::callbackRcv(const people_msgs::PositionMeasurement::ConstPtr& message)$/;"	f	class:estimation::PeopleTrackingNode
callbackRcv	human_filter/src/service_test.cpp	/^void Edgeleg_manager_srv::callbackRcv(const people_msgs::PositionMeasurement::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_srv
camera_map	navi_mdp/include/Dynamic_Manager.h	/^	nav_msgs::OccupancyGrid camera_map;$/;"	m	class:Dynamic_Manager
camera_map_pub	navi_mdp/include/Dynamic_Manager.h	/^	ros::Publisher   camera_map_pub;$/;"	m	class:Dynamic_Manager
capacity	despot/include/despot/util/tinyxml/tinystr.h	/^		size_type size, capacity;$/;"	m	struct:despot::util::tinyxml::TiXmlString::Rep
capacity	despot/include/despot/util/tinyxml/tinystr.h	/^	size_type capacity() const {$/;"	f	class:despot::util::tinyxml::TiXmlString
cdata	despot/include/despot/util/tinyxml/tinyxml.h	/^	bool cdata; \/\/ true if this should be input and output as a CDATA style text element$/;"	m	class:despot::util::tinyxml::TiXmlText
cell_xy	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<int>		  cell_xy;$/;"	m	class:Dynamic_Manager
cell_xy	navi_mdp/include/MDPmanager.h	/^ 	vector<int>		  cell_xy;$/;"	m	class:MDPManager
cells_	despot/include/despot/util/floor.h	/^  std::vector<Coord> cells_;$/;"	m	class:despot::Floor
center_offset	navi_mdp/src/global_planner.cpp	/^double center_offset=0.3;$/;"	v
chain_model_	despot/examples/cpp_models/chain/src/chain.cpp	/^	const Chain* chain_model_;$/;"	m	class:despot::MeanMDPPolicy	file:
chain_model_	despot/examples/cpp_models/chain/src/chain.cpp	/^	const Chain* chain_model_;$/;"	m	class:despot::MeanMDPScenarioLowerBound	file:
chase_prob_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	double chase_prob_, defensive_slip_;$/;"	m	class:despot::Navigation
chase_prob_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double chase_prob_, defensive_slip_;$/;"	m	class:despot::Navigation
chase_prob_	despot/examples/cpp_models/pocman/src/pocman.h	/^	double food_prob_, chase_prob_, defensive_slip_;$/;"	m	class:despot::Pocman
checkNoBoundary	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::checkNoBoundary(vector<int> cur_pos)$/;"	f	class:Dynamic_Manager
checkNoBoundary	navi_mdp/src/MDPmanager.cpp	/^bool MDPManager::checkNoBoundary(vector<int> cur_pos)$/;"	f	class:MDPManager
checkObs	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::checkObs(int cur_stid,int actionNum)$/;"	f	class:Dynamic_Manager
checkObs	navi_mdp/src/MDPmanager.cpp	/^bool MDPManager::checkObs(int cur_stid,int actionNum)$/;"	f	class:MDPManager
checkStaticObs	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::checkStaticObs(vector<int> cur_pos)$/;"	f	class:Dynamic_Manager
checkStaticObs	navi_mdp/src/MDPmanager.cpp	/^bool MDPManager::checkStaticObs(vector<int> cur_pos)$/;"	f	class:MDPManager
check_arg	despot/include/despot/util/optionparser.h	/^	const CheckArg check_arg;$/;"	m	struct:despot::option::Descriptor
check_cameraregion	human_filter/src/edge_leg_filter_node.cpp	/^bool Edgeleg_manager::check_cameraregion(float x_pos,float y_pos)$/;"	f	class:Edgeleg_manager
check_cameraregion	human_filter/src/followme_action.cpp	/^bool Edgeleg_manager_action::check_cameraregion(float x_pos,float y_pos)$/;"	f	class:Edgeleg_manager_action
check_cameraregion	human_filter/src/service_test.cpp	/^bool Edgeleg_manager_srv::check_cameraregion(float x_pos,float y_pos)$/;"	f	class:Edgeleg_manager_srv
check_cameraregion	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::check_cameraregion(float x_pos,float y_pos)$/;"	f	class:Dynamic_Manager
check_staticObs	human_filter/src/edge_leg_filter_node.cpp	/^bool Edgeleg_manager::check_staticObs(float x_pos,float y_pos)$/;"	f	class:Edgeleg_manager
check_staticObs	human_filter/src/followme_action.cpp	/^bool Edgeleg_manager_action::check_staticObs(float x_pos,float y_pos)$/;"	f	class:Edgeleg_manager_action
check_staticObs	human_filter/src/service_test.cpp	/^bool Edgeleg_manager_srv::check_staticObs(float x_pos,float y_pos)$/;"	f	class:Edgeleg_manager_srv
child	despot/src/pomdpx/parser/function.cpp	/^const NamedVar* Function::child() const {$/;"	f	class:despot::Function
child_	despot/include/despot/pomdpx/parser/function.h	/^	NamedVar* child_;$/;"	m	class:despot::Function
children	despot/src/core/node.cpp	/^const vector<QNode*>& VNode::children() const {$/;"	f	class:despot::VNode
children	despot/src/core/node.cpp	/^map<OBS_TYPE, VNode*>& QNode::children() {$/;"	f	class:despot::QNode
children	despot/src/core/node.cpp	/^vector<QNode*>& VNode::children() {$/;"	f	class:despot::VNode
children_	despot/include/despot/core/node.h	/^	std::map<OBS_TYPE, VNode*> children_;$/;"	m	class:despot::QNode
children_	despot/include/despot/core/node.h	/^	std::vector<QNode*> children_;$/;"	m	class:despot::VNode
chr	despot/include/despot/util/tinyxml/tinyxml.h	/^		char chr;$/;"	m	struct:despot::util::tinyxml::TiXmlBase::Entity
chunk_iterator_	despot/include/despot/util/memorypool.h	/^	typedef typename std::vector<Chunk*>::iterator chunk_iterator_;$/;"	t	class:despot::MemoryPool
chunks_	despot/include/despot/util/memorypool.h	/^	std::vector<Chunk*> chunks_;$/;"	m	class:despot::MemoryPool
clear	despot/include/despot/util/tinyxml/tinystr.h	/^	void clear() {$/;"	f	class:despot::util::tinyxml::TiXmlString
client_	despot/include/despot/evaluator.h	/^	Client* client_;$/;"	m	class:despot::IPPCEvaluator
closeConnection	despot/src/ippc/client.cpp	/^void Client::closeConnection() {$/;"	f	class:despot::Client
cloud	villa_navi_service/include/navi_service_node.h	/^	pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud;$/;"	m	class:villa_navi_srv
col	despot/include/despot/util/optionparser.h	/^		int col; \/\/!< Index of current column.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
col	despot/include/despot/util/tinyxml/tinyxml.h	/^	int col; \/\/ 0 based.$/;"	m	struct:despot::util::tinyxml::TiXmlCursor
column	despot/include/despot/util/optionparser.h	/^		int column() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
condenseWhiteSpace	despot/include/despot/util/tinyxml/tinyxml.h	/^	static bool condenseWhiteSpace;$/;"	m	class:despot::util::tinyxml::TiXmlBase
condenseWhiteSpace	despot/src/util/tinyxml/tinyxml.cpp	/^bool TiXmlBase::condenseWhiteSpace = true;$/;"	m	class:despot::util::tinyxml::TiXmlBase	file:
config	despot/src/core/globals.cpp	/^Config config;$/;"	m	namespace:despot::Globals	file:
connectCubicSpline	navi_mdp/src/srBSpline.cpp	/^void srBSpline::connectCubicSpline( srBSpline* prev_spline,srBSpline* post_spline )$/;"	f	class:srBSpline
connectToServer	despot/src/ippc/client.cpp	/^void Client::connectToServer() {$/;"	f	class:despot::Client
costmapvec	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<float> costmapvec;$/;"	m	class:despot::Navigation
costmapvec	despot/examples/cpp_models/navigation/src/navigation.h	/^	std::vector<float> costmapvec;$/;"	m	class:despot::Navigation
costmapvec	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<float> costmapvec;$/;"	m	class:despot::Navigation
count	despot/include/despot/util/optionparser.h	/^	int count() {$/;"	f	class:despot::option::Option
count	despot/src/core/node.cpp	/^int QNode::count() const {$/;"	f	class:despot::QNode
count	despot/src/core/node.cpp	/^int VNode::count() const {$/;"	f	class:despot::VNode
count	despot/src/core/node.cpp	/^void QNode::count(int c) {$/;"	f	class:despot::QNode
count	despot/src/core/node.cpp	/^void VNode::count(int c) {$/;"	f	class:despot::VNode
count	navi_mdp/scripts/human_marker.py	/^count = 0$/;"	v
count_	despot/include/despot/core/node.h	/^	int count_; \/\/ Number of visits on the node$/;"	m	class:despot::QNode
count_	despot/include/despot/core/node.h	/^	int count_; \/\/ Number of visits on the node$/;"	m	class:despot::VNode
cpts_	despot/include/despot/pomdpx/parser/function.h	/^  std::vector<TabularCPT*> cpts_;$/;"	m	class:despot::HierarchyCPT
createActionMes	despot/src/ippc/client.cpp	/^string Client::createActionMes(const string actionName,$/;"	f	class:despot::Client
createRoundRequestMes	despot/src/ippc/client.cpp	/^string Client::createRoundRequestMes() {$/;"	f	class:despot::Client
createSessionRequestMes	despot/src/ippc/client.cpp	/^string Client::createSessionRequestMes(string problemName) {$/;"	f	class:despot::Client
creation_loc_	despot/include/despot/util/exec_tracker.h	/^  std::map<std::string, std::string> creation_loc_;$/;"	m	class:despot::ExecTracker
cur_coord	navi_mdp/include/Dynamic_Manager.h	/^	std::vector<int> cur_coord;$/;"	m	class:Dynamic_Manager
cur_coord	navi_mdp/include/MDPmanager.h	/^	std::vector<int> cur_coord;$/;"	m	class:MDPManager
cur_idx	navi_mdp/include/PathManager.h	/^	int cur_idx;$/;"	m	class:PathManager
cur_people	navi_mdp/include/Dynamic_Manager.h	/^    std::vector< std::vector< double > > cur_people;$/;"	m	class:Dynamic_Manager
cur_state_	despot/examples/cpp_models/chain/src/chain.h	/^	int cur_state_;$/;"	m	class:despot::FullChainBelief
cur_state_	despot/examples/cpp_models/chain/src/chain.h	/^	int cur_state_;$/;"	m	class:despot::SemiChainBelief
cur_yolo_people	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  std::vector< std::vector< double > > cur_yolo_people;$/;"	m	class:Edgeleg_manager
cur_yolo_people	human_filter/include/people_tracking_filter/followme_action.h	/^  std::vector< std::vector< double > > cur_yolo_people;$/;"	m	class:Edgeleg_manager_action
cur_yolo_people	human_filter/include/people_tracking_filter/service_test.h	/^  std::vector< std::vector< double > > cur_yolo_people;$/;"	m	class:Edgeleg_manager_srv
cur_yolo_people	navi_mdp/include/Dynamic_Manager.h	/^    std::vector< std::vector< double > > cur_yolo_people;$/;"	m	class:Dynamic_Manager
cur_yolo_people	navi_mdp/include/MDPmanager.h	/^    std::vector< std::vector< double > > cur_yolo_people;$/;"	m	class:MDPManager
curr_inst_budget	despot/include/despot/evaluator.h	/^	static double curr_inst_budget; \/\/ Total time in seconds given for current instance$/;"	m	class:despot::EvalLog
curr_inst_budget	despot/src/evaluator.cpp	/^double EvalLog::curr_inst_budget = 0;$/;"	m	class:despot::EvalLog	file:
curr_inst_remaining_budget	despot/include/despot/evaluator.h	/^	static double curr_inst_remaining_budget; \/\/ Remaining time in seconds for current instance$/;"	m	class:despot::EvalLog
curr_inst_remaining_budget	despot/src/evaluator.cpp	/^double EvalLog::curr_inst_remaining_budget = 0;$/;"	m	class:despot::EvalLog	file:
curr_inst_remaining_steps	despot/include/despot/evaluator.h	/^	static int curr_inst_remaining_steps;$/;"	m	class:despot::EvalLog
curr_inst_remaining_steps	despot/src/evaluator.cpp	/^int EvalLog::curr_inst_remaining_steps = 0;$/;"	m	class:despot::EvalLog	file:
curr_inst_start_time	despot/include/despot/evaluator.h	/^	static double curr_inst_start_time;$/;"	m	class:despot::EvalLog
curr_inst_start_time	despot/src/evaluator.cpp	/^double EvalLog::curr_inst_start_time = 0;$/;"	m	class:despot::EvalLog	file:
curr_inst_steps	despot/include/despot/evaluator.h	/^	static int curr_inst_steps;$/;"	m	class:despot::EvalLog
curr_inst_steps	despot/src/evaluator.cpp	/^int EvalLog::curr_inst_steps = 0;$/;"	m	class:despot::EvalLog	file:
curr_inst_target_time	despot/include/despot/evaluator.h	/^	static double curr_inst_target_time; \/\/ Targetted amount of time used for each step$/;"	m	class:despot::EvalLog
curr_inst_target_time	despot/src/evaluator.cpp	/^double EvalLog::curr_inst_target_time = 0;$/;"	m	class:despot::EvalLog	file:
curr_name	despot/include/despot/pomdpx/parser/variable.h	/^	inline const std::string& curr_name() const {$/;"	f	class:despot::StateVar
curr_name	despot/include/despot/pomdpx/parser/variable.h	/^	inline void curr_name(std::string str) {$/;"	f	class:despot::StateVar
curr_name_	despot/include/despot/pomdpx/parser/variable.h	/^	std::string curr_name_;$/;"	m	class:despot::StateVar
curr_state_vars_	despot/include/despot/pomdpx/parser/parser.h	/^	mutable std::vector<StateVar> curr_state_vars_;$/;"	m	class:despot::Parser
curr_value	despot/include/despot/pomdpx/parser/variable.h	/^	int curr_value;$/;"	m	class:despot::Variable
current_	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^Adventurer* Adventurer::current_ = NULL;$/;"	m	class:despot::Adventurer	file:
current_	despot/examples/cpp_models/adventurer/src/adventurer.h	/^	static Adventurer* current_;$/;"	m	class:despot::Adventurer
current_	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^BaseTag* BaseTag::current_ = NULL;$/;"	m	class:despot::BaseTag	file:
current_	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	static BaseTag* current_;$/;"	m	class:despot::BaseTag
current_	despot/include/despot/pomdpx/pomdpx.h	/^	static POMDPX* current_;$/;"	m	class:despot::POMDPX
current_	despot/src/pomdpx/pomdpx.cpp	/^POMDPX* POMDPX::current_ = NULL;$/;"	m	class:despot::POMDPX	file:
cursor	despot/src/util/tinyxml/tinyxmlparser.cpp	/^	TiXmlCursor cursor;$/;"	m	class:despot::util::tinyxml::TiXmlParsingData	file:
dN	navi_mdp/include/srBSpline.h	/^	inline double dN( int IndexCP, double u ) { return OneBasisFunDers( IndexCP, u, 1 ); }$/;"	f	class:srBSpline
damping_velocity	human_filter/src/tracker_kalman.cpp	/^const static double damping_velocity = 0.9;$/;"	v	file:
data	despot/include/despot/util/optionparser.h	/^		const char* data() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
data	despot/include/despot/util/tinyxml/tinystr.h	/^	const char * data() const {$/;"	f	class:despot::util::tinyxml::TiXmlString
datbuf	despot/include/despot/util/optionparser.h	/^		const char* datbuf[bufmask + 1];$/;"	m	class:despot::option::PrintUsageImplementation::LineWrapper
ddN	navi_mdp/include/srBSpline.h	/^	inline double ddN( int IndexCP, double u ) { return OneBasisFunDers( IndexCP, u, 2 ); }$/;"	f	class:srBSpline
default_action	despot/include/despot/config.h	/^  std::string default_action;$/;"	m	struct:despot::Config
default_action_	despot/examples/cpp_models/adventurer/src/adventurer.h	/^	std::vector<int> default_action_;$/;"	m	class:despot::Adventurer
default_action_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<int> default_action_;$/;"	m	class:despot::Navigation
default_action_	despot/examples/cpp_models/navigation/src/navigation.h	/^	std::vector<int> default_action_;$/;"	m	class:despot::Navigation
default_action_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<int> default_action_;$/;"	m	class:despot::Navigation
default_action_	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^	mutable std::vector<int> default_action_;$/;"	m	class:despot::RegDemo
default_action_	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	mutable std::vector<int> default_action_;$/;"	m	class:despot::BaseTag
default_action_	despot/include/despot/pomdpx/pomdpx.h	/^	mutable std::vector<int> default_action_;$/;"	m	class:despot::POMDPX
default_move	despot/src/core/node.cpp	/^ValuedAction VNode::default_move() const {$/;"	f	class:despot::VNode
default_move	despot/src/core/node.cpp	/^void VNode::default_move(ValuedAction move) {$/;"	f	class:despot::VNode
default_move_	despot/include/despot/core/node.h	/^	ValuedAction default_move_; \/\/ Value and action given by default policy$/;"	m	class:despot::VNode
default_out	despot/include/despot/util/logging.h	63;"	d
default_value	despot/include/despot/core/node.h	/^	double default_value;$/;"	m	class:despot::QNode
defensive_slip_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	double chase_prob_, defensive_slip_;$/;"	m	class:despot::Navigation
defensive_slip_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double chase_prob_, defensive_slip_;$/;"	m	class:despot::Navigation
defensive_slip_	despot/examples/cpp_models/pocman/src/pocman.h	/^	double food_prob_, chase_prob_, defensive_slip_;$/;"	m	class:despot::Pocman
deltaMin	navi_mdp/include/Dynamic_Manager.h	54;"	d
deltaMin	navi_mdp/include/MDPmanager.h	53;"	d
depth	despot/include/despot/util/tinyxml/tinyxml.h	/^	int depth;$/;"	m	class:despot::util::tinyxml::TiXmlPrinter
depth	despot/src/core/node.cpp	/^int VNode::depth() const {$/;"	f	class:despot::VNode
depth	despot/src/core/node.cpp	/^void VNode::depth(int d) {$/;"	f	class:despot::VNode
depth_	despot/include/despot/core/node.h	/^	int depth_;$/;"	m	class:despot::VNode
desc	despot/include/despot/util/optionparser.h	/^	const Descriptor* desc;$/;"	m	class:despot::option::Option
desired_heading	navi_mdp/src/base_conti_actionlib.cpp	/^double desired_heading=0.0;$/;"	v
despot	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/adventurer/src/adventurer.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/bridge/src/bridge.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/bridge/src/bridge.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/chain/src/chain.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/chain/src/chain.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/navigation/src/navigation.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/navigation/src/navigation.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/pocman/src/pocman.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/pocman/src/pocman.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/rock_sample/src/fvrs/fvrs.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/rock_sample/src/fvrs/fvrs.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/rock_sample/src/rock_sample/rock_sample.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/rock_sample/src/rock_sample/rock_sample.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/simpleNavi/src/simpleNavi.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/tag/src/base/base_tag.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/tag/src/tag/tag.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/tag/src/tag/tag.h	/^namespace despot {$/;"	n
despot	despot/examples/cpp_models/tiger/src/tiger.cpp	/^namespace despot {$/;"	n	file:
despot	despot/examples/cpp_models/tiger/src/tiger.h	/^namespace despot {$/;"	n
despot	despot/include/despot/config.h	/^namespace despot {$/;"	n
despot	despot/include/despot/core/belief.h	/^namespace despot {$/;"	n
despot	despot/include/despot/core/globals.h	/^namespace despot {$/;"	n
despot	despot/include/despot/core/history.h	/^namespace despot {$/;"	n
despot	despot/include/despot/core/lower_bound.h	/^namespace despot {$/;"	n
despot	despot/include/despot/core/mdp.h	/^namespace despot {$/;"	n
despot	despot/include/despot/core/node.h	/^namespace despot {$/;"	n
despot	despot/include/despot/core/policy.h	/^namespace despot {$/;"	n
despot	despot/include/despot/core/pomdp.h	/^namespace despot {$/;"	n
despot	despot/include/despot/core/solver.h	/^namespace despot {$/;"	n
despot	despot/include/despot/core/upper_bound.h	/^namespace despot {$/;"	n
despot	despot/include/despot/evaluator.h	/^namespace despot {$/;"	n
despot	despot/include/despot/ippc/client.h	/^namespace despot {$/;"	n
despot	despot/include/despot/pomdpx/parser/function.h	/^namespace despot {$/;"	n
despot	despot/include/despot/pomdpx/parser/parser.h	/^namespace despot {$/;"	n
despot	despot/include/despot/pomdpx/parser/variable.h	/^namespace despot {$/;"	n
despot	despot/include/despot/pomdpx/pomdpx.h	/^namespace despot {$/;"	n
despot	despot/include/despot/random_streams.h	/^namespace despot {$/;"	n
despot	despot/include/despot/simple_tui.h	/^namespace despot {$/;"	n
despot	despot/include/despot/solver/aems.h	/^namespace despot {$/;"	n
despot	despot/include/despot/solver/despot.h	/^namespace despot {$/;"	n
despot	despot/include/despot/solver/pomcp.h	/^namespace despot {$/;"	n
despot	despot/include/despot/test/util_test.h	/^namespace despot {$/;"	n
despot	despot/include/despot/util/coord.h	/^namespace despot {$/;"	n
despot	despot/include/despot/util/dirichlet.h	/^namespace despot {$/;"	n
despot	despot/include/despot/util/exec_tracker.h	/^namespace despot {$/;"	n
despot	despot/include/despot/util/floor.h	/^namespace despot {$/;"	n
despot	despot/include/despot/util/gamma.h	/^namespace despot {$/;"	n
despot	despot/include/despot/util/grid.h	/^namespace despot {$/;"	n
despot	despot/include/despot/util/logging.h	/^namespace despot {$/;"	n
despot	despot/include/despot/util/memorypool.h	/^namespace despot {$/;"	n
despot	despot/include/despot/util/optionparser.h	/^namespace despot {$/;"	n
despot	despot/include/despot/util/random.h	/^namespace despot {$/;"	n
despot	despot/include/despot/util/seeds.h	/^namespace despot {$/;"	n
despot	despot/include/despot/util/timer.h	/^namespace despot {$/;"	n
despot	despot/include/despot/util/tinyxml/tinystr.h	/^namespace despot {$/;"	n
despot	despot/include/despot/util/tinyxml/tinyxml.h	/^namespace despot {$/;"	n
despot	despot/include/despot/util/util.h	/^namespace despot {$/;"	n
despot	despot/src/core/belief.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/core/globals.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/core/lower_bound.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/core/mdp.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/core/node.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/core/policy.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/core/pomdp.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/core/solver.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/core/upper_bound.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/evaluator.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/ippc/client.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/pomdpx/parser/function.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/pomdpx/parser/parser.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/pomdpx/parser/variable.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/pomdpx/pomdpx.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/random_streams.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/simple_tui.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/solver/aems.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/solver/despot.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/solver/pomcp.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/test/util_test.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/util/coord.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/util/dirichlet.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/util/exec_tracker.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/util/floor.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/util/gamma.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/util/logging.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/util/random.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/util/seeds.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/util/tinyxml/tinystr.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/util/tinyxml/tinyxml.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/util/tinyxml/tinyxmlerror.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/util/tinyxml/tinyxmlparser.cpp	/^namespace despot {$/;"	n	file:
despot	despot/src/util/util.cpp	/^namespace despot {$/;"	n	file:
detect_iters	villa_navi_service/include/navi_service_node.h	/^	int detect_iters;$/;"	m	class:villa_navi_srv
detector_initialized_	human_filter/include/people_tracking_filter/detector_particle.h	/^  bool detector_initialized_;$/;"	m	class:estimation::DetectorParticle
disableBufferedIO	despot/src/simple_tui.cpp	/^void disableBufferedIO(void) {$/;"	f	namespace:despot
discount	despot/include/despot/config.h	/^	double discount;$/;"	m	struct:despot::Config
discounted_round_rewards_	despot/include/despot/evaluator.h	/^	std::vector<double> discounted_round_rewards_;$/;"	m	class:despot::Evaluator
discreteCtrltoPos	navi_mdp/src/PathManager.cpp	/^void PathManager::discreteCtrltoPos(std::vector<double> pos)$/;"	f	class:PathManager
discrete_mode	navi_mdp/include/PathManager.h	/^	bool discrete_mode;$/;"	m	class:PathManager
dist_	despot/include/despot/util/floor.h	/^	std::vector<std::vector<double> > dist_;$/;"	m	class:despot::Floor
document	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlDocument* document; \/\/ A pointer back to a document, for error reporting.$/;"	m	class:despot::util::tinyxml::TiXmlAttribute
done	despot/include/despot/util/timer.h	/^	bool done;$/;"	m	class:despot::Timer
dt_	human_filter/include/people_tracking_filter/gaussian_pos_vel.h	/^  mutable double dt_;$/;"	m	class:BFL::GaussianPosVel
dt_	human_filter/include/people_tracking_filter/sysmodel_pos_vel.h	/^  double dt_;$/;"	m	class:BFL::SysPdfPosVel
dt_	human_filter/include/people_tracking_filter/sysmodel_vector.h	/^  double dt_;$/;"	m	class:BFL::SysPdfVector
dyn_Recived_path	navi_mdp/include/PathManager.h	/^	std::vector< std::vector<double> > dyn_Recived_path;$/;"	m	class:PathManager
dyn_cur_idx	navi_mdp/include/PathManager.h	/^	int dyn_cur_idx;$/;"	m	class:PathManager
dyn_finalTarget	navi_mdp/include/PathManager.h	/^	std::vector<double> dyn_finalTarget;$/;"	m	class:PathManager
dyn_lastSubTarget	navi_mdp/include/PathManager.h	/^	std::vector<double> dyn_lastSubTarget;$/;"	m	class:PathManager
dyn_path_callback	navi_mdp/src/PathManager.cpp	/^void PathManager::dyn_path_callback(const nav_msgs::Path::ConstPtr& msg)$/;"	f	class:PathManager
dyn_path_num	navi_mdp/include/Dynamic_Manager.h	/^ 	int     dyn_path_num;$/;"	m	class:Dynamic_Manager
dyn_path_num	navi_mdp/include/MDPmanager.h	/^ 	int     dyn_path_num;$/;"	m	class:MDPManager
dyn_pre_idx	navi_mdp/include/PathManager.h	/^	int dyn_pre_idx;$/;"	m	class:PathManager
dyn_x_	navi_mdp/include/PathManager.h	/^	std::vector<double> dyn_x_;$/;"	m	class:PathManager
dyn_y_	navi_mdp/include/PathManager.h	/^	std::vector<double> dyn_y_;$/;"	m	class:PathManager
dynamic_belief_map	villa_navi_service/include/navi_service_node.h	/^	nav_msgs::OccupancyGrid dynamic_belief_map;$/;"	m	class:villa_navi_srv
dynamic_mapCallback	despot/src/evaluator.cpp	/^void Evaluator::dynamic_mapCallback(const nav_msgs::OccupancyGrid::ConstPtr& msg)$/;"	f	class:despot::Evaluator
dynamic_mapCallback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::dynamic_mapCallback(const nav_msgs::OccupancyGrid::ConstPtr& msg)$/;"	f	class:Dynamic_Manager
dynamic_mapCallback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::dynamic_mapCallback(const nav_msgs::OccupancyGrid::ConstPtr& msg)$/;"	f	class:MDPManager
edge	despot/src/core/node.cpp	/^OBS_TYPE VNode::edge() {$/;"	f	class:despot::VNode
edge	despot/src/core/node.cpp	/^int QNode::edge() {$/;"	f	class:despot::QNode
edge_	despot/include/despot/core/node.h	/^	OBS_TYPE edge_;$/;"	m	class:despot::VNode
edge_	despot/include/despot/core/node.h	/^	int edge_;$/;"	m	class:despot::QNode
edge_leg_callback	human_filter/src/edge_leg_filter_node.cpp	/^void Edgeleg_manager::edge_leg_callback(const geometry_msgs::PoseArray::ConstPtr& msg)$/;"	f	class:Edgeleg_manager
edge_leg_callback	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::edge_leg_callback(const geometry_msgs::PoseArray::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_action
edge_leg_callback	human_filter/src/service_test.cpp	/^void Edgeleg_manager_srv::edge_leg_callback(const geometry_msgs::PoseArray::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_srv
edge_leg_iter	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  int edge_leg_iter;$/;"	m	class:Edgeleg_manager
edge_leg_iter	human_filter/include/people_tracking_filter/followme_action.h	/^  int edge_leg_iter;$/;"	m	class:Edgeleg_manager_action
edge_leg_iter	human_filter/include/people_tracking_filter/service_test.h	/^  int edge_leg_iter;$/;"	m	class:Edgeleg_manager_srv
edge_leg_sub	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::Subscriber edge_leg_sub;$/;"	m	class:Edgeleg_manager
edge_leg_sub	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::Subscriber edge_leg_sub;$/;"	m	class:Edgeleg_manager_action
edge_leg_sub	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  ros::Subscriber edge_leg_sub;$/;"	m	class:estimation::PeopleTrackingNode
edge_leg_sub	human_filter/include/people_tracking_filter/service_test.h	/^  ros::Subscriber edge_leg_sub;$/;"	m	class:Edgeleg_manager_srv
empty	despot/include/despot/util/tinyxml/tinystr.h	/^	bool empty() const {$/;"	f	class:despot::util::tinyxml::TiXmlString
enable_selfloop_cache_	despot/include/despot/pomdpx/parser/parser.h	/^	bool enable_selfloop_cache_;$/;"	m	class:despot::Parser
encoding	despot/include/despot/util/tinyxml/tinyxml.h	/^	TIXML_STRING version;TIXML_STRING encoding;TIXML_STRING standalone;$/;"	m	class:despot::util::tinyxml::TiXmlDeclaration
entity	despot/include/despot/util/tinyxml/tinyxml.h	/^	static Entity entity[NUM_ENTITY];$/;"	m	class:despot::util::tinyxml::TiXmlBase
entity	despot/src/util/tinyxml/tinyxmlparser.cpp	/^TiXmlBase::Entity TiXmlBase::entity[NUM_ENTITY] = { { "&amp;", 5, '&' }, {$/;"	m	class:despot::util::tinyxml::TiXmlBase	file:
erf	despot/src/util/util.cpp	/^double erf(double x) {$/;"	f	namespace:despot
err	despot/include/despot/util/optionparser.h	/^	bool err; \/\/!< @internal @brief see error()$/;"	m	class:despot::option::Parser
error	despot/include/despot/util/optionparser.h	/^	bool error() {$/;"	f	class:despot::option::Parser
error	despot/include/despot/util/tinyxml/tinyxml.h	/^	bool error;$/;"	m	class:despot::util::tinyxml::TiXmlDocument
errorDesc	despot/include/despot/util/tinyxml/tinyxml.h	/^	int errorId;TIXML_STRING errorDesc;$/;"	m	class:despot::util::tinyxml::TiXmlDocument
errorId	despot/include/despot/util/tinyxml/tinyxml.h	/^	int errorId;TIXML_STRING errorDesc;$/;"	m	class:despot::util::tinyxml::TiXmlDocument
errorLocation	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlCursor errorLocation;$/;"	m	class:despot::util::tinyxml::TiXmlDocument
errorString	despot/include/despot/util/tinyxml/tinyxml.h	/^	static const char* errorString[TIXML_ERROR_STRING_COUNT];$/;"	m	class:despot::util::tinyxml::TiXmlBase
errorString	despot/src/util/tinyxml/tinyxmlerror.cpp	/^const char * TiXmlBase::errorString[TIXML_ERROR_STRING_COUNT] =$/;"	m	class:despot::util::tinyxml::TiXmlBase	file:
estimation	human_filter/include/people_tracking_filter/detector_particle.h	/^namespace estimation$/;"	n
estimation	human_filter/include/people_tracking_filter/people_tracking_node.h	/^namespace estimation$/;"	n
estimation	human_filter/include/people_tracking_filter/tracker.h	/^namespace estimation$/;"	n
estimation	human_filter/include/people_tracking_filter/tracker_kalman.h	/^namespace estimation$/;"	n
estimation	human_filter/include/people_tracking_filter/tracker_particle.h	/^namespace estimation$/;"	n
estimation	human_filter/src/detector_particle.cpp	/^namespace estimation$/;"	n	file:
estimation	human_filter/src/people_tracking_node.cpp	/^namespace estimation$/;"	n	file:
estimation	human_filter/src/tracker_kalman.cpp	/^namespace estimation$/;"	n	file:
estimation	human_filter/src/tracker_particle.cpp	/^namespace estimation$/;"	n	file:
execute_follow_action	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::execute_follow_action(const human_filter::FollowMeGoalConstPtr &goal)$/;"	f	class:Edgeleg_manager_action
exploration_constant	despot/include/despot/solver/pomcp.h	/^	inline double exploration_constant() const {$/;"	f	class:despot::POMCPPrior
exploration_constant	despot/include/despot/solver/pomcp.h	/^	inline void exploration_constant(double constant) {$/;"	f	class:despot::POMCPPrior
exploration_constant_	despot/include/despot/solver/pomcp.h	/^	double exploration_constant_;$/;"	m	class:despot::POMCPPrior
explore_constant_	despot/include/despot/core/lower_bound.h	/^	double explore_constant_;$/;"	m	class:despot::POMCPScenarioLowerBound
eyecontact	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	int eyecontact;$/;"	m	class:despot::NavigationState
eyecontact	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<int> eyecontact;$/;"	m	class:despot::NavigationState
fd	despot/include/despot/util/optionparser.h	/^		int fd;$/;"	m	struct:despot::option::PrintUsageImplementation::SyscallWriter
featureVector	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^    std_msgs::Float32MultiArray featureVector;$/;"	m	class:despot::Navigation
feedback_	human_filter/include/people_tracking_filter/followme_action.h	/^  human_filter::FollowMe feedback_;$/;"	m	class:Edgeleg_manager_action
file_name_	despot/include/despot/pomdpx/parser/parser.h	/^  std::string file_name_;$/;"	m	class:despot::Parser
filter_	human_filter/include/people_tracking_filter/detector_particle.h	/^  BFL::BootstrapFilter<tf::Vector3, tf::Vector3>* filter_;$/;"	m	class:estimation::DetectorParticle
filter_	human_filter/include/people_tracking_filter/tracker_kalman.h	/^  BFL::ExtendedKalmanFilter*                              filter_;$/;"	m	class:estimation::TrackerKalman
filter_	human_filter/include/people_tracking_filter/tracker_particle.h	/^  BFL::BootstrapFilter<BFL::StatePosVel, tf::Vector3>*      filter_;$/;"	m	class:estimation::TrackerParticle
filter_act_callback	human_filter/src/edge_leg_filter_node.cpp	/^void Edgeleg_manager::filter_act_callback(const std_msgs::Int8::ConstPtr& msg)$/;"	f	class:Edgeleg_manager
filter_act_callback	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::filter_act_callback(const std_msgs::Int8::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_action
filter_act_callback	human_filter/src/service_test.cpp	/^void Edgeleg_manager_srv::filter_act_callback(const std_msgs::Int8::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_srv
filter_act_sub	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::Subscriber filter_act_sub;$/;"	m	class:Edgeleg_manager
filter_act_sub	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::Subscriber filter_act_sub;$/;"	m	class:Edgeleg_manager_action
filter_act_sub	human_filter/include/people_tracking_filter/service_test.h	/^  ros::Subscriber filter_act_sub;$/;"	m	class:Edgeleg_manager_srv
filter_counter_	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  unsigned int filter_counter_;$/;"	m	class:Edgeleg_manager
filter_counter_	human_filter/include/people_tracking_filter/followme_action.h	/^  unsigned int filter_counter_;$/;"	m	class:Edgeleg_manager_action
filter_counter_	human_filter/include/people_tracking_filter/service_test.h	/^  unsigned int filter_counter_;$/;"	m	class:Edgeleg_manager_srv
filter_mutex_	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  boost::mutex filter_mutex_;$/;"	m	class:Edgeleg_manager
filter_mutex_	human_filter/include/people_tracking_filter/followme_action.h	/^  boost::mutex filter_mutex_;$/;"	m	class:Edgeleg_manager_action
filter_mutex_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  boost::mutex filter_mutex_;$/;"	m	class:estimation::PeopleTrackingNode
filter_mutex_	human_filter/include/people_tracking_filter/service_test.h	/^  boost::mutex filter_mutex_;$/;"	m	class:Edgeleg_manager_srv
filter_result_callback	human_filter/src/edge_leg_filter_node.cpp	/^void Edgeleg_manager::filter_result_callback(const people_msgs::PositionMeasurement::ConstPtr& msg)$/;"	f	class:Edgeleg_manager
filter_result_callback	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::filter_result_callback(const people_msgs::PositionMeasurement::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_action
filter_result_callback	human_filter/src/service_test.cpp	/^void Edgeleg_manager_srv::filter_result_callback(const people_msgs::PositionMeasurement::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_srv
filter_result_callback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::filter_result_callback(const people_msgs::PositionMeasurement::ConstPtr& msg)$/;"	f	class:Dynamic_Manager
filter_result_sub	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::Subscriber filter_result_sub;$/;"	m	class:Edgeleg_manager
filter_result_sub	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::Subscriber filter_result_sub;$/;"	m	class:Edgeleg_manager_action
filter_result_sub	human_filter/include/people_tracking_filter/service_test.h	/^  ros::Subscriber filter_result_sub;$/;"	m	class:Edgeleg_manager_srv
filter_time_	human_filter/include/people_tracking_filter/detector_particle.h	/^  double filter_time_, quality_;$/;"	m	class:estimation::DetectorParticle
filter_time_	human_filter/include/people_tracking_filter/tracker_kalman.h	/^  double init_time_, filter_time_, quality_;$/;"	m	class:estimation::TrackerKalman
filter_time_	human_filter/include/people_tracking_filter/tracker_particle.h	/^  double init_time_, filter_time_, quality_;$/;"	m	class:estimation::TrackerParticle
filtered_human_target_pub	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::Publisher filtered_human_target_pub;$/;"	m	class:Edgeleg_manager
filtered_human_target_pub	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::Publisher filtered_human_target_pub;$/;"	m	class:Edgeleg_manager_action
filtered_human_target_pub	human_filter/include/people_tracking_filter/service_test.h	/^  ros::Publisher filtered_human_target_pub;$/;"	m	class:Edgeleg_manager_srv
filtered_humans_array	navi_mdp/include/Dynamic_Manager.h	/^  	visualization_msgs::MarkerArray filtered_humans_array;$/;"	m	class:Dynamic_Manager
filtered_leg_target	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  std::vector<double> filtered_leg_target;$/;"	m	class:Edgeleg_manager
filtered_leg_target	human_filter/include/people_tracking_filter/followme_action.h	/^  std::vector<double> filtered_leg_target;$/;"	m	class:Edgeleg_manager_action
filtered_leg_target	human_filter/include/people_tracking_filter/service_test.h	/^  std::vector<double> filtered_leg_target;$/;"	m	class:Edgeleg_manager_srv
filtered_target	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<double>    filtered_target;$/;"	m	class:Dynamic_Manager
filterhumanbelief	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::filterhumanbelief()$/;"	f	class:Dynamic_Manager
finalTarget	navi_mdp/include/PathManager.h	/^	std::vector<double> finalTarget;$/;"	m	class:PathManager
final_lb	despot/include/despot/core/solver.h	/^	double initial_lb, initial_ub, final_lb, final_ub;$/;"	m	struct:despot::SearchStatistics
final_ub	despot/include/despot/core/solver.h	/^	double initial_lb, initial_ub, final_lb, final_ub;$/;"	m	struct:despot::SearchStatistics
find	despot/include/despot/util/tinyxml/tinystr.h	/^	size_type find(char lookup) const {$/;"	f	class:despot::util::tinyxml::TiXmlString
find	despot/include/despot/util/tinyxml/tinystr.h	/^	size_type find(char tofind, size_type offset) const {$/;"	f	class:despot::util::tinyxml::TiXmlString
findSpan	navi_mdp/src/srBSpline.cpp	/^bool srBSpline::findSpan( int& ret, double u )$/;"	f	class:srBSpline
finddynpathidx	navi_mdp/src/PathManager.cpp	/^int PathManager::finddynpathidx()$/;"	f	class:PathManager
findpathidx	navi_mdp/src/PathManager.cpp	/^int PathManager::findpathidx()$/;"	f	class:PathManager
finish	despot/include/despot/util/tinyxml/tinystr.h	/^	char* finish() const {$/;"	f	class:despot::util::tinyxml::TiXmlString
finished	despot/include/despot/util/optionparser.h	/^	bool finished(int numargs, const char** args) {$/;"	f	class:despot::option::Parser::StoreOptionAction
finished	despot/include/despot/util/optionparser.h	/^	virtual bool finished(int numargs, const char** args) {$/;"	f	struct:despot::option::Parser::Action
finished	despot/include/despot/util/timer.h	/^	bool finished() {$/;"	f	class:despot::Timer
first	despot/include/despot/util/optionparser.h	/^	Option* first() {$/;"	f	class:despot::option::Option
firstChild	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* firstChild;$/;"	m	class:despot::util::tinyxml::TiXmlNode
first_action_	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	int first_action_;$/;"	m	class:despot::TagHistoryModePolicy	file:
fixed_frame_	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  std::string fixed_frame_;$/;"	m	class:Edgeleg_manager
fixed_frame_	human_filter/include/people_tracking_filter/followme_action.h	/^  std::string fixed_frame_;$/;"	m	class:Edgeleg_manager_action
fixed_frame_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  std::string fixed_frame_;$/;"	m	class:estimation::PeopleTrackingNode
fixed_frame_	human_filter/include/people_tracking_filter/service_test.h	/^  std::string fixed_frame_;$/;"	m	class:Edgeleg_manager_srv
flag_bits_	despot/examples/cpp_models/navigation/src/navigation.cpp	/^int Navigation::flag_bits_ = 3;$/;"	m	class:despot::Navigation	file:
flag_bits_	despot/examples/cpp_models/navigation/src/navigation.h	/^	static int flag_bits_;$/;"	m	class:despot::Navigation
flag_size_	despot/examples/cpp_models/navigation/src/navigation.cpp	/^int Navigation::flag_size_ = 8;$/;"	m	class:despot::Navigation	file:
flag_size_	despot/examples/cpp_models/navigation/src/navigation.h	/^	static int flag_size_; \/\/ first 3 bits in state index: first_step_done, second_step_done, min-x$/;"	m	class:despot::Navigation
floor	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^const Floor& BaseTag::floor() const {$/;"	f	class:despot::BaseTag
floor_	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	Floor floor_;$/;"	m	class:despot::TagHistoryModePolicy	file:
floor_	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	Floor floor_;$/;"	m	class:despot::TagSHRPolicy	file:
floor_	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	Floor floor_;$/;"	m	class:despot::BaseTag
floor_	despot/include/despot/util/floor.h	/^	int** floor_;$/;"	m	class:despot::Floor
flush	despot/include/despot/util/optionparser.h	/^		void flush(IStringWriter& write) {$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
follow_action_client	human_filter/scripts/follow_action.py	/^def follow_action_client():$/;"	f
follow_one_person_	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  bool follow_one_person_;$/;"	m	class:Edgeleg_manager
follow_one_person_	human_filter/include/people_tracking_filter/followme_action.h	/^  bool follow_one_person_;$/;"	m	class:Edgeleg_manager_action
follow_one_person_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  bool follow_one_person_;$/;"	m	class:estimation::PeopleTrackingNode
follow_one_person_	human_filter/include/people_tracking_filter/service_test.h	/^  bool follow_one_person_;$/;"	m	class:Edgeleg_manager_srv
followingLoop	human_filter/src/followme_action.cpp	/^bool Edgeleg_manager_action::followingLoop(human_filter::set_target_to_follow::Request &req, human_filter::set_target_to_follow::Response &res)$/;"	f	class:Edgeleg_manager_action
followingLoop	human_filter/src/service_test.cpp	/^bool Edgeleg_manager_srv::followingLoop(human_filter::set_target_to_follow::Request &req, human_filter::set_target_to_follow::Response &res)$/;"	f	class:Edgeleg_manager_srv
food	despot/examples/cpp_models/pocman/src/pocman.h	/^	std::vector<bool> food; \/\/ bit vector$/;"	m	class:despot::PocmanState
food_prob_	despot/examples/cpp_models/pocman/src/pocman.h	/^	double food_prob_, chase_prob_, defensive_slip_;$/;"	m	class:despot::Pocman
freelist_	despot/include/despot/util/memorypool.h	/^	std::vector<T*> freelist_;$/;"	m	class:despot::MemoryPool
freq_	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  double freq_, start_distance_min_, reliability_threshold_;$/;"	m	class:Edgeleg_manager
freq_	human_filter/include/people_tracking_filter/followme_action.h	/^  double freq_, start_distance_min_, reliability_threshold_;$/;"	m	class:Edgeleg_manager_action
freq_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  double freq_, start_distance_min_, reliability_threshold_;$/;"	m	class:estimation::PeopleTrackingNode
freq_	human_filter/include/people_tracking_filter/service_test.h	/^  double freq_, start_distance_min_, reliability_threshold_;$/;"	m	class:Edgeleg_manager_srv
fwrite	despot/include/despot/util/optionparser.h	/^		Function* fwrite;$/;"	m	struct:despot::option::PrintUsageImplementation::StreamWriter
g_counter	edge_leg_detector/src/detector.cpp	/^int g_counter = 0;$/;"	v
g_counter	edge_leg_detector/src/edge_leg_detector/detector.cpp	/^int g_counter = 0;$/;"	v
gamma	navi_mdp/include/Dynamic_Manager.h	/^ 	double gamma;$/;"	m	class:Dynamic_Manager
gamma	navi_mdp/include/MDPmanager.h	/^ 	double gamma;$/;"	m	class:MDPManager
gauss_pos_	human_filter/include/people_tracking_filter/gaussian_pos_vel.h	/^  GaussianVector gauss_pos_, gauss_vel_;$/;"	m	class:BFL::GaussianPosVel
gauss_vel_	human_filter/include/people_tracking_filter/gaussian_pos_vel.h	/^  GaussianVector gauss_pos_, gauss_vel_;$/;"	m	class:BFL::GaussianPosVel
gausscdf	despot/src/util/util.cpp	/^double gausscdf(double x, double mean, double sigma) {$/;"	f	namespace:despot
generatePath	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::generatePath()$/;"	f	class:Dynamic_Manager
generatePath	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::generatePath()$/;"	f	class:MDPManager
generate_dynamicPath	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::generate_dynamicPath()$/;"	f	class:Dynamic_Manager
generate_dynamicPath	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::generate_dynamicPath()$/;"	f	class:MDPManager
getCPs	navi_mdp/src/srBSpline.cpp	/^double srBSpline::getCPs(int index)$/;"	f	class:srBSpline
getCameraregion	human_filter/src/edge_leg_filter_node.cpp	/^void Edgeleg_manager::getCameraregion()$/;"	f	class:Edgeleg_manager
getCameraregion	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::getCameraregion()$/;"	f	class:Edgeleg_manager_action
getCameraregion	human_filter/src/service_test.cpp	/^void Edgeleg_manager_srv::getCameraregion()$/;"	f	class:Edgeleg_manager_srv
getCameraregion	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::getCameraregion()$/;"	f	class:Dynamic_Manager
getCurveDerPoint	navi_mdp/src/srBSpline.cpp	/^bool srBSpline::getCurveDerPoint( double& ret, double u, int d )$/;"	f	class:srBSpline
getCurvePoint	navi_mdp/src/srBSpline.cpp	/^bool srBSpline::getCurvePoint( double& ret, double u )$/;"	f	class:srBSpline
getDistance_from_Vec	human_filter/src/edge_leg_filter_node.cpp	/^double Edgeleg_manager::getDistance_from_Vec(std::vector<double> origin, double _x, double _y)$/;"	f	class:Edgeleg_manager
getDistance_from_Vec	human_filter/src/followme_action.cpp	/^double Edgeleg_manager_action::getDistance_from_Vec(std::vector<double> origin, double _x, double _y)$/;"	f	class:Edgeleg_manager_action
getDistance_from_Vec	human_filter/src/service_test.cpp	/^double Edgeleg_manager_srv::getDistance_from_Vec(std::vector<double> origin, double _x, double _y)$/;"	f	class:Edgeleg_manager_srv
getEstimate	human_filter/src/detector_particle.cpp	/^void DetectorParticle::getEstimate(people_msgs::PositionMeasurement& est) const$/;"	f	class:estimation::DetectorParticle
getEstimate	human_filter/src/detector_particle.cpp	/^void DetectorParticle::getEstimate(tf::Vector3& est) const$/;"	f	class:estimation::DetectorParticle
getEstimate	human_filter/src/tracker_kalman.cpp	/^void TrackerKalman::getEstimate(StatePosVel& est) const$/;"	f	class:estimation::TrackerKalman
getEstimate	human_filter/src/tracker_kalman.cpp	/^void TrackerKalman::getEstimate(people_msgs::PositionMeasurement& est) const$/;"	f	class:estimation::TrackerKalman
getEstimate	human_filter/src/tracker_particle.cpp	/^void TrackerParticle::getEstimate(StatePosVel& est) const$/;"	f	class:estimation::TrackerParticle
getEstimate	human_filter/src/tracker_particle.cpp	/^void TrackerParticle::getEstimate(people_msgs::PositionMeasurement& est) const$/;"	f	class:estimation::TrackerParticle
getHistogram	human_filter/src/detector_particle.cpp	/^Matrix DetectorParticle::getHistogram(const tf::Vector3& min, const tf::Vector3& max, const tf::Vector3& step) const$/;"	f	class:estimation::DetectorParticle
getHistogram	human_filter/src/mcpdf_pos_vel.cpp	/^MatrixWrapper::Matrix MCPdfPosVel::getHistogram(const Vector3& m, const Vector3& M, const Vector3& step, bool pos_hist) const$/;"	f	class:MCPdfPosVel
getHistogram	human_filter/src/mcpdf_vector.cpp	/^MatrixWrapper::Matrix MCPdfVector::getHistogram(const Vector3& m, const Vector3& M, const Vector3& step) const$/;"	f	class:MCPdfVector
getHistogramPos	human_filter/src/mcpdf_pos_vel.cpp	/^MatrixWrapper::Matrix MCPdfPosVel::getHistogramPos(const Vector3& m, const Vector3& M, const Vector3& step) const$/;"	f	class:MCPdfPosVel
getHistogramPos	human_filter/src/tracker_particle.cpp	/^Matrix TrackerParticle::getHistogramPos(const tf::Vector3& min, const tf::Vector3& max, const tf::Vector3& step) const$/;"	f	class:estimation::TrackerParticle
getHistogramVel	human_filter/src/mcpdf_pos_vel.cpp	/^MatrixWrapper::Matrix MCPdfPosVel::getHistogramVel(const Vector3& m, const Vector3& M, const Vector3& step) const$/;"	f	class:MCPdfPosVel
getHistogramVel	human_filter/src/tracker_particle.cpp	/^Matrix TrackerParticle::getHistogramVel(const tf::Vector3& min, const tf::Vector3& max, const tf::Vector3& step) const$/;"	f	class:estimation::TrackerParticle
getIndexOfLargestElement	navi_mdp/src/PathManager.cpp	/^int PathManager::getIndexOfLargestElement(vector<double> arr)$/;"	f	class:PathManager
getLifetime	human_filter/src/tracker_kalman.cpp	/^double TrackerKalman::getLifetime() const$/;"	f	class:estimation::TrackerKalman
getLifetime	human_filter/src/tracker_particle.cpp	/^double TrackerParticle::getLifetime() const$/;"	f	class:estimation::TrackerParticle
getMaxValueAction	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::getMaxValueAction(int x_pos, int y_pos,map<int,double>& maxmap)$/;"	f	class:Dynamic_Manager
getMaxValueAction	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::getMaxValueAction(int x_pos, int y_pos,map<int,double>& maxmap)$/;"	f	class:MDPManager
getName	human_filter/include/people_tracking_filter/tracker.h	/^  const std::string& getName() const$/;"	f	class:estimation::Tracker
getNumCPs	navi_mdp/src/srBSpline.cpp	/^int srBSpline::getNumCPs()$/;"	f	class:srBSpline
getParticleCloud	human_filter/src/detector_particle.cpp	/^void DetectorParticle::getParticleCloud(const tf::Vector3& step, double threshold, sensor_msgs::PointCloud& cloud) const$/;"	f	class:estimation::DetectorParticle
getParticleCloud	human_filter/src/mcpdf_pos_vel.cpp	/^void MCPdfPosVel::getParticleCloud(const tf::Vector3& step, double threshold, sensor_msgs::PointCloud& cloud) const$/;"	f	class:MCPdfPosVel
getParticleCloud	human_filter/src/mcpdf_vector.cpp	/^void MCPdfVector::getParticleCloud(const Vector3& step, double threshold, sensor_msgs::PointCloud& cloud) const$/;"	f	class:MCPdfVector
getParticleCloud	human_filter/src/tracker_particle.cpp	/^void TrackerParticle::getParticleCloud(const tf::Vector3& step, double threshold, sensor_msgs::PointCloud& cloud) const$/;"	f	class:estimation::TrackerParticle
getPolicychar	navi_mdp/src/Dynamic_Manager.cpp	/^char Dynamic_Manager::getPolicychar(int policyidx)$/;"	f	class:Dynamic_Manager
getPolicychar	navi_mdp/src/MDPmanager.cpp	/^char MDPManager::getPolicychar(int policyidx)$/;"	f	class:MDPManager
getQuality	human_filter/include/people_tracking_filter/detector_particle.h	/^  double getQuality() const$/;"	f	class:estimation::DetectorParticle
getQuality	human_filter/include/people_tracking_filter/tracker_kalman.h	/^  virtual double getQuality() const$/;"	f	class:estimation::TrackerKalman
getQuality	human_filter/include/people_tracking_filter/tracker_particle.h	/^  virtual double getQuality() const$/;"	f	class:estimation::TrackerParticle
getStepReward	despot/src/ippc/client.cpp	/^double Client::getStepReward(string mes) {$/;"	f	class:despot::Client
getSurfacePoint	navi_mdp/src/srBSpline.cpp	/^bool srBSpline::getSurfacePoint( double& ret, double u, double v )$/;"	f	class:srBSpline
getT0	navi_mdp/src/srBSpline.cpp	/^double srBSpline::getT0( void )$/;"	f	class:srBSpline
getTf	navi_mdp/src/srBSpline.cpp	/^double srBSpline::getTf( void )$/;"	f	class:srBSpline
getTime	human_filter/src/tracker_kalman.cpp	/^double TrackerKalman::getTime() const$/;"	f	class:estimation::TrackerKalman
getTime	human_filter/src/tracker_particle.cpp	/^double TrackerParticle::getTime() const$/;"	f	class:estimation::TrackerParticle
get_key	ros-keyboard/src/keyboard.cpp	/^bool keyboard::Keyboard::get_key(bool& new_event, bool& pressed, uint16_t& code, uint16_t& modifiers)$/;"	f	class:keyboard::Keyboard
get_time_second	despot/include/despot/util/util.h	/^inline double get_time_second() {$/;"	f	namespace:despot
getactionvalue	navi_mdp/src/Dynamic_Manager.cpp	/^double Dynamic_Manager::getactionvalue(int x_pos, int y_pos, int action_ix)$/;"	f	class:Dynamic_Manager
getactionvalue	navi_mdp/src/MDPmanager.cpp	/^double MDPManager::getactionvalue(int x_pos, int y_pos, int action_ix)$/;"	f	class:MDPManager
getdirection	navi_mdp/src/PathManager.cpp	/^int PathManager::getdirection(std::vector<double> pos)$/;"	f	class:PathManager
getdistance	navi_mdp/src/Dynamic_Manager.cpp	/^double Dynamic_Manager::getdistance(vector<double> cur, vector<double> goal)$/;"	f	class:Dynamic_Manager
getdistance	navi_mdp/src/MDPmanager.cpp	/^double MDPManager::getdistance(vector<double> cur, vector<double> goal)$/;"	f	class:MDPManager
getdistance	navi_mdp/src/PathManager.cpp	/^double PathManager::getdistance(vector<double> cur, vector<double> goal, int dimension)$/;"	f	class:PathManager
getlastDerivate	navi_mdp/src/srBSpline.cpp	/^double srBSpline::getlastDerivate()$/;"	f	class:srBSpline
getlinevalue	human_filter/src/edge_leg_filter_node.cpp	/^bool Edgeleg_manager::getlinevalue(int line_type,double input_x, double input_y)$/;"	f	class:Edgeleg_manager
getlinevalue	human_filter/src/followme_action.cpp	/^bool Edgeleg_manager_action::getlinevalue(int line_type,double input_x, double input_y)$/;"	f	class:Edgeleg_manager_action
getlinevalue	human_filter/src/service_test.cpp	/^bool Edgeleg_manager_srv::getlinevalue(int line_type,double input_x, double input_y)$/;"	f	class:Edgeleg_manager_srv
getlinevalue	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::getlinevalue(int line_type,double input_x, double input_y)$/;"	f	class:Dynamic_Manager
getneighboractionset	navi_mdp/src/Dynamic_Manager.cpp	/^vector<int> Dynamic_Manager::getneighboractionset(int action_idx)$/;"	f	class:Dynamic_Manager
getneighboractionset	navi_mdp/src/MDPmanager.cpp	/^vector<int> MDPManager::getneighboractionset(int action_idx)$/;"	f	class:MDPManager
getsubgoal	navi_mdp/src/PathManager.cpp	/^control_msgs::FollowJointTrajectoryGoal PathManager::getsubgoal()$/;"	f	class:PathManager
getsubgoal	navi_mdp/src/PathManager.cpp	/^control_msgs::FollowJointTrajectoryGoal PathManager::getsubgoal(std::vector<double> desired_target)$/;"	f	class:PathManager
ghost_dir	despot/examples/cpp_models/pocman/src/pocman.h	/^	std::vector<int> ghost_dir;$/;"	m	class:despot::PocmanState
ghost_home_	despot/examples/cpp_models/pocman/src/pocman.h	/^	Coord pocman_home_, ghost_home_;$/;"	m	class:despot::Pocman
ghost_pos	despot/examples/cpp_models/pocman/src/pocman.h	/^	std::vector<Coord> ghost_pos;$/;"	m	class:despot::PocmanState
ghost_range_	despot/examples/cpp_models/pocman/src/pocman.h	/^	int num_ghosts_, passage_y_, ghost_range_, smell_range_, hear_range_;$/;"	m	class:despot::Pocman
global_pose	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  std::vector<double> global_pose;$/;"	m	class:Edgeleg_manager
global_pose	human_filter/include/people_tracking_filter/followme_action.h	/^  std::vector<double> global_pose;$/;"	m	class:Edgeleg_manager_action
global_pose	human_filter/include/people_tracking_filter/service_test.h	/^  std::vector<double> global_pose;$/;"	m	class:Edgeleg_manager_srv
global_pose	navi_mdp/include/Dynamic_Manager.h	/^	std::vector<double> global_pose;$/;"	m	class:Dynamic_Manager
global_pose	navi_mdp/include/MDPmanager.h	/^ 	std::vector<double> global_pose;$/;"	m	class:MDPManager
global_pose	navi_mdp/include/PathManager.h	/^	std::vector<double> global_pose;$/;"	m	class:PathManager
global_pose	villa_navi_service/include/navi_service_node.h	/^	std::vector<double> global_pose;$/;"	m	class:villa_navi_srv
global_pose_callback	human_filter/src/edge_leg_filter_node.cpp	/^void Edgeleg_manager::global_pose_callback(const geometry_msgs::PoseStamped::ConstPtr& msg)$/;"	f	class:Edgeleg_manager
global_pose_callback	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::global_pose_callback(const geometry_msgs::PoseStamped::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_action
global_pose_callback	human_filter/src/service_test.cpp	/^void Edgeleg_manager_srv::global_pose_callback(const geometry_msgs::PoseStamped::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_srv
global_pose_callback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::global_pose_callback(const geometry_msgs::PoseStamped::ConstPtr& msg)$/;"	f	class:Dynamic_Manager
global_pose_callback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::global_pose_callback(const geometry_msgs::PoseStamped::ConstPtr& msg)$/;"	f	class:MDPManager
global_pose_callback	navi_mdp/src/PathManager.cpp	/^void PathManager::global_pose_callback(const geometry_msgs::PoseStamped::ConstPtr& msg)$/;"	f	class:PathManager
global_pose_callback	navi_mdp/src/base_actionlib.cpp	/^void global_pose_callback(const geometry_msgs::PoseStamped::ConstPtr& msg)$/;"	f
globalcoord_To_SScaled_map_index	human_filter/src/edge_leg_filter_node.cpp	/^int Edgeleg_manager::globalcoord_To_SScaled_map_index(float x_pos,float y_pos)$/;"	f	class:Edgeleg_manager
globalcoord_To_SScaled_map_index	human_filter/src/followme_action.cpp	/^int Edgeleg_manager_action::globalcoord_To_SScaled_map_index(float x_pos,float y_pos)$/;"	f	class:Edgeleg_manager_action
globalcoord_To_SScaled_map_index	human_filter/src/service_test.cpp	/^int Edgeleg_manager_srv::globalcoord_To_SScaled_map_index(float x_pos,float y_pos)$/;"	f	class:Edgeleg_manager_srv
globalpose_sub	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::Subscriber globalpose_sub;$/;"	m	class:Edgeleg_manager
globalpose_sub	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::Subscriber globalpose_sub;$/;"	m	class:Edgeleg_manager_action
globalpose_sub	human_filter/include/people_tracking_filter/service_test.h	/^  ros::Subscriber globalpose_sub;$/;"	m	class:Edgeleg_manager_srv
goTarget	villa_navi_service/src/navi_service_node.cpp	/^bool villa_navi_srv::goTarget(villa_navi_service::GoTargetPos::Request &req, villa_navi_service::GoTargetPos::Response &res)$/;"	f	class:villa_navi_srv
goal_pos	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	Coord goal_pos;$/;"	m	class:despot::NavigationState
goal_pos	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	Coord goal_pos;$/;"	m	class:despot::NavigationState
goal_pos_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	int goal_pos_, trap_pos_;$/;"	m	class:despot::Navigation
goal_pos_	despot/examples/cpp_models/navigation/src/navigation.h	/^	int goal_pos_, trap_pos_;$/;"	m	class:despot::Navigation
goal_pos_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int goal_pos_, trap_pos_;$/;"	m	class:despot::Navigation
goal_prob_	despot/examples/cpp_models/adventurer/src/adventurer.h	/^  std::vector<double> goal_prob_;$/;"	m	class:despot::Adventurer
goal_reward_	despot/examples/cpp_models/adventurer/src/adventurer.h	/^	std::vector<double> goal_reward_;$/;"	m	class:despot::Adventurer
goal_reward_	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^	double goal_reward_;$/;"	m	class:despot::RegDemo
grid_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const Grid<int>& grid_;$/;"	m	class:despot::RockSampleENTScenarioLowerBound	file:
grid_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const Grid<int>& grid_;$/;"	m	class:despot::RockSampleEastScenarioLowerBound	file:
grid_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const Grid<int>& grid_;$/;"	m	class:despot::RockSampleMMAPStateScenarioLowerBound	file:
grid_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	Grid<int> grid_;$/;"	m	class:despot::BaseRockSample
grid_	despot/include/despot/util/grid.h	/^  std::vector<T> grid_;$/;"	m	class:despot::Grid
gui_start	navi_mdp/scripts/gui_move.py	/^def gui_start():$/;"	f
half_efficiency_distance_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	double half_efficiency_distance_;$/;"	m	class:despot::BaseRockSample
half_pathsize	navi_mdp/include/PathManager.h	/^	int half_pathsize;$/;"	m	class:PathManager
handleButton	navi_mdp/scripts/gui_move.py	/^  def handleButton(self):$/;"	m	class:SpeechGui
has_terminal_	despot/include/despot/pomdpx/parser/parser.h	/^	bool has_terminal_;$/;"	m	class:despot::Parser
head	despot/include/despot/util/optionparser.h	/^		int head; \/\/!< @brief index for next write$/;"	m	class:despot::option::PrintUsageImplementation::LineWrapper
head_cmd_pub	navi_mdp/include/PathManager.h	/^    ros::Publisher head_cmd_pub;$/;"	m	class:PathManager
headiter	navi_mdp/include/PathManager.h	/^	int headiter;$/;"	m	class:PathManager
hear_range_	despot/examples/cpp_models/pocman/src/pocman.h	/^	int num_ghosts_, passage_y_, ghost_range_, smell_range_, hear_range_;$/;"	m	class:despot::Pocman
help	despot/include/despot/util/optionparser.h	/^	const char* help;$/;"	m	struct:despot::option::Descriptor
helper	despot/include/despot/util/timer.h	/^	static void* helper(void* context) {$/;"	f	class:despot::Timer
history	despot/include/despot/solver/pomcp.h	/^	inline virtual const History& history() const {$/;"	f	class:despot::POMCPPrior
history	despot/include/despot/solver/pomcp.h	/^	inline virtual void history(History h) {$/;"	f	class:despot::POMCPPrior
history_	despot/include/despot/core/belief.h	/^	History history_;$/;"	m	class:despot::Belief
history_	despot/include/despot/core/solver.h	/^	History history_;$/;"	m	class:despot::Solver
history_	despot/include/despot/solver/pomcp.h	/^	History history_;$/;"	m	class:despot::POMCPPrior
hit_target_line	despot/include/despot/util/optionparser.h	/^		bool hit_target_line; \/\/!< Flag whether we encountered a part with line index target_line_in_block in the current cell.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
host_info	despot/include/despot/ippc/client.h	/^	struct addrinfo host_info; \/\/ The struct that getaddrinfo() fills up with data.^M$/;"	m	class:despot::Client	typeref:struct:despot::Client::addrinfo
host_info_list	despot/include/despot/ippc/client.h	/^	struct addrinfo *host_info_list;$/;"	m	class:despot::Client	typeref:struct:despot::Client::addrinfo
hostname_	despot/include/despot/evaluator.h	/^	std::string hostname_;$/;"	m	class:despot::IPPCEvaluator
hsrb_base_pose	navi_mdp/include/PathManager.h	/^	std::vector<double> hsrb_base_pose;$/;"	m	class:PathManager
hsrb_odomCallback	navi_mdp/src/base_actionlib.cpp	/^void hsrb_odomCallback(const nav_msgs::Odometry ::ConstPtr& msg)$/;"	f
hsrb_odomCallback	navi_mdp/src/base_conti_actionlib.cpp	/^void hsrb_odomCallback(const nav_msgs::Odometry::ConstPtr& msg)$/;"	f
human_belief_map	villa_navi_service/include/navi_service_node.h	/^	nav_msgs::OccupancyGrid human_belief_map;$/;"	m	class:villa_navi_srv
human_boxes_array	villa_navi_service/include/navi_service_node.h	/^	visualization_msgs::MarkerArray human_boxes_array;$/;"	m	class:villa_navi_srv
human_callback_count	navi_mdp/include/Dynamic_Manager.h	/^ 	int               human_callback_count;$/;"	m	class:Dynamic_Manager
human_callback_count	navi_mdp/include/MDPmanager.h	/^ 	int               human_callback_count;$/;"	m	class:MDPManager
human_global	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<float>	  human_global;$/;"	m	class:Dynamic_Manager
human_global	navi_mdp/include/MDPmanager.h	/^ 	vector<float>	  human_global;$/;"	m	class:MDPManager
human_laser_pub	villa_navi_service/include/navi_service_node.h	/^	ros::Publisher human_laser_pub;$/;"	m	class:villa_navi_srv
human_laser_scan_pub	villa_navi_service/include/navi_service_node.h	/^	ros::Publisher human_laser_scan_pub;$/;"	m	class:villa_navi_srv
human_leg_boxes_array	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  visualization_msgs::MarkerArray human_leg_boxes_array;$/;"	m	class:Edgeleg_manager
human_leg_boxes_array	human_filter/include/people_tracking_filter/followme_action.h	/^  visualization_msgs::MarkerArray human_leg_boxes_array;$/;"	m	class:Edgeleg_manager_action
human_leg_boxes_array	human_filter/include/people_tracking_filter/service_test.h	/^  visualization_msgs::MarkerArray human_leg_boxes_array;$/;"	m	class:Edgeleg_manager_srv
human_leg_boxes_array	navi_mdp/include/Dynamic_Manager.h	/^  	visualization_msgs::MarkerArray human_leg_boxes_array;$/;"	m	class:Dynamic_Manager
human_leg_callback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::human_leg_callback(const geometry_msgs::PoseArray::ConstPtr& msg)$/;"	f	class:MDPManager
human_leg_target_pub	villa_navi_service/include/navi_service_node.h	/^	ros::Publisher human_leg_target_pub;$/;"	m	class:villa_navi_srv
human_occupied_idx	navi_mdp/include/Dynamic_Manager.h	/^    std::vector<int> human_occupied_idx;$/;"	m	class:Dynamic_Manager
human_occupied_idx	villa_navi_service/include/navi_service_node.h	/^	std::vector<int> human_occupied_idx;$/;"	m	class:villa_navi_srv
human_occupied_leg_idx	navi_mdp/include/Dynamic_Manager.h	/^	std::vector<int> human_occupied_leg_idx;$/;"	m	class:Dynamic_Manager
human_occupied_leg_idx	villa_navi_service/include/navi_service_node.h	/^	std::vector<int> human_occupied_leg_idx;$/;"	m	class:villa_navi_srv
human_target_Intcmd_pub	villa_navi_service/include/navi_service_node.h	/^	ros::Publisher human_target_Intcmd_pub;$/;"	m	class:villa_navi_srv
human_target_pub	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::Publisher human_target_pub;$/;"	m	class:Edgeleg_manager
human_target_pub	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::Publisher human_target_pub;$/;"	m	class:Edgeleg_manager_action
human_target_pub	human_filter/include/people_tracking_filter/service_test.h	/^  ros::Publisher human_target_pub;$/;"	m	class:Edgeleg_manager_srv
human_target_pub	villa_navi_service/include/navi_service_node.h	/^	ros::Publisher human_target_pub;$/;"	m	class:villa_navi_srv
human_yolo_callback	human_filter/src/edge_leg_filter_node.cpp	/^void Edgeleg_manager::human_yolo_callback(const visualization_msgs::MarkerArray::ConstPtr& msg)$/;"	f	class:Edgeleg_manager
human_yolo_callback	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::human_yolo_callback(const visualization_msgs::MarkerArray::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_action
human_yolo_callback	human_filter/src/service_test.cpp	/^void Edgeleg_manager_srv::human_yolo_callback(const visualization_msgs::MarkerArray::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_srv
id	navi_mdp/scripts/human_marker.py	/^   id = 0$/;"	v
indent	despot/include/despot/util/optionparser.h	/^	static void indent(IStringWriter& write, int& x, int want_x) {$/;"	f	struct:despot::option::PrintUsageImplementation
indent	despot/include/despot/util/tinyxml/tinyxml.h	/^	bool simpleTextPrint;TIXML_STRING buffer;TIXML_STRING indent;TIXML_STRING lineBreak;$/;"	m	class:despot::util::tinyxml::TiXmlPrinter
index	despot/include/despot/util/optionparser.h	/^	const unsigned index;$/;"	m	struct:despot::option::Descriptor
index	despot/include/despot/util/optionparser.h	/^	int index() const {$/;"	f	class:despot::option::Option
index	villa_navi_service/include/navi_service_node.h	/^	int index;$/;"	m	class:villa_navi_srv
index_	despot/include/despot/pomdpx/parser/variable.h	/^	std::map<std::string, int> index_;$/;"	m	class:despot::Variable
index_of_human_occ_cells_updated_recently	villa_navi_service/include/navi_service_node.h	/^	std::vector<int> index_of_human_occ_cells_updated_recently;$/;"	m	class:villa_navi_srv
indexer_	despot/include/despot/core/policy.h	/^	const StateIndexer& indexer_;$/;"	m	class:despot::ModeStatePolicy
indexer_	despot/include/despot/core/upper_bound.h	/^	const StateIndexer& indexer_;$/;"	m	class:despot::LookaheadUpperBound
indexer_	despot/include/despot/core/upper_bound.h	/^	const StateIndexer& indexer_;$/;"	m	class:despot::MDPUpperBound
inferencer_	despot/include/despot/core/policy.h	/^	const MMAPInferencer& inferencer_;$/;"	m	class:despot::MMAPStatePolicy
init	despot/include/despot/util/optionparser.h	/^	void init(const Descriptor* desc_, const char* name_, const char* arg_) {$/;"	f	class:despot::option::Option
init	despot/include/despot/util/tinyxml/tinystr.h	/^	void init(size_type sz) {$/;"	f	class:despot::util::tinyxml::TiXmlString
init	despot/include/despot/util/tinyxml/tinystr.h	/^	void init(size_type sz, size_type cap) {$/;"	f	class:despot::util::tinyxml::TiXmlString
init_time_	human_filter/include/people_tracking_filter/tracker_kalman.h	/^  double init_time_, filter_time_, quality_;$/;"	m	class:estimation::TrackerKalman
init_time_	human_filter/include/people_tracking_filter/tracker_particle.h	/^  double init_time_, filter_time_, quality_;$/;"	m	class:estimation::TrackerParticle
initial_belief_funcs_	despot/include/despot/pomdpx/parser/parser.h	/^  std::vector<TabularCPT> initial_belief_funcs_;$/;"	m	class:despot::Parser
initial_depth_	despot/include/despot/core/policy.h	/^	mutable int initial_depth_;$/;"	m	class:despot::Policy
initial_lb	despot/include/despot/core/solver.h	/^	double initial_lb, initial_ub, final_lb, final_ub;$/;"	m	struct:despot::SearchStatistics
initial_particles_	despot/include/despot/core/belief.h	/^	std::vector<State*> initial_particles_;$/;"	m	class:despot::ParticleBelief
initial_ub	despot/include/despot/core/solver.h	/^	double initial_lb, initial_ub, final_lb, final_ub;$/;"	m	struct:despot::SearchStatistics
initialize	human_filter/src/detector_particle.cpp	/^void DetectorParticle::initialize(const tf::Vector3& mu, const tf::Vector3& size, const double time)$/;"	f	class:estimation::DetectorParticle
initialize	human_filter/src/tracker_kalman.cpp	/^void TrackerKalman::initialize(const StatePosVel& mu, const StatePosVel& sigma, const double time)$/;"	f	class:estimation::TrackerKalman
initialize	human_filter/src/tracker_particle.cpp	/^void TrackerParticle::initialize(const StatePosVel& mu, const StatePosVel& sigma, const double time)$/;"	f	class:estimation::TrackerParticle
initializeSocket	despot/src/ippc/client.cpp	/^void Client::initializeSocket() {$/;"	f	class:despot::Client
instance_	despot/include/despot/evaluator.h	/^	std::string instance_;$/;"	m	class:despot::IPPCEvaluator
instr	despot/include/despot/util/optionparser.h	/^	static bool instr(char ch, const char* st) {$/;"	f	class:despot::option::Parser
int_msg	navi_mdp/scripts/human_marker.py	/^   int_msg=std_msgs.msg.Int8()$/;"	v
intcallback	navi_mdp/scripts/base_move.py	/^    def intcallback(self, data):$/;"	m	class:BaseMoveCBA
isFirst	despot/include/despot/util/optionparser.h	/^	bool isFirst() const {$/;"	f	class:despot::option::Option
isInitialized	human_filter/include/people_tracking_filter/detector_particle.h	/^  bool isInitialized() const$/;"	f	class:estimation::DetectorParticle
isInitialized	human_filter/include/people_tracking_filter/tracker_kalman.h	/^  virtual bool isInitialized() const$/;"	f	class:estimation::TrackerKalman
isInitialized	human_filter/include/people_tracking_filter/tracker_particle.h	/^  virtual bool isInitialized() const$/;"	f	class:estimation::TrackerParticle
isLast	despot/include/despot/util/optionparser.h	/^	bool isLast() const {$/;"	f	class:despot::option::Option
isTagged	despot/include/despot/util/optionparser.h	/^	static bool isTagged(Option* ptr) {$/;"	f	class:despot::option::Option
isWideChar	despot/include/despot/util/optionparser.h	/^	static bool isWideChar(unsigned ch) {$/;"	f	struct:despot::option::PrintUsageImplementation
is_identity_	despot/include/despot/pomdpx/parser/parser.h	/^	std::vector<std::vector<bool> > is_identity_; \/\/ is_identity_[s][a] = true iff transition_funcs_[s] is an identity for action a$/;"	m	class:despot::Parser
is_small_	despot/include/despot/pomdpx/pomdpx.h	/^	bool is_small_;$/;"	m	class:despot::POMDPX
joint_states_callback	human_filter/src/edge_leg_filter_node.cpp	/^void Edgeleg_manager::joint_states_callback(const sensor_msgs::JointState::ConstPtr& msg)$/;"	f	class:Edgeleg_manager
joint_states_callback	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::joint_states_callback(const sensor_msgs::JointState::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_action
joint_states_callback	human_filter/src/service_test.cpp	/^void Edgeleg_manager_srv::joint_states_callback(const sensor_msgs::JointState::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_srv
joint_states_callback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::joint_states_callback(const sensor_msgs::JointState::ConstPtr& msg)$/;"	f	class:Dynamic_Manager
kOriginLink	navi_mdp/src/base_actionlib.cpp	/^const char* kOriginLink = "odom";$/;"	v
kRobotBaseLink	navi_mdp/src/base_actionlib.cpp	/^const char* kRobotBaseLink = "base_link";$/;"	v
k_	despot/include/despot/util/gamma.h	/^	double k_;$/;"	m	class:despot::Gamma
keyboard	ros-keyboard/src/keyboard.h	/^namespace keyboard {$/;"	n
keyboard_callback	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::keyboard_callback(const keyboard::Key::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_action
keyboard_sub	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::Subscriber keyboard_sub;$/;"	m	class:Edgeleg_manager
keyboard_sub	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::Subscriber keyboard_sub;$/;"	m	class:Edgeleg_manager_action
keyboard_sub	human_filter/include/people_tracking_filter/service_test.h	/^  ros::Subscriber keyboard_sub;$/;"	m	class:Edgeleg_manager_srv
last	despot/include/despot/util/optionparser.h	/^	Option* last() {$/;"	f	class:despot::option::Option
lastChild	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* lastChild;$/;"	m	class:despot::util::tinyxml::TiXmlNode
lastSubTarget	navi_mdp/include/PathManager.h	/^	std::vector<double> lastSubTarget;$/;"	m	class:PathManager
last_pose	human_filter/include/people_tracking_filter/followme_action.h	/^  geometry_msgs::PoseStamped last_pose;$/;"	m	class:Edgeleg_manager_action
leg_target	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  std::vector<double> leg_target;$/;"	m	class:Edgeleg_manager
leg_target	human_filter/include/people_tracking_filter/followme_action.h	/^  std::vector<double> leg_target;$/;"	m	class:Edgeleg_manager_action
leg_target	human_filter/include/people_tracking_filter/service_test.h	/^  std::vector<double> leg_target;$/;"	m	class:Edgeleg_manager_srv
leg_target	villa_navi_service/include/navi_service_node.h	/^	std::vector<double> leg_target;				\/\/x,y,theta$/;"	m	class:villa_navi_srv
leg_targetSet	navi_mdp/include/Dynamic_Manager.h	/^    std::vector< std::vector<double> > leg_targetSet;$/;"	m	class:Dynamic_Manager
legal_	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	mutable vector<int> legal_;$/;"	m	class:despot::LocalnaviSmartPolicy	file:
legal_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	mutable vector<int> legal_;$/;"	m	class:despot::LocalnaviSmartPolicy	file:
legal_	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	mutable vector<int> legal_;$/;"	m	class:despot::PocmanSmartPolicy	file:
legal_actions	despot/src/solver/pomcp.cpp	/^const vector<int>& POMCPPrior::legal_actions() const {$/;"	f	class:despot::POMCPPrior
legal_actions_	despot/include/despot/solver/pomcp.h	/^	std::vector<int> legal_actions_;$/;"	m	class:despot::POMCPPrior
len	despot/include/despot/util/optionparser.h	/^		int len; \/\/!< Length of the current part (that ptr points at) in BYTES$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
lenbuf	despot/include/despot/util/optionparser.h	/^		int lenbuf[bufmask + 1];$/;"	m	class:despot::option::PrintUsageImplementation::LineWrapper
length	despot/include/despot/util/optionparser.h	/^		int length() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
length	despot/include/despot/util/tinyxml/tinystr.h	/^	size_type length() const {$/;"	f	class:despot::util::tinyxml::TiXmlString
less	despot/include/despot/core/history.h	/^struct less<despot::History> {$/;"	s	namespace:std
level	despot/src/util/logging.cpp	/^int logging::level() {$/;"	f	class:despot::logging
level	despot/src/util/logging.cpp	/^void logging::level(int verbosity) {$/;"	f	class:despot::logging
likelihood	despot/include/despot/core/node.h	/^	double likelihood; \/\/ Used in AEMS$/;"	m	class:despot::VNode
likelihood	despot/include/despot/core/node.h	/^	double likelihood;$/;"	m	class:despot::QNode
line	despot/include/despot/util/optionparser.h	/^		int line() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
lineBreak	despot/include/despot/util/tinyxml/tinyxml.h	/^	bool simpleTextPrint;TIXML_STRING buffer;TIXML_STRING indent;TIXML_STRING lineBreak;$/;"	m	class:despot::util::tinyxml::TiXmlPrinter
line_in_block	despot/include/despot/util/optionparser.h	/^		int line_in_block; \/\/!< Line index within the current cell of the current part.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
listener	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  tf::TransformListener     listener;$/;"	m	class:Edgeleg_manager
listener	human_filter/include/people_tracking_filter/followme_action.h	/^  tf::TransformListener     listener;$/;"	m	class:Edgeleg_manager_action
listener	human_filter/include/people_tracking_filter/service_test.h	/^  tf::TransformListener     listener;$/;"	m	class:Edgeleg_manager_srv
listener	navi_mdp/include/Dynamic_Manager.h	/^ 	tf::TransformListener 	  listener;$/;"	m	class:Dynamic_Manager
listener	navi_mdp/include/MDPmanager.h	/^ 	tf::TransformListener 	  listener;$/;"	m	class:MDPManager
listener	navi_mdp/include/PathManager.h	/^ 	tf::TransformListener     listener;$/;"	m	class:PathManager
listener	navi_mdp/scripts/base_move.py	/^    def listener(self,wait=0.0):$/;"	m	class:BaseMoveCBA
listener	villa_navi_service/include/navi_service_node.h	/^	tf::TransformListener 	  listener;$/;"	m	class:villa_navi_srv
localmap	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	Grid<int> localmap;$/;"	m	class:despot::Navigation
localmap	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	Grid<int> localmap;$/;"	m	class:despot::Navigation
location	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlCursor location;$/;"	m	class:despot::util::tinyxml::TiXmlBase
log_	despot/include/despot/evaluator.h	/^	EvalLog log_;$/;"	m	class:despot::IPPCEvaluator
log_buf	despot/include/despot/util/logging.h	/^	class log_buf: public std::stringbuf {$/;"	c	class:despot::log_ostream
log_buf	despot/src/util/logging.cpp	/^log_ostream::log_buf::log_buf(ostream& out, string marker) :$/;"	f	class:despot::log_ostream::log_buf
log_file_	despot/include/despot/evaluator.h	/^	std::string log_file_;$/;"	m	class:despot::EvalLog
log_ostream	despot/include/despot/util/logging.h	/^class log_ostream: public std::ostream {$/;"	c	namespace:despot
log_ostream	despot/src/util/logging.cpp	/^log_ostream::log_ostream(ostream& out, string marker) :$/;"	f	class:despot::log_ostream
logd	despot/include/despot/util/logging.h	60;"	d
loge	despot/include/despot/util/logging.h	57;"	d
logging	despot/include/despot/util/logging.h	/^class logging {$/;"	c	namespace:despot
logi	despot/include/despot/util/logging.h	59;"	d
logv	despot/include/despot/util/logging.h	61;"	d
logw	despot/include/despot/util/logging.h	58;"	d
longest_trial_length	despot/include/despot/core/solver.h	/^	int longest_trial_length;$/;"	m	struct:despot::SearchStatistics
longopt	despot/include/despot/util/optionparser.h	/^	const char* const longopt;$/;"	m	struct:despot::option::Descriptor
lower	despot/include/despot/util/util.h	/^inline std::string lower(std::string str) {$/;"	f	namespace:despot
lower_bound	despot/src/core/node.cpp	/^double QNode::lower_bound() const {$/;"	f	class:despot::QNode
lower_bound	despot/src/core/node.cpp	/^double VNode::lower_bound() const {$/;"	f	class:despot::VNode
lower_bound	despot/src/core/node.cpp	/^void QNode::lower_bound(double value) {$/;"	f	class:despot::QNode
lower_bound	despot/src/core/node.cpp	/^void VNode::lower_bound(double value) {$/;"	f	class:despot::VNode
lower_bound	despot/src/solver/despot.cpp	/^ScenarioLowerBound* DESPOT::lower_bound() const {$/;"	f	class:despot::DESPOT
lower_bound_	despot/include/despot/core/node.h	/^	double lower_bound_;$/;"	m	class:despot::QNode
lower_bound_	despot/include/despot/core/node.h	/^	double lower_bound_;$/;"	m	class:despot::VNode
lower_bound_	despot/include/despot/solver/aems.h	/^	BeliefLowerBound* lower_bound_;$/;"	m	class:despot::AEMS
lower_bound_	despot/include/despot/solver/despot.h	/^	ScenarioLowerBound* lower_bound_;$/;"	m	class:despot::DESPOT
m_Beliefout	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::ofstream m_Beliefout;$/;"	m	class:despot::Navigation
m_ControlPoints	navi_mdp/include/srBSpline.h	/^	double* m_ControlPoints;	\/\/ control points$/;"	m	class:srBSpline
m_ControlPointsarray	navi_mdp/include/srBSpline.h	/^	double** m_ControlPointsarray;	\/\/ control points for V $/;"	m	class:srBSpline
m_CubicSpline_x	navi_mdp/include/Dynamic_Manager.h	/^ 	srBSpline*          m_CubicSpline_x;$/;"	m	class:Dynamic_Manager
m_CubicSpline_x	navi_mdp/include/MDPmanager.h	/^ 	srBSpline*           m_CubicSpline_x;$/;"	m	class:MDPManager
m_CubicSpline_y	navi_mdp/include/Dynamic_Manager.h	/^ 	srBSpline*          m_CubicSpline_y;$/;"	m	class:Dynamic_Manager
m_CubicSpline_y	navi_mdp/include/MDPmanager.h	/^ 	srBSpline*           m_CubicSpline_y;$/;"	m	class:MDPManager
m_Degree	navi_mdp/include/srBSpline.h	/^	int m_Degree;				\/\/ degree of the curve$/;"	m	class:srBSpline
m_Goal	navi_mdp/include/Dynamic_Manager.h	/^  	vector<int>       m_Goal;							\/\/Goal position of (x,y)$/;"	m	class:Dynamic_Manager
m_Goal	navi_mdp/include/MDPmanager.h	/^  	vector<int>       m_Goal;							\/\/Goal position of (x,y)$/;"	m	class:MDPManager
m_Knots	navi_mdp/include/srBSpline.h	/^	double* m_Knots;			\/\/ knots$/;"	m	class:srBSpline
m_KnotsV	navi_mdp/include/srBSpline.h	/^	double* m_KnotsV;			\/\/ knots for V $/;"	m	class:srBSpline
m_NumCPs	navi_mdp/include/srBSpline.h	/^	int m_NumCPs;				\/\/ number of control points$/;"	m	class:srBSpline
m_NumCPsV	navi_mdp/include/srBSpline.h	/^	int m_NumCPsV;				\/\/ number of control points for V$/;"	m	class:srBSpline
m_NumKnots	navi_mdp/include/srBSpline.h	/^	int m_NumKnots;				\/\/ number of knots$/;"	m	class:srBSpline
m_NumKnotsV	navi_mdp/include/srBSpline.h	/^	int m_NumKnotsV;			\/\/ number of knots for V $/;"	m	class:srBSpline
m_Robot	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<int>       m_Robot;					    	\/\/Current Robot position of (x,y)$/;"	m	class:Dynamic_Manager
m_Robot	navi_mdp/include/MDPmanager.h	/^ 	vector<int>       m_Robot;					    	\/\/Current Robot position of (x,y)$/;"	m	class:MDPManager
m_Round_num	despot/include/despot/core/pomdp.h	/^	int m_Round_num;$/;"	m	class:despot::DSPOMDP
m_Spline	navi_mdp/include/Dynamic_Manager.h	/^ 	srBSpline*          m_Spline;$/;"	m	class:Dynamic_Manager
m_Spline	navi_mdp/include/MDPmanager.h	/^ 	srBSpline*           m_Spline;$/;"	m	class:MDPManager
m_Start	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<int>		  m_Start;							\/\/Start position of(x,y)$/;"	m	class:Dynamic_Manager
m_Start	navi_mdp/include/MDPmanager.h	/^ 	vector<int>		  m_Start;							\/\/Start position of(x,y)$/;"	m	class:MDPManager
m_boolPath	navi_mdp/include/MDPmanager.h	/^ 	bool    m_boolPath;$/;"	m	class:MDPManager
m_boolSolve	navi_mdp/include/Dynamic_Manager.h	/^ 	bool    m_boolSolve;$/;"	m	class:Dynamic_Manager
m_boolSolve	navi_mdp/include/MDPmanager.h	/^ 	bool    m_boolSolve;$/;"	m	class:MDPManager
m_cell_x_width	navi_mdp/include/MapParam.h	/^   	float 		  		m_cell_x_width;$/;"	m	class:MapParam
m_cell_y_width	navi_mdp/include/MapParam.h	/^	float 		  		m_cell_y_width;$/;"	m	class:MapParam
m_desired_heading	navi_mdp/include/Dynamic_Manager.h	/^ 	double	m_desired_heading;$/;"	m	class:Dynamic_Manager
m_desired_heading	navi_mdp/include/MDPmanager.h	/^ 	double	m_desired_heading;$/;"	m	class:MDPManager
m_dyn_occupancy	villa_navi_service/include/navi_service_node.h	/^	std::vector<double> m_dyn_occupancy;$/;"	m	class:villa_navi_srv
m_dynamic_obs	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<int>		  m_dynamic_obs;$/;"	m	class:Dynamic_Manager
m_dynamic_obs	navi_mdp/include/MDPmanager.h	/^ 	vector<int>		  m_dynamic_obs;$/;"	m	class:MDPManager
m_dynamic_occupancy	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<int>       m_dynamic_occupancy;$/;"	m	class:Dynamic_Manager
m_dynamic_occupancy	navi_mdp/include/MDPmanager.h	/^ 	vector<int>       m_dynamic_occupancy;$/;"	m	class:MDPManager
m_dynamicgrid	despot/include/despot/evaluator.h	/^	nav_msgs::OccupancyGrid m_dynamicgrid;$/;"	m	class:despot::Evaluator
m_fileout	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::ofstream m_fileout;$/;"	m	class:despot::Navigation
m_human_obs	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<int>		  m_human_obs;$/;"	m	class:Dynamic_Manager
m_human_obs	navi_mdp/include/MDPmanager.h	/^ 	vector<int>		  m_human_obs;$/;"	m	class:MDPManager
m_human_posx	villa_navi_service/include/navi_service_node.h	/^	std::vector<double> m_human_posx;$/;"	m	class:villa_navi_srv
m_human_posy	villa_navi_service/include/navi_service_node.h	/^	std::vector<double> m_human_posy;$/;"	m	class:villa_navi_srv
m_last_action	despot/include/despot/core/pomdp.h	/^	int m_last_action;$/;"	m	class:despot::DSPOMDP
m_leg_idx_set	villa_navi_service/include/navi_service_node.h	/^	std::vector<int>    m_leg_idx_set;$/;"	m	class:villa_navi_srv
m_leg_updateiter	villa_navi_service/include/navi_service_node.h	/^	int m_leg_updateiter;$/;"	m	class:villa_navi_srv
m_localoccupancy	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<int>       m_localoccupancy;$/;"	m	class:Dynamic_Manager
m_localoccupancy	navi_mdp/include/MDPmanager.h	/^ 	vector<int>       m_localoccupancy;$/;"	m	class:MDPManager
m_node	despot/include/despot/evaluator.h	/^	ros::NodeHandle   m_node;$/;"	m	class:despot::Evaluator
m_node	navi_mdp/include/Dynamic_Manager.h	/^	ros::NodeHandle  m_node;$/;"	m	class:Dynamic_Manager
m_node	navi_mdp/include/MDPmanager.h	/^	ros::NodeHandle  m_node;$/;"	m	class:MDPManager
m_node	navi_mdp/include/PathManager.h	/^ 	ros::NodeHandle m_node;$/;"	m	class:PathManager
m_numofhuman	villa_navi_service/include/navi_service_node.h	/^	int m_numofhuman;$/;"	m	class:villa_navi_srv
m_prob_occupancy	villa_navi_service/include/navi_service_node.h	/^	std::vector<double> m_prob_occupancy;$/;"	m	class:villa_navi_srv
m_receiveiter	villa_navi_service/include/navi_service_node.h	/^	int m_receiveiter;$/;"	m	class:villa_navi_srv
m_service	human_filter/include/people_tracking_filter/service_test.h	/^  ros::ServiceServer m_service;$/;"	m	class:Edgeleg_manager_srv
m_static_obs	navi_mdp/include/Dynamic_Manager.h	/^ 	vector<int>		  m_static_obs;$/;"	m	class:Dynamic_Manager
m_static_obs	navi_mdp/include/MDPmanager.h	/^ 	vector<int>		  m_static_obs;$/;"	m	class:MDPManager
m_updateiter	villa_navi_service/include/navi_service_node.h	/^	int m_updateiter;$/;"	m	class:villa_navi_srv
m_viewupdateiter	villa_navi_service/include/navi_service_node.h	/^	int m_viewupdateiter;$/;"	m	class:villa_navi_srv
m_xsize	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	int m_xsize, m_ysize;$/;"	m	class:despot::Navigation
m_xsize	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int m_xsize, m_ysize;$/;"	m	class:despot::Navigation
m_yolo_idx_set	villa_navi_service/include/navi_service_node.h	/^	std::vector<int>    m_yolo_idx_set;$/;"	m	class:villa_navi_srv
m_yolo_recieveiter	villa_navi_service/include/navi_service_node.h	/^	int m_yolo_recieveiter;$/;"	m	class:villa_navi_srv
m_ysize	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	int m_xsize, m_ysize;$/;"	m	class:despot::Navigation
m_ysize	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int m_xsize, m_ysize;$/;"	m	class:despot::Navigation
main	despot/examples/cpp_models/adventurer/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	despot/examples/cpp_models/bridge/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	despot/examples/cpp_models/chain/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	despot/examples/cpp_models/localnavigation/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	despot/examples/cpp_models/navigation/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	despot/examples/cpp_models/pathfollowing/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	despot/examples/cpp_models/pocman/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	despot/examples/cpp_models/reg_demo/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	despot/examples/cpp_models/rock_sample/src/fvrs/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	despot/examples/cpp_models/rock_sample/src/rock_sample/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	despot/examples/cpp_models/simpleNavi/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	despot/examples/cpp_models/simple_rock_sample/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	despot/examples/cpp_models/tag/src/laser_tag/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	despot/examples/cpp_models/tag/src/noisy_laser_tag/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	despot/examples/cpp_models/tag/src/tag/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	despot/examples/cpp_models/tiger/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	despot/examples/pomdpx_models/src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	edge_leg_detector/src/detector.cpp	/^int main(int argc, char **argv){$/;"	f
main	edge_leg_detector/src/edge_leg_detector/detector.cpp	/^int main(int argc, char **argv){$/;"	f
main	human_filter/src/edge_leg_filter_node.cpp	/^int main(int argc, char **argv)$/;"	f
main	human_filter/src/followme_action.cpp	/^int main(int argc, char **argv)$/;"	f
main	human_filter/src/people_tracking_node.cpp	/^int main(int argc, char **argv)$/;"	f
main	human_filter/src/service_test.cpp	/^int main(int argc, char **argv)$/;"	f
main	navi_mdp/src/base_actionlib.cpp	/^int main(int argc, char **argv)$/;"	f
main	navi_mdp/src/base_conti_actionlib.cpp	/^int main(int argc, char **argv)$/;"	f
main	navi_mdp/src/dynamic_planner.cpp	/^int main(int argc, char **argv)$/;"	f
main	navi_mdp/src/follow_test.cpp	/^int main(int argc, char **argv)$/;"	f
main	navi_mdp/src/global_planner.cpp	/^int main(int argc, char **argv)$/;"	f
main	ros-keyboard/src/main.cpp	/^int main(int argc, char** argv)$/;"	f
main	villa_navi_service/src/service_test.cpp	/^int main(int argc, char **argv)$/;"	f
map_	despot/include/despot/pomdpx/parser/function.h	/^  std::vector<std::map<int, double> > map_; \/\/ map_[parents][child]$/;"	m	class:despot::Function
map_index_of_human_cells_to_prob	villa_navi_service/include/navi_service_node.h	/^	std::map<int, float> map_index_of_human_cells_to_prob;$/;"	m	class:villa_navi_srv
map_step	navi_mdp/include/MapParam.h	/^    double   		  	map_step;$/;"	m	class:MapParam
marker	navi_mdp/scripts/human_marker.py	/^   marker = Marker()$/;"	v
marker2	navi_mdp/scripts/human_marker.py	/^   marker2 = Marker()$/;"	v
marker3	navi_mdp/scripts/human_marker.py	/^   marker3 = Marker()$/;"	v
markerArray	navi_mdp/scripts/human_marker.py	/^markerArray = MarkerArray()$/;"	v
marker_	despot/include/despot/util/logging.h	/^		std::string marker_;$/;"	m	class:despot::log_ostream::log_buf
markers_	despot/include/despot/util/logging.h	/^	static const std::string markers_[];$/;"	m	class:despot::logging
markers_	despot/src/util/logging.cpp	/^const string logging::markers_[] = { "NONE", "ERROR", "WARN", "INFO", "DEBUG",$/;"	m	class:despot::logging	file:
max_goal_reward_	despot/examples/cpp_models/adventurer/src/adventurer.h	/^	double max_goal_reward_;$/;"	m	class:despot::Adventurer
max_iter_	despot/src/pomdpx/pomdpx.cpp	/^	int max_iter_;$/;"	m	class:despot::POMDPXBelief	file:
max_line_in_block	despot/include/despot/util/optionparser.h	/^		int max_line_in_block; \/\/!< Greatest index of a line within the block. This is the number of \\\\v within the cell with the most \\\\vs.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
max_off_yolo_laser	navi_mdp/include/Dynamic_Manager.h	58;"	d
max_policy_sim_len	despot/include/despot/config.h	/^	int max_policy_sim_len; \/\/ Maximum number of steps for simulating the default policy$/;"	m	struct:despot::Config
max_reward_action_	despot/include/despot/pomdpx/pomdpx.h	/^	ValuedAction max_reward_action_;$/;"	m	class:despot::POMDPX
maxiter	navi_mdp/include/Dynamic_Manager.h	/^ 	int maxiter;$/;"	m	class:Dynamic_Manager
maxiter	navi_mdp/include/MDPmanager.h	/^ 	int maxiter;$/;"	m	class:MDPManager
maze_	despot/examples/cpp_models/pocman/src/pocman.h	/^	Grid<int> maze_;$/;"	m	class:despot::Pocman
mdp_pathCallback	navi_mdp/src/base_conti_actionlib.cpp	/^void mdp_pathCallback(const nav_msgs::Path::ConstPtr& msg)$/;"	f
mdp_policy_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	mutable std::vector<ValuedAction> mdp_policy_;$/;"	m	class:despot::BaseRockSample
mdp_policy_	despot/examples/cpp_models/simpleNavi/src/simpleNavi.h	/^	mutable std::vector<ValuedAction> mdp_policy_;$/;"	m	class:despot::SimpleNavi
mdp_policy_	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^	mutable std::vector<ValuedAction> mdp_policy_;$/;"	m	class:despot::SimpleRockSample
mdp_state	despot/examples/cpp_models/chain/src/chain.h	/^	int mdp_state;$/;"	m	class:despot::ChainState
mdp_transitions_	despot/examples/cpp_models/chain/src/chain.h	/^  std::vector<std::vector<std::vector<double> > > mdp_transitions_; \/\/mdp_transitions_[s1][a][s2] = P(s2|s1,a)$/;"	m	class:despot::ChainState
mdppath_callback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::mdppath_callback(const nav_msgs::Path::ConstPtr & msg)$/;"	f	class:Dynamic_Manager
meas_cloud_	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  sensor_msgs::PointCloud  meas_cloud_;$/;"	m	class:Edgeleg_manager
meas_cloud_	human_filter/include/people_tracking_filter/followme_action.h	/^  sensor_msgs::PointCloud  meas_cloud_;$/;"	m	class:Edgeleg_manager_action
meas_cloud_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  sensor_msgs::PointCloud  meas_cloud_;$/;"	m	class:estimation::PeopleTrackingNode
meas_cloud_	human_filter/include/people_tracking_filter/service_test.h	/^  sensor_msgs::PointCloud  meas_cloud_;$/;"	m	class:Edgeleg_manager_srv
meas_model_	human_filter/include/people_tracking_filter/detector_particle.h	/^  BFL::MeasModelVector                                      meas_model_;$/;"	m	class:estimation::DetectorParticle
meas_model_	human_filter/include/people_tracking_filter/tracker_kalman.h	/^  BFL::LinearAnalyticMeasurementModelGaussianUncertainty* meas_model_;$/;"	m	class:estimation::TrackerKalman
meas_model_	human_filter/include/people_tracking_filter/tracker_particle.h	/^  BFL::MeasModelPos                                         meas_model_;$/;"	m	class:estimation::TrackerParticle
meas_noise_	human_filter/include/people_tracking_filter/measmodel_pos.h	/^  GaussianVector meas_noise_;$/;"	m	class:BFL::MeasPdfPos
meas_noise_	human_filter/include/people_tracking_filter/measmodel_vector.h	/^  GaussianVector meas_noise_;$/;"	m	class:BFL::MeasPdfVector
meas_pdf_	human_filter/include/people_tracking_filter/tracker_kalman.h	/^  BFL::LinearAnalyticConditionalGaussian*                 meas_pdf_;$/;"	m	class:estimation::TrackerKalman
meas_visualize_counter_	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  unsigned int meas_visualize_counter_;$/;"	m	class:Edgeleg_manager
meas_visualize_counter_	human_filter/include/people_tracking_filter/followme_action.h	/^  unsigned int meas_visualize_counter_;$/;"	m	class:Edgeleg_manager_action
meas_visualize_counter_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  unsigned int meas_visualize_counter_;$/;"	m	class:estimation::PeopleTrackingNode
meas_visualize_counter_	human_filter/include/people_tracking_filter/service_test.h	/^  unsigned int meas_visualize_counter_;$/;"	m	class:Edgeleg_manager_srv
memory_pool_	despot/examples/cpp_models/adventurer/src/adventurer.h	/^	mutable MemoryPool<AdventurerState> memory_pool_;$/;"	m	class:despot::Adventurer
memory_pool_	despot/examples/cpp_models/bridge/src/bridge.h	/^	mutable MemoryPool<BridgeState> memory_pool_;$/;"	m	class:despot::Bridge
memory_pool_	despot/examples/cpp_models/chain/src/chain.h	/^	mutable MemoryPool<ChainState> memory_pool_;$/;"	m	class:despot::Chain
memory_pool_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	mutable MemoryPool<NavigationState> memory_pool_;$/;"	m	class:despot::Navigation
memory_pool_	despot/examples/cpp_models/navigation/src/navigation.h	/^	mutable MemoryPool<NavigationState> memory_pool_;$/;"	m	class:despot::Navigation
memory_pool_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	mutable MemoryPool<NavigationState> memory_pool_;$/;"	m	class:despot::Navigation
memory_pool_	despot/examples/cpp_models/pocman/src/pocman.h	/^	mutable MemoryPool<PocmanState> memory_pool_;$/;"	m	class:despot::Pocman
memory_pool_	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^	mutable MemoryPool<RegDemoState> memory_pool_;$/;"	m	class:despot::RegDemo
memory_pool_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	mutable MemoryPool<RockSampleState> memory_pool_;$/;"	m	class:despot::BaseRockSample
memory_pool_	despot/examples/cpp_models/simpleNavi/src/simpleNavi.h	/^	mutable MemoryPool<SimpleState> memory_pool_;$/;"	m	class:despot::SimpleNavi
memory_pool_	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^	mutable MemoryPool<SimpleState> memory_pool_;$/;"	m	class:despot::SimpleRockSample
memory_pool_	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	mutable MemoryPool<TagState> memory_pool_;$/;"	m	class:despot::BaseTag
memory_pool_	despot/examples/cpp_models/tiger/src/tiger.h	/^	mutable MemoryPool<TigerState> memory_pool_;$/;"	m	class:despot::Tiger
memory_pool_	despot/include/despot/pomdpx/pomdpx.h	/^	mutable MemoryPool<POMDPXState> memory_pool_;$/;"	m	class:despot::POMDPX
message_sequencer_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  message_filters::TimeSequencer<people_msgs::PositionMeasurement>*  message_sequencer_;$/;"	m	class:estimation::PeopleTrackingNode
millis	despot/include/despot/util/timer.h	/^	int millis;$/;"	m	class:despot::Timer
min_reward_action_	despot/include/despot/pomdpx/pomdpx.h	/^	ValuedAction min_reward_action_;$/;"	m	class:despot::POMDPX
min_two_leg_dist	navi_mdp/include/Dynamic_Manager.h	57;"	d
model	despot/include/despot/evaluator.h	/^	inline DSPOMDP* model() {$/;"	f	class:despot::Evaluator
model	despot/include/despot/evaluator.h	/^	inline void model(DSPOMDP* m) {$/;"	f	class:despot::Evaluator
model_	despot/include/despot/core/belief.h	/^	const DSPOMDP* model_;$/;"	m	class:despot::Belief
model_	despot/include/despot/core/solver.h	/^	const DSPOMDP* model_;$/;"	m	class:despot::Solver
model_	despot/include/despot/core/upper_bound.h	/^	const DSPOMDP* model_;$/;"	m	class:despot::LookaheadUpperBound
model_	despot/include/despot/core/upper_bound.h	/^	const DSPOMDP* model_;$/;"	m	class:despot::TrivialBeliefUpperBound
model_	despot/include/despot/core/upper_bound.h	/^	const DSPOMDP* model_;$/;"	m	class:despot::TrivialParticleUpperBound
model_	despot/include/despot/core/upper_bound.h	/^	const MDP* model_;$/;"	m	class:despot::MDPUpperBound
model_	despot/include/despot/evaluator.h	/^	DSPOMDP* model_;$/;"	m	class:despot::Evaluator
model_	despot/include/despot/solver/aems.h	/^	const BeliefMDP* model_;$/;"	m	class:despot::AEMS
model_	despot/include/despot/solver/pomcp.h	/^	const DSPOMDP* model_;$/;"	m	class:despot::POMCPPrior
model_	despot/src/pomdpx/pomdpx.cpp	/^	const POMDPX* model_;$/;"	m	class:despot::POMDPXBelief	file:
mu_	human_filter/include/people_tracking_filter/gaussian_pos_vel.h	/^  StatePosVel mu_, sigma_;$/;"	m	class:BFL::GaussianPosVel
mu_	human_filter/include/people_tracking_filter/gaussian_vector.h	/^  tf::Vector3 mu_, sigma_;$/;"	m	class:BFL::GaussianVector
mu_	human_filter/include/people_tracking_filter/uniform_vector.h	/^  tf::Vector3 mu_, size_;$/;"	m	class:BFL::UniformVector
mutex	edge_leg_detector/src/detector.cpp	/^boost::mutex mutex;$/;"	v
mutex	edge_leg_detector/src/edge_leg_detector/detector.cpp	/^boost::mutex mutex;$/;"	v
name	despot/include/despot/pomdpx/parser/variable.h	/^	inline const std::string& name() const {$/;"	f	class:despot::NamedVar
name	despot/include/despot/pomdpx/parser/variable.h	/^	inline void name(std::string str) {$/;"	f	class:despot::NamedVar
name	despot/include/despot/util/optionparser.h	/^	const char* name;$/;"	m	class:despot::option::Option
name	despot/include/despot/util/tinyxml/tinyxml.h	/^	TIXML_STRING name;TIXML_STRING value;$/;"	m	class:despot::util::tinyxml::TiXmlAttribute
name_	despot/include/despot/pomdpx/parser/variable.h	/^	std::string name_;$/;"	m	class:despot::NamedVar
name_	human_filter/include/people_tracking_filter/tracker.h	/^  std::string name_;$/;"	m	class:estimation::Tracker
namelen	despot/include/despot/util/optionparser.h	/^	int namelen;$/;"	m	class:despot::option::Option
nav_client	navi_mdp/include/PathManager.h	/^ 	ros::ServiceClient nav_client;$/;"	m	class:PathManager
nav_cmd_pub	navi_mdp/include/PathManager.h	/^	ros::Publisher nav_cmd_pub;$/;"	m	class:PathManager
navigation_	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^		const Navigation* navigation_;$/;"	m	class:despot::LocalApproxScenarioUpperBound	file:
navigation_	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	const Navigation* navigation_;$/;"	m	class:despot::LocalLegalParticleLowerBound	file:
navigation_	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	const Navigation* navigation_;$/;"	m	class:despot::LocalNaviPOMCPPrior	file:
navigation_	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	const Navigation* navigation_;$/;"	m	class:despot::LocalnaviSmartPolicy	file:
navigation_	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	const Navigation* navigation_;$/;"	m	class:despot::LocalnavigationParticleUpperBound	file:
navigation_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^		const Navigation* navigation_;$/;"	m	class:despot::LocalApproxScenarioUpperBound	file:
navigation_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	const Navigation* navigation_;$/;"	m	class:despot::LocalLegalParticleLowerBound	file:
navigation_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	const Navigation* navigation_;$/;"	m	class:despot::LocalNaviPOMCPPrior	file:
navigation_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	const Navigation* navigation_;$/;"	m	class:despot::LocalnaviSmartPolicy	file:
navigation_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	const Navigation* navigation_;$/;"	m	class:despot::LocalnavigationParticleUpperBound	file:
next	despot/include/despot/util/optionparser.h	/^		bool next() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
next	despot/include/despot/util/optionparser.h	/^	Option* next() {$/;"	f	class:despot::option::Option
next	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* next;$/;"	m	class:despot::util::tinyxml::TiXmlAttribute
next	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* next;$/;"	m	class:despot::util::tinyxml::TiXmlNode
nextRow	despot/include/despot/util/optionparser.h	/^		bool nextRow() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
nextTable	despot/include/despot/util/optionparser.h	/^		bool nextTable() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
next_	despot/include/despot/util/optionparser.h	/^	Option* next_;$/;"	m	class:despot::option::Option
nextwrap	despot/include/despot/util/optionparser.h	/^	Option* nextwrap() {$/;"	f	class:despot::option::Option
nh_	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::NodeHandle nh_;$/;"	m	class:Edgeleg_manager
nh_	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::NodeHandle nh_;$/;"	m	class:Edgeleg_manager_action
nh_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  ros::NodeHandle nh_;$/;"	m	class:estimation::PeopleTrackingNode
nh_	human_filter/include/people_tracking_filter/service_test.h	/^  ros::NodeHandle nh_;$/;"	m	class:Edgeleg_manager_srv
node	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	ros::NodeHandle node;$/;"	m	class:despot::Navigation
node	despot/examples/cpp_models/navigation/src/navigation.h	/^	ros::NodeHandle node;$/;"	m	class:despot::Navigation
node	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	ros::NodeHandle node;$/;"	m	class:despot::Navigation
node	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* node;$/;"	m	class:despot::util::tinyxml::TiXmlHandle
noise	despot/include/despot/config.h	/^	double noise;$/;"	m	struct:despot::Config
noise_	human_filter/include/people_tracking_filter/sysmodel_pos_vel.h	/^  GaussianPosVel noise_;$/;"	m	class:BFL::SysPdfPosVel
noise_	human_filter/include/people_tracking_filter/sysmodel_vector.h	/^  GaussianVector noise_;$/;"	m	class:BFL::SysPdfVector
noise_sigma_	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.h	/^	double noise_sigma_;$/;"	m	class:despot::LaserTag
noise_sigma_	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.h	/^	double noise_sigma_;$/;"	m	class:despot::NoisyLaserTag
noisy_transition_funcs_	despot/include/despot/pomdpx/parser/parser.h	/^  std::vector<CPT*> noisy_transition_funcs_;$/;"	m	class:despot::Parser
nonOption	despot/include/despot/util/optionparser.h	/^	const char* nonOption(int i) {$/;"	f	class:despot::option::Parser
nonOptions	despot/include/despot/util/optionparser.h	/^	const char** nonOptions() {$/;"	f	class:despot::option::Parser
nonOptionsCount	despot/include/despot/util/optionparser.h	/^	int nonOptionsCount() {$/;"	f	class:despot::option::Parser
nonop_args	despot/include/despot/util/optionparser.h	/^	const char** nonop_args; \/\/!< @internal @brief see nonOptions()$/;"	m	class:despot::option::Parser
nonop_count	despot/include/despot/util/optionparser.h	/^	int nonop_count; \/\/!< @internal @brief see nonOptionsCount()$/;"	m	class:despot::option::Parser
npos	despot/include/despot/util/tinyxml/tinystr.h	/^	static const size_type npos; \/\/ = -1;$/;"	m	class:despot::util::tinyxml::TiXmlString
npos	despot/src/util/tinyxml/tinystr.cpp	/^const TiXmlString::size_type TiXmlString::npos =$/;"	m	class:despot::util::tinyxml::TiXmlString	file:
nullrep_	despot/include/despot/util/tinyxml/tinystr.h	/^	static Rep nullrep_;$/;"	m	class:despot::util::tinyxml::TiXmlString
nullrep_	despot/src/util/tinyxml/tinystr.cpp	/^TiXmlString::Rep TiXmlString::nullrep_ = { 0, 0, { '\\0' } };$/;"	m	class:despot::util::tinyxml::TiXmlString	file:
numParticlesGet	human_filter/src/mcpdf_pos_vel.cpp	/^MCPdfPosVel::numParticlesGet() const$/;"	f	class:MCPdfPosVel
numParticlesGet	human_filter/src/mcpdf_vector.cpp	/^MCPdfVector::numParticlesGet() const$/;"	f	class:MCPdfVector
num_allocated	despot/include/despot/util/memorypool.h	/^	int num_allocated() const {$/;"	f	class:despot::MemoryPool
num_allocated_	despot/include/despot/util/memorypool.h	/^	int num_allocated_;$/;"	m	class:despot::MemoryPool
num_assigned_seeds_	despot/include/despot/util/seeds.h	/^	static int num_assigned_seeds_;$/;"	m	class:despot::Seeds
num_assigned_seeds_	despot/src/util/seeds.cpp	/^int Seeds::num_assigned_seeds_ = 0;$/;"	m	class:despot::Seeds	file:
num_cols	despot/src/util/floor.cpp	/^int Floor::num_cols() const {$/;"	f	class:despot::Floor
num_cols_	despot/include/despot/util/floor.h	/^	int num_rows_, num_cols_;$/;"	m	class:despot::Floor
num_expanded_nodes	despot/include/despot/core/solver.h	/^	int num_expanded_nodes;$/;"	m	struct:despot::SearchStatistics
num_food	despot/examples/cpp_models/pocman/src/pocman.h	/^	int num_food;$/;"	m	class:despot::PocmanState
num_ghosts_	despot/examples/cpp_models/pocman/src/pocman.h	/^	int num_ghosts_, passage_y_, ghost_range_, smell_range_, hear_range_;$/;"	m	class:despot::Pocman
num_goals_	despot/examples/cpp_models/adventurer/src/adventurer.h	/^	int num_goals_;$/;"	m	class:despot::Adventurer
num_of_completed_runs	despot/include/despot/evaluator.h	/^	std::vector<int> num_of_completed_runs;$/;"	m	class:despot::EvalLog
num_of_detected_human	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  int num_of_detected_human;$/;"	m	class:Edgeleg_manager
num_of_detected_human	human_filter/include/people_tracking_filter/followme_action.h	/^  int num_of_detected_human;$/;"	m	class:Edgeleg_manager_action
num_of_detected_human	human_filter/include/people_tracking_filter/service_test.h	/^  int num_of_detected_human;$/;"	m	class:Edgeleg_manager_srv
num_of_detected_human_yolo	navi_mdp/include/Dynamic_Manager.h	/^ 	int  			  num_of_detected_human_yolo;$/;"	m	class:Dynamic_Manager
num_of_detected_human_yolo	navi_mdp/include/MDPmanager.h	/^ 	int  			  num_of_detected_human_yolo;$/;"	m	class:MDPManager
num_particles	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^int NavigationBelief::num_particles = 5000;$/;"	m	class:despot::NavigationBelief	file:
num_particles	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	static int num_particles;$/;"	m	class:despot::NavigationBelief
num_particles	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^int NavigationBelief::num_particles = 5000;$/;"	m	class:despot::NavigationBelief	file:
num_particles	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	static int num_particles;$/;"	m	class:despot::NavigationBelief
num_particles	despot/examples/cpp_models/pocman/src/pocman.cpp	/^int PocmanBelief::num_particles = 50000;$/;"	m	class:despot::PocmanBelief	file:
num_particles	despot/examples/cpp_models/pocman/src/pocman.h	/^	static int num_particles;$/;"	m	class:despot::PocmanBelief
num_particles_	despot/include/despot/core/belief.h	/^	int num_particles_;$/;"	m	class:despot::ParticleBelief
num_particles_	human_filter/include/people_tracking_filter/detector_particle.h	/^  unsigned int num_particles_;$/;"	m	class:estimation::DetectorParticle
num_particles_	human_filter/include/people_tracking_filter/tracker_particle.h	/^  unsigned int num_particles_;$/;"	m	class:estimation::TrackerParticle
num_particles_after_search	despot/include/despot/core/solver.h	/^	int num_particles_after_search;$/;"	m	struct:despot::SearchStatistics
num_particles_before_search	despot/include/despot/core/solver.h	/^	int num_particles_before_search;$/;"	m	struct:despot::SearchStatistics
num_particles_tracker	human_filter/src/edge_leg_filter_node.cpp	/^static const unsigned int num_particles_tracker      = 1000;$/;"	v	file:
num_particles_tracker	human_filter/src/followme_action.cpp	/^static const unsigned int num_particles_tracker      = 1000;$/;"	v	file:
num_particles_tracker	human_filter/src/people_tracking_node.cpp	/^static const unsigned int num_particles_tracker      = 1000;$/;"	v	file:
num_particles_tracker	human_filter/src/service_test.cpp	/^static const unsigned int num_particles_tracker      = 1000;$/;"	v	file:
num_peds_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	int num_peds_, passage_y_, pedes_range_;$/;"	m	class:despot::Navigation
num_peds_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int num_peds_, passage_y_, pedes_range_;$/;"	m	class:despot::Navigation
num_policy_nodes	despot/include/despot/core/solver.h	/^	int num_policy_nodes;$/;"	m	struct:despot::SearchStatistics
num_rocks_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	int size_, num_rocks_;$/;"	m	class:despot::BaseRockSample
num_rows	despot/src/util/floor.cpp	/^int Floor::num_rows() const {$/;"	f	class:despot::Floor
num_rows_	despot/include/despot/util/floor.h	/^	int num_rows_, num_cols_;$/;"	m	class:despot::Floor
num_scenarios	despot/include/despot/config.h	/^	int num_scenarios;$/;"	m	struct:despot::Config
num_tree_nodes	despot/include/despot/core/solver.h	/^	int num_tree_nodes;$/;"	m	struct:despot::SearchStatistics
num_tree_particles	despot/include/despot/core/solver.h	/^	int num_tree_particles;$/;"	m	struct:despot::SearchStatistics
num_trials	despot/include/despot/core/solver.h	/^	int num_trials;$/;"	m	struct:despot::SearchStatistics
obs_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<OBS_TYPE> obs_;		 \/\/ obs_[y * xsize_ + x]$/;"	m	class:despot::Navigation
obs_	despot/examples/cpp_models/navigation/src/navigation.h	/^	std::vector<OBS_TYPE> obs_; \/\/ obs_[y * xsize_ + x]$/;"	m	class:despot::Navigation
obs_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<OBS_TYPE> obs_;		 \/\/ obs_[y * xsize_ + x]$/;"	m	class:despot::Navigation
obs_	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^	std::vector<OBS_TYPE> obs_;$/;"	m	class:despot::RegDemo
obs_	despot/examples/cpp_models/tag/src/tag/tag.h	/^  std::vector<OBS_TYPE> obs_;$/;"	m	class:despot::Tag
obs_funcs_	despot/include/despot/pomdpx/parser/parser.h	/^	std::vector<CPT*> obs_funcs_;$/;"	m	class:despot::Parser
obs_noise_	despot/examples/cpp_models/adventurer/src/adventurer.h	/^	double obs_noise_;$/;"	m	class:despot::Adventurer
obs_vars_	despot/include/despot/pomdpx/parser/parser.h	/^	mutable std::vector<ObsVar> obs_vars_;$/;"	m	class:despot::Parser
observations_	despot/include/despot/core/history.h	/^	std::vector<OBS_TYPE> observations_;$/;"	m	class:despot::History
observed	despot/include/despot/pomdpx/parser/variable.h	/^	inline const bool observed() const {$/;"	f	class:despot::StateVar
observed	despot/include/despot/pomdpx/parser/variable.h	/^	inline void observed(bool o) {$/;"	f	class:despot::StateVar
observed_	despot/include/despot/pomdpx/parser/variable.h	/^	bool observed_;$/;"	m	class:despot::StateVar
obsmap_Pub	navi_mdp/include/Dynamic_Manager.h	/^	ros::Publisher   obsmap_Pub;$/;"	m	class:Dynamic_Manager
obsmap_Pub	navi_mdp/include/MDPmanager.h	/^	ros::Publisher   obsmap_Pub;$/;"	m	class:MDPManager
odometryInput	navi_mdp/scripts/base_move.py	/^    def odometryInput(self, data):$/;"	m	class:BaseMoveCBA
op_count	despot/include/despot/util/optionparser.h	/^	int op_count; \/\/!< @internal @brief see optionsCount()$/;"	m	class:despot::option::Parser
operator !=	despot/include/despot/util/tinyxml/tinystr.h	/^inline bool operator !=(const TiXmlString & a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator !=	despot/include/despot/util/tinyxml/tinystr.h	/^inline bool operator !=(const TiXmlString & a, const char* b) {$/;"	f	namespace:despot::util::tinyxml
operator !=	despot/include/despot/util/tinyxml/tinystr.h	/^inline bool operator !=(const char* a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator !=	despot/src/util/coord.cpp	/^bool operator!=(const Coord& first, const Coord& second) {$/;"	f	namespace:despot
operator &	navi_mdp/include/srBSpline.h	/^	const srBSpline* operator&() const { return this; }$/;"	f	class:srBSpline
operator &	navi_mdp/include/srBSpline.h	/^	srBSpline* operator&() { return this; }$/;"	f	class:srBSpline
operator ()	despot/include/despot/core/history.h	/^	bool operator()(const despot::History& h1, const despot::History& h2) const {$/;"	f	struct:std::less
operator ()	despot/include/despot/core/pomdp.h	/^	State* operator()(int state_id, double weight) {$/;"	f	class:despot::State
operator ()	despot/include/despot/util/grid.h	/^	T& operator()(const Coord& coord) {$/;"	f	class:despot::Grid
operator ()	despot/include/despot/util/grid.h	/^	T& operator()(int index) {$/;"	f	class:despot::Grid
operator ()	despot/include/despot/util/grid.h	/^	T& operator()(int x, int y) {$/;"	f	class:despot::Grid
operator ()	despot/include/despot/util/grid.h	/^	const T& operator()(const Coord& coord) const {$/;"	f	class:despot::Grid
operator ()	despot/include/despot/util/grid.h	/^	const T& operator()(int index) const {$/;"	f	class:despot::Grid
operator ()	despot/include/despot/util/grid.h	/^	const T& operator()(int x, int y) const {$/;"	f	class:despot::Grid
operator ()	despot/include/despot/util/optionparser.h	/^		virtual void operator()(const char* str, int size) {$/;"	f	struct:despot::option::PrintUsageImplementation::FunctionWriter
operator ()	despot/include/despot/util/optionparser.h	/^		virtual void operator()(const char* str, int size) {$/;"	f	struct:despot::option::PrintUsageImplementation::OStreamWriter
operator ()	despot/include/despot/util/optionparser.h	/^		virtual void operator()(const char* str, int size) {$/;"	f	struct:despot::option::PrintUsageImplementation::StreamWriter
operator ()	despot/include/despot/util/optionparser.h	/^		virtual void operator()(const char* str, int size) {$/;"	f	struct:despot::option::PrintUsageImplementation::SyscallWriter
operator ()	despot/include/despot/util/optionparser.h	/^		virtual void operator()(const char* str, int size) {$/;"	f	struct:despot::option::PrintUsageImplementation::TemporaryWriter
operator ()	despot/include/despot/util/optionparser.h	/^		virtual void operator()(const char*, int) {$/;"	f	struct:despot::option::PrintUsageImplementation::IStringWriter
operator *	despot/src/util/coord.cpp	/^Coord Coord::operator*(int v) const {$/;"	f	class:despot::Coord
operator +	despot/src/util/coord.cpp	/^const Coord operator+(const Coord& first, const Coord& second) {$/;"	f	namespace:despot
operator +	despot/src/util/tinyxml/tinystr.cpp	/^TiXmlString operator +(const TiXmlString & a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator +	despot/src/util/tinyxml/tinystr.cpp	/^TiXmlString operator +(const TiXmlString & a, const char* b) {$/;"	f	namespace:despot::util::tinyxml
operator +	despot/src/util/tinyxml/tinystr.cpp	/^TiXmlString operator +(const char* a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator +	human_filter/include/people_tracking_filter/state_pos_vel.h	/^  StatePosVel operator + (const StatePosVel& s)$/;"	f	class:BFL::StatePosVel
operator +=	despot/include/despot/util/tinyxml/tinystr.h	/^	TiXmlString& operator +=(char single) {$/;"	f	class:despot::util::tinyxml::TiXmlString
operator +=	despot/include/despot/util/tinyxml/tinystr.h	/^	TiXmlString& operator +=(const TiXmlString & suffix) {$/;"	f	class:despot::util::tinyxml::TiXmlString
operator +=	despot/include/despot/util/tinyxml/tinystr.h	/^	TiXmlString& operator +=(const char * suffix) {$/;"	f	class:despot::util::tinyxml::TiXmlString
operator +=	despot/src/util/coord.cpp	/^Coord& operator+=(Coord& left, const Coord& right) {$/;"	f	namespace:despot
operator +=	human_filter/include/people_tracking_filter/state_pos_vel.h	/^  StatePosVel& operator += (const StatePosVel& s)$/;"	f	class:BFL::StatePosVel
operator <	despot/include/despot/util/tinyxml/tinystr.h	/^inline bool operator <(const TiXmlString & a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator <	despot/include/despot/util/tinyxml/tinyxml.h	/^	bool operator<(const TiXmlAttribute& rhs) const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
operator <	despot/include/despot/util/util.h	/^bool operator<(const std::vector<T>& first, const std::vector<T>& second) {$/;"	f	namespace:despot
operator <<	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.cpp	/^ostream& operator<<(ostream& os, const LaserTag& lasertag) {$/;"	f	namespace:despot
operator <<	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.cpp	/^ostream& operator<<(ostream& os, const NoisyLaserTag& lasertag) {$/;"	f	namespace:despot
operator <<	despot/include/despot/core/history.h	/^	friend std::ostream& operator<<(std::ostream& os, const History& history) {$/;"	f	class:despot::History
operator <<	despot/include/despot/util/tinyxml/tinystr.h	/^	TiXmlOutStream & operator <<(const TiXmlString & in) {$/;"	f	class:despot::util::tinyxml::TiXmlOutStream
operator <<	despot/include/despot/util/tinyxml/tinystr.h	/^	TiXmlOutStream & operator <<(const char * in) {$/;"	f	class:despot::util::tinyxml::TiXmlOutStream
operator <<	despot/include/despot/util/util.h	/^std::ostream& operator<<(std::ostream& os, std::pair<K, V> p) {$/;"	f	namespace:despot
operator <<	despot/include/despot/util/util.h	/^std::ostream& operator<<(std::ostream& os, std::vector<T> vec) {$/;"	f	namespace:despot
operator <<	despot/src/core/belief.cpp	/^ostream& operator<<(ostream& os, const Belief& belief) {$/;"	f	namespace:despot
operator <<	despot/src/core/lower_bound.cpp	/^ostream& operator<<(ostream& os, const ValuedAction& va) {$/;"	f	namespace:despot
operator <<	despot/src/core/pomdp.cpp	/^ostream& operator<<(ostream& os, const State& state) {$/;"	f	namespace:despot
operator <<	despot/src/core/solver.cpp	/^ostream& operator<<(ostream& os, const SearchStatistics& statistics) {$/;"	f	namespace:despot
operator <<	despot/src/pomdpx/parser/function.cpp	/^ostream& operator<<(ostream& os, const Function& func) {$/;"	f	namespace:despot
operator <<	despot/src/pomdpx/parser/function.cpp	/^ostream& operator<<(std::ostream& os, const HierarchyCPT& hcpt) {$/;"	f	namespace:despot
operator <<	despot/src/pomdpx/parser/parser.cpp	/^ostream& operator<<(ostream& out, const Parser& parser) {$/;"	f	namespace:despot
operator <<	despot/src/pomdpx/parser/variable.cpp	/^ostream& operator<<(ostream& os, const StateVar& var) {$/;"	f	namespace:despot
operator <<	despot/src/pomdpx/parser/variable.cpp	/^ostream& operator<<(ostream& os, const Variable& var) {$/;"	f	namespace:despot
operator <<	despot/src/pomdpx/parser/variable.cpp	/^ostream& operator<<(std::ostream& os, const NamedVar& var) {$/;"	f	namespace:despot
operator <<	despot/src/random_streams.cpp	/^ostream& operator<<(ostream& os, const RandomStreams& stream) {$/;"	f	namespace:despot
operator <<	despot/src/util/coord.cpp	/^ostream& operator<<(ostream& os, const Coord& coord) {$/;"	f	namespace:despot
operator <<	despot/src/util/tinyxml/tinyxml.cpp	/^std::ostream& operator<< (std::ostream & out, const TiXmlNode & base)$/;"	f	namespace:despot::util::tinyxml
operator <<	despot/src/util/tinyxml/tinyxml.cpp	/^std::string& operator<< (std::string& out, const TiXmlNode& base )$/;"	f	namespace:despot::util::tinyxml
operator <<	human_filter/include/people_tracking_filter/state_pos_vel.h	/^  friend std::ostream& operator<< (std::ostream& os, const StatePosVel& s)$/;"	f	class:BFL::StatePosVel
operator <<	human_filter/src/gaussian_pos_vel.cpp	/^std::ostream& operator<< (std::ostream& os, const GaussianPosVel& g)$/;"	f	namespace:BFL
operator <<	human_filter/src/gaussian_vector.cpp	/^std::ostream& operator<< (std::ostream& os, const GaussianVector& g)$/;"	f	namespace:BFL
operator <<	human_filter/src/uniform_vector.cpp	/^std::ostream& operator<< (std::ostream& os, const UniformVector& g)$/;"	f	namespace:BFL
operator <=	despot/include/despot/util/tinyxml/tinystr.h	/^inline bool operator <=(const TiXmlString & a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator =	despot/include/despot/util/optionparser.h	/^	void operator=(const Option& orig) {$/;"	f	class:despot::option::Option
operator =	despot/include/despot/util/tinyxml/tinystr.h	/^	TiXmlString& operator =(const TiXmlString & copy) {$/;"	f	class:despot::util::tinyxml::TiXmlString
operator =	despot/include/despot/util/tinyxml/tinystr.h	/^	TiXmlString& operator =(const char * copy) {$/;"	f	class:despot::util::tinyxml::TiXmlString
operator =	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlHandle operator=(const TiXmlHandle& ref) {$/;"	f	class:despot::util::tinyxml::TiXmlHandle
operator =	despot/include/despot/util/tinyxml/tinyxml.h	/^	void operator=(const TiXmlText& base) {$/;"	f	class:despot::util::tinyxml::TiXmlText
operator =	despot/include/despot/util/tinyxml/tinyxml.h	/^	void operator=(const TiXmlUnknown& copy) {$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
operator =	despot/src/pomdpx/parser/parser.cpp	/^Parser& Parser::operator=(const Parser& parser) {$/;"	f	class:despot::Parser
operator =	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlComment::operator=(const TiXmlComment& base) {$/;"	f	class:despot::util::tinyxml::TiXmlComment
operator =	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlDeclaration::operator=(const TiXmlDeclaration& copy) {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
operator =	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlDocument::operator=(const TiXmlDocument& copy) {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
operator =	despot/src/util/tinyxml/tinyxml.cpp	/^void TiXmlElement::operator=(const TiXmlElement& base) {$/;"	f	class:despot::util::tinyxml::TiXmlElement
operator =	navi_mdp/src/srBSpline.cpp	/^const srBSpline& srBSpline::operator=( const srBSpline& T )$/;"	f	class:srBSpline
operator ==	despot/include/despot/util/tinyxml/tinystr.h	/^inline bool operator ==(const TiXmlString & a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator ==	despot/include/despot/util/tinyxml/tinystr.h	/^inline bool operator ==(const TiXmlString & a, const char* b) {$/;"	f	namespace:despot::util::tinyxml
operator ==	despot/include/despot/util/tinyxml/tinystr.h	/^inline bool operator ==(const char* a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator ==	despot/include/despot/util/tinyxml/tinyxml.h	/^	bool operator==(const TiXmlAttribute& rhs) const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
operator ==	despot/src/util/coord.cpp	/^bool operator==(const Coord& first, const Coord& second) {$/;"	f	namespace:despot
operator >	despot/include/despot/util/tinyxml/tinystr.h	/^inline bool operator>(const TiXmlString & a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator >	despot/include/despot/util/tinyxml/tinyxml.h	/^	bool operator>(const TiXmlAttribute& rhs) const {$/;"	f	class:despot::util::tinyxml::TiXmlAttribute
operator >	despot/src/util/tinyxml/tinyxml.cpp	/^std::istream& operator> > (std::istream & in, TiXmlNode & base)$/;"	f	namespace:despot::util::tinyxml
operator >=	despot/include/despot/util/tinyxml/tinystr.h	/^inline bool operator >=(const TiXmlString & a, const TiXmlString & b) {$/;"	f	namespace:despot::util::tinyxml
operator Option*	despot/include/despot/util/optionparser.h	/^	operator Option*() {$/;"	f	class:despot::option::Option
operator []	despot/include/despot/util/tinyxml/tinystr.h	/^	char& operator [](size_type index) const {$/;"	f	class:despot::util::tinyxml::TiXmlString
operator const Option*	despot/include/despot/util/optionparser.h	/^	operator const Option*() const {$/;"	f	class:despot::option::Option
opp_	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	std::vector<int> opp_; \/\/ opp_[s]: opponent cell index for state s$/;"	m	class:despot::BaseTag
option	despot/include/despot/util/optionparser.h	/^namespace option {$/;"	n	namespace:despot
options	despot/include/despot/util/optionparser.h	/^	Option* options;$/;"	m	class:despot::option::Parser::StoreOptionAction
optionsCount	despot/include/despot/util/optionparser.h	/^	int optionsCount() {$/;"	f	class:despot::option::Parser
options_max	despot/include/despot/util/optionparser.h	/^	unsigned options_max;$/;"	m	struct:despot::option::Stats
ostream	despot/include/despot/util/optionparser.h	/^		OStream& ostream;$/;"	m	struct:despot::option::PrintUsageImplementation::OStreamWriter
out	despot/include/despot/evaluator.h	/^	inline void out(std::ostream* o) {$/;"	f	class:despot::Evaluator
out_	despot/include/despot/evaluator.h	/^	std::ostream* out_;$/;"	m	class:despot::Evaluator
out_	despot/include/despot/util/logging.h	/^    std::ostream& out_;$/;"	m	class:despot::log_ostream::log_buf
output	despot/include/despot/util/optionparser.h	/^		void output(IStringWriter& write, const char* data, int len) {$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
p	navi_mdp/include/srBSpline.h	/^	inline int p( void ) { return m_Degree; }$/;"	f	class:srBSpline
pMapParam	navi_mdp/include/Dynamic_Manager.h	/^ 	MapParam* 	pMapParam;$/;"	m	class:Dynamic_Manager
pMapParam	navi_mdp/include/MDPmanager.h	/^ 	MapParam* 	pMapParam;$/;"	m	class:MDPManager
parent	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* parent;$/;"	m	class:despot::util::tinyxml::TiXmlNode
parent	despot/src/core/node.cpp	/^QNode* VNode::parent() {$/;"	f	class:despot::VNode
parent	despot/src/core/node.cpp	/^VNode* QNode::parent() {$/;"	f	class:despot::QNode
parent	despot/src/core/node.cpp	/^void QNode::parent(VNode* parent) {$/;"	f	class:despot::QNode
parent	despot/src/core/node.cpp	/^void VNode::parent(QNode* parent) {$/;"	f	class:despot::VNode
parent_	despot/include/despot/core/node.h	/^	QNode* parent_;$/;"	m	class:despot::VNode
parent_	despot/include/despot/core/node.h	/^	VNode* parent_;$/;"	m	class:despot::QNode
parents	despot/src/pomdpx/parser/function.cpp	/^const vector<NamedVar*>& Function::parents() const {$/;"	f	class:despot::Function
parents_	despot/include/despot/pomdpx/parser/function.h	/^  std::vector<NamedVar*> parents_;$/;"	m	class:despot::Function
parse	despot/include/despot/util/optionparser.h	/^	void parse(bool gnu, const Descriptor usage[], int argc, char** argv,$/;"	f	class:despot::option::Parser
parse	despot/include/despot/util/optionparser.h	/^	void parse(const Descriptor usage[], int argc, char** argv,$/;"	f	class:despot::option::Parser
parse	despot/include/despot/util/optionparser.h	/^	void parse(const Descriptor usage[], int argc, const char** argv,$/;"	f	class:despot::option::Parser
parse	despot/include/despot/util/optionparser.h	/^inline void Parser::parse(bool gnu, const Descriptor usage[], int argc,$/;"	f	class:despot::option::Parser
parser	despot/include/despot/pomdpx/pomdpx.h	/^	inline Parser* parser() const {$/;"	f	class:despot::POMDPX
parser	despot/include/despot/util/optionparser.h	/^	Parser& parser;$/;"	m	class:despot::option::Parser::StoreOptionAction
parser_	despot/include/despot/pomdpx/pomdpx.h	/^	Parser* parser_;$/;"	m	class:despot::POMDPX
particle_lower_bound	despot/src/core/policy.cpp	/^ParticleLowerBound* Policy::particle_lower_bound() const {$/;"	f	class:despot::Policy
particle_lower_bound_	despot/include/despot/core/policy.h	/^	ParticleLowerBound* particle_lower_bound_;$/;"	m	class:despot::Policy
particle_upper_bound_	despot/include/despot/core/upper_bound.h	/^	ParticleUpperBound* particle_upper_bound_;$/;"	m	class:despot::LookaheadUpperBound
particles	despot/src/core/belief.cpp	/^const vector<State*>& ParticleBelief::particles() const {$/;"	f	class:despot::ParticleBelief
particles	despot/src/core/node.cpp	/^const vector<State*>& VNode::particles() const {$/;"	f	class:despot::VNode
particles_	despot/include/despot/core/belief.h	/^	std::vector<State*> particles_;$/;"	m	class:despot::ParticleBelief
particles_	despot/include/despot/core/node.h	/^  std::vector<State*> particles_; \/\/ Used in DESPOT$/;"	m	class:despot::VNode
passage_y_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	int num_peds_, passage_y_, pedes_range_;$/;"	m	class:despot::Navigation
passage_y_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int num_peds_, passage_y_, pedes_range_;$/;"	m	class:despot::Navigation
passage_y_	despot/examples/cpp_models/pocman/src/pocman.h	/^	int num_ghosts_, passage_y_, ghost_range_, smell_range_, hear_range_;$/;"	m	class:despot::Pocman
path	navi_mdp/include/Dynamic_Manager.h	/^	nav_msgs::Path path;$/;"	m	class:Dynamic_Manager
path	navi_mdp/include/MDPmanager.h	/^	nav_msgs::Path 		path;$/;"	m	class:MDPManager
pathPublish	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::pathPublish(){$/;"	f	class:Dynamic_Manager
pathPublish	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::pathPublish(){$/;"	f	class:MDPManager
pathSize	navi_mdp/include/PathManager.h	/^	int pathSize;$/;"	m	class:PathManager
pathSize	navi_mdp/src/base_actionlib.cpp	/^static int pathSize=2;$/;"	v	file:
pathSize	navi_mdp/src/base_conti_actionlib.cpp	/^static int pathSize=2;$/;"	v	file:
path_index	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	int path_index;$/;"	m	class:despot::Navigation
path_index	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int path_index;$/;"	m	class:despot::Navigation
path_indx	navi_mdp/src/base_actionlib.cpp	/^static int path_indx=0;$/;"	v	file:
path_indx	navi_mdp/src/base_conti_actionlib.cpp	/^static int path_indx=0;$/;"	v	file:
paths_	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	mutable vector<map<OBS_TYPE, vector<int> > > paths_;$/;"	m	class:despot::TagHistoryModePolicy	file:
ped_dir	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<int>   ped_dir;$/;"	m	class:despot::NavigationState
ped_dir	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<int>   ped_dir;$/;"	m	class:despot::NavigationState
ped_path1	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<Coord> ped_path1;$/;"	m	class:despot::Navigation
ped_path1	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<Coord> ped_path1;$/;"	m	class:despot::Navigation
ped_pathdir	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<int> ped_pathdir;	$/;"	m	class:despot::Navigation
ped_pathdir	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<int> ped_pathdir;	$/;"	m	class:despot::Navigation
ped_pos	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<Coord> ped_pos;$/;"	m	class:despot::NavigationState
ped_pos	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<Coord> ped_pos;$/;"	m	class:despot::NavigationState
pedes_range_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	int num_peds_, passage_y_, pedes_range_;$/;"	m	class:despot::Navigation
pedes_range_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int num_peds_, passage_y_, pedes_range_;$/;"	m	class:despot::Navigation
people_filter_pub_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  ros::Publisher people_filter_pub_;$/;"	m	class:estimation::PeopleTrackingNode
people_filter_vis_pub_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  ros::Publisher people_filter_vis_pub_;$/;"	m	class:estimation::PeopleTrackingNode
people_meas_sub_	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::Subscriber people_meas_sub_;$/;"	m	class:Edgeleg_manager
people_meas_sub_	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::Subscriber people_meas_sub_;$/;"	m	class:Edgeleg_manager_action
people_meas_sub_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  ros::Subscriber people_meas_sub_;$/;"	m	class:estimation::PeopleTrackingNode
people_meas_sub_	human_filter/include/people_tracking_filter/service_test.h	/^  ros::Subscriber people_meas_sub_;$/;"	m	class:Edgeleg_manager_srv
people_measurement_pub_	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::Publisher people_measurement_pub_;$/;"	m	class:Edgeleg_manager
people_measurement_pub_	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::Publisher people_measurement_pub_;$/;"	m	class:Edgeleg_manager_action
people_measurement_pub_	human_filter/include/people_tracking_filter/service_test.h	/^  ros::Publisher people_measurement_pub_;$/;"	m	class:Edgeleg_manager_srv
people_measurement_pub_	navi_mdp/include/Dynamic_Manager.h	/^	ros::Publisher   people_measurement_pub_;$/;"	m	class:Dynamic_Manager
people_tracker_vis_pub_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  ros::Publisher people_tracker_vis_pub_;$/;"	m	class:estimation::PeopleTrackingNode
people_yolo_sub	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::Subscriber people_yolo_sub;$/;"	m	class:Edgeleg_manager
people_yolo_sub	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::Subscriber people_yolo_sub;$/;"	m	class:Edgeleg_manager_action
people_yolo_sub	human_filter/include/people_tracking_filter/service_test.h	/^  ros::Subscriber people_yolo_sub;$/;"	m	class:Edgeleg_manager_srv
perform	despot/include/despot/util/optionparser.h	/^	bool perform(Option& option) {$/;"	f	class:despot::option::Parser::StoreOptionAction
perform	despot/include/despot/util/optionparser.h	/^	bool perform(Option&) {$/;"	f	class:despot::option::Stats::CountOptionsAction
perform	despot/include/despot/util/optionparser.h	/^	virtual bool perform(Option&) {$/;"	f	struct:despot::option::Parser::Action
plan_time_ratio	despot/include/despot/evaluator.h	/^	static double plan_time_ratio;$/;"	m	class:despot::EvalLog
plan_time_ratio	despot/src/evaluator.cpp	/^double EvalLog::plan_time_ratio = 1.0;$/;"	m	class:despot::EvalLog	file:
pocman_	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	const Pocman* pocman_;$/;"	m	class:despot::PocmanApproxScenarioUpperBound	file:
pocman_	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	const Pocman* pocman_;$/;"	m	class:despot::PocmanLegalParticleLowerBound	file:
pocman_	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	const Pocman* pocman_;$/;"	m	class:despot::PocmanPOMCPPrior	file:
pocman_	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	const Pocman* pocman_;$/;"	m	class:despot::PocmanSmartParticleUpperBound	file:
pocman_	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	const Pocman* pocman_;$/;"	m	class:despot::PocmanSmartPolicy	file:
pocman_	despot/examples/cpp_models/pocman/src/pocman.h	/^	const Pocman* pocman_;$/;"	m	class:despot::PocmanBelief
pocman_home_	despot/examples/cpp_models/pocman/src/pocman.h	/^	Coord pocman_home_, ghost_home_;$/;"	m	class:despot::Pocman
pocman_pos	despot/examples/cpp_models/pocman/src/pocman.h	/^	Coord pocman_pos;$/;"	m	class:despot::PocmanState
policy	despot/examples/cpp_models/chain/src/chain.h	/^	std::vector<ValuedAction> policy;\/\/ optimal policy$/;"	m	class:despot::ChainState
policy	despot/src/core/mdp.cpp	/^const vector<ValuedAction>& MDP::policy() const {$/;"	f	class:despot::MDP
policy_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	vector<ValuedAction> policy_;$/;"	m	class:despot::RockSampleMDPBeliefUpperBound	file:
policy_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	vector<ValuedAction> policy_;$/;"	m	class:despot::RockSampleMDPParticleUpperBound	file:
policy_	despot/include/despot/core/mdp.h	/^	std::vector<ValuedAction> policy_;$/;"	m	class:despot::MDP
policy_	despot/include/despot/core/policy.h	/^	const StatePolicy& policy_;$/;"	m	class:despot::MMAPStatePolicy
policy_	despot/include/despot/core/policy.h	/^	const StatePolicy& policy_;$/;"	m	class:despot::MajorityActionPolicy
policy_	despot/include/despot/core/policy.h	/^	const StatePolicy& policy_;$/;"	m	class:despot::ModeStatePolicy
policy_	despot/include/despot/core/upper_bound.h	/^	std::vector<ValuedAction> policy_;$/;"	m	class:despot::MDPUpperBound
pomdp_cmd_callback	navi_mdp/src/PathManager.cpp	/^void PathManager::pomdp_cmd_callback(const std_msgs::Int8::ConstPtr& msg)$/;"	f	class:PathManager
pomdpx_	despot/include/despot/evaluator.h	/^	POMDPX* pomdpx_;$/;"	m	class:despot::IPPCEvaluator
pomdpx_model_	despot/src/pomdpx/pomdpx.cpp	/^	const POMDPX* pomdpx_model_;$/;"	m	class:despot::POMDPXGreedyActionPolicy	file:
port_	despot/include/despot/evaluator.h	/^	std::string port_;$/;"	m	class:despot::IPPCEvaluator
pos_	human_filter/include/people_tracking_filter/state_pos_vel.h	/^  tf::Vector3 pos_, vel_;$/;"	m	class:BFL::StatePosVel
position	despot/examples/cpp_models/bridge/src/bridge.h	/^	int position;$/;"	m	class:despot::BridgeState
position	despot/src/random_streams.cpp	/^int RandomStreams::position() const {$/;"	f	class:despot::RandomStreams
position	despot/src/random_streams.cpp	/^void RandomStreams::position(int value) const {$/;"	f	class:despot::RandomStreams
position_	despot/include/despot/random_streams.h	/^	mutable int position_;$/;"	m	class:despot::RandomStreams
power_num_steps_	despot/examples/cpp_models/pocman/src/pocman.h	/^	int power_num_steps_;$/;"	m	class:despot::Pocman
power_steps	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	int power_steps;$/;"	m	class:despot::NavigationState
power_steps	despot/examples/cpp_models/pocman/src/pocman.h	/^	int power_steps;$/;"	m	class:despot::PocmanState
pre_idx	navi_mdp/include/PathManager.h	/^	int pre_idx;$/;"	m	class:PathManager
preferred_	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^	mutable vector<int> preferred_;$/;"	m	class:despot::LocalnaviSmartPolicy	file:
preferred_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^	mutable vector<int> preferred_;$/;"	m	class:despot::LocalnaviSmartPolicy	file:
preferred_	despot/examples/cpp_models/pocman/src/pocman.cpp	/^	mutable vector<int> preferred_;$/;"	m	class:despot::PocmanSmartPolicy	file:
preferred_actions	despot/src/solver/pomcp.cpp	/^const vector<int>& POMCPPrior::preferred_actions() const {$/;"	f	class:despot::POMCPPrior
preferred_actions_	despot/include/despot/solver/pomcp.h	/^	std::vector<int> preferred_actions_;$/;"	m	class:despot::POMCPPrior
prev	despot/include/despot/util/optionparser.h	/^	Option* prev() {$/;"	f	class:despot::option::Option
prev	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute* prev;$/;"	m	class:despot::util::tinyxml::TiXmlAttribute
prev	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlNode* prev;$/;"	m	class:despot::util::tinyxml::TiXmlNode
prev_	despot/include/despot/util/optionparser.h	/^	Option* prev_;$/;"	m	class:despot::option::Option
prev_name	despot/include/despot/pomdpx/parser/variable.h	/^	inline const std::string& prev_name() const {$/;"	f	class:despot::StateVar
prev_name	despot/include/despot/pomdpx/parser/variable.h	/^	inline void prev_name(std::string str) {$/;"	f	class:despot::StateVar
prev_name_	despot/include/despot/pomdpx/parser/variable.h	/^	std::string prev_name_;$/;"	m	class:despot::StateVar
prev_state_vars_	despot/include/despot/pomdpx/parser/parser.h	/^	mutable std::vector<StateVar> prev_state_vars_;$/;"	m	class:despot::Parser
prevwrap	despot/include/despot/util/optionparser.h	/^	Option* prevwrap() {$/;"	f	class:despot::option::Option
printError	despot/include/despot/util/optionparser.h	/^	static void printError(const char* msg1, const option::Option& opt,$/;"	f	struct:despot::option::Arg
printPath	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::printPath()$/;"	f	class:Dynamic_Manager
printPath	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::printPath()$/;"	f	class:MDPManager
printUsage	despot/include/despot/util/optionparser.h	/^	static void printUsage(IStringWriter& write, const Descriptor usage[],$/;"	f	struct:despot::option::PrintUsageImplementation
printUsage	despot/include/despot/util/optionparser.h	/^void printUsage(Function* prn, Stream* stream, const Descriptor usage[],$/;"	f	namespace:despot::option
printUsage	despot/include/despot/util/optionparser.h	/^void printUsage(Function* prn, const Descriptor usage[], int width = 80,$/;"	f	namespace:despot::option
printUsage	despot/include/despot/util/optionparser.h	/^void printUsage(OStream& prn, const Descriptor usage[], int width = 80,$/;"	f	namespace:despot::option
printUsage	despot/include/despot/util/optionparser.h	/^void printUsage(Syscall* prn, int fd, const Descriptor usage[], int width = 80,$/;"	f	namespace:despot::option
printUsage	despot/include/despot/util/optionparser.h	/^void printUsage(const Temporary& prn, const Descriptor usage[], int width = 80,$/;"	f	namespace:despot::option
print_iter	villa_navi_service/include/navi_service_node.h	/^	int print_iter;$/;"	m	class:villa_navi_srv
prior_	despot/include/despot/core/belief.h	/^	Belief* prior_;$/;"	m	class:despot::ParticleBelief
prior_	despot/include/despot/core/lower_bound.h	/^	POMCPPrior* prior_;$/;"	m	class:despot::POMCPScenarioLowerBound
prior_	despot/include/despot/solver/pomcp.h	/^	POMCPPrior* prior_;$/;"	m	class:despot::POMCP
prior_	human_filter/include/people_tracking_filter/detector_particle.h	/^  BFL::MCPdfVector                                          prior_;$/;"	m	class:estimation::DetectorParticle
prior_	human_filter/include/people_tracking_filter/tracker_kalman.h	/^  BFL::Gaussian                                           prior_;$/;"	m	class:estimation::TrackerKalman
prior_	human_filter/include/people_tracking_filter/tracker_particle.h	/^  BFL::MCPdfPosVel                                          prior_;$/;"	m	class:estimation::TrackerParticle
probability_	human_filter/include/people_tracking_filter/uniform_vector.h	/^  double probability_;$/;"	m	class:BFL::UniformVector
process	despot/include/despot/util/optionparser.h	/^		void process(IStringWriter& write, const char* data, int len) {$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
processRoundEndMes	despot/src/ippc/client.cpp	/^double Client::processRoundEndMes(string mes) {$/;"	f	class:despot::Client
processRoundInitMes	despot/src/ippc/client.cpp	/^void Client::processRoundInitMes(string mes) {$/;"	f	class:despot::Client
processSessionEndMes	despot/src/ippc/client.cpp	/^double Client::processSessionEndMes(string mes) {$/;"	f	class:despot::Client
processSessionInitMes	despot/src/ippc/client.cpp	/^int Client::processSessionInitMes(string mes) {$/;"	f	class:despot::Client
processTurnMes	despot/src/ippc/client.cpp	/^map<string, string> Client::processTurnMes(string mes) {$/;"	f	class:despot::Client
pruning_constant	despot/include/despot/config.h	/^	double pruning_constant;$/;"	m	struct:despot::Config
ptr	despot/include/despot/util/optionparser.h	/^		const char* ptr; \/\/!< Ptr to current part within the current row.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
pub	navi_mdp/scripts/human_marker.py	/^pub = rospy.Publisher('\/Int_cmd_trackhuman', Int8, queue_size=10)$/;"	v
pub_iters	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  int pub_iters;$/;"	m	class:Edgeleg_manager
pub_iters	human_filter/include/people_tracking_filter/followme_action.h	/^  int pub_iters;$/;"	m	class:Edgeleg_manager_action
pub_iters	human_filter/include/people_tracking_filter/service_test.h	/^  int pub_iters;$/;"	m	class:Edgeleg_manager_srv
pub_iters	villa_navi_service/include/navi_service_node.h	/^	int pub_iters;$/;"	m	class:villa_navi_srv
publishAction	despot/src/evaluator.cpp	/^void Evaluator::publishAction(int action_cmd_)$/;"	f	class:despot::Evaluator
publishViewTpointTarget	navi_mdp/src/PathManager.cpp	/^void PathManager::publishViewTpointTarget()$/;"	f	class:PathManager
publishZeropaths	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::publishZeropaths()$/;"	f	class:Dynamic_Manager
publishZeropaths	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::publishZeropaths()$/;"	f	class:MDPManager
publish_cameraregion	human_filter/src/edge_leg_filter_node.cpp	/^void Edgeleg_manager::publish_cameraregion()$/;"	f	class:Edgeleg_manager
publish_cameraregion	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::publish_cameraregion()$/;"	f	class:Edgeleg_manager_action
publish_cameraregion	human_filter/src/service_test.cpp	/^void Edgeleg_manager_srv::publish_cameraregion()$/;"	f	class:Edgeleg_manager_srv
publish_cameraregion	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::publish_cameraregion()$/;"	f	class:Dynamic_Manager
publish_filtered_human_boxes	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::publish_filtered_human_boxes()$/;"	f	class:Dynamic_Manager
publish_filtered_target	human_filter/src/edge_leg_filter_node.cpp	/^void Edgeleg_manager::publish_filtered_target()$/;"	f	class:Edgeleg_manager
publish_filtered_target	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::publish_filtered_target()$/;"	f	class:Edgeleg_manager_action
publish_filtered_target	human_filter/src/service_test.cpp	/^void Edgeleg_manager_srv::publish_filtered_target()$/;"	f	class:Edgeleg_manager_srv
publish_leg_boxes	human_filter/src/edge_leg_filter_node.cpp	/^void Edgeleg_manager::publish_leg_boxes()$/;"	f	class:Edgeleg_manager
publish_leg_boxes	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::publish_leg_boxes()$/;"	f	class:Edgeleg_manager_action
publish_leg_boxes	human_filter/src/service_test.cpp	/^void Edgeleg_manager_srv::publish_leg_boxes()$/;"	f	class:Edgeleg_manager_srv
publish_target	human_filter/src/edge_leg_filter_node.cpp	/^void Edgeleg_manager::publish_target()$/;"	f	class:Edgeleg_manager
publish_target	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::publish_target()$/;"	f	class:Edgeleg_manager_action
publish_target	human_filter/src/service_test.cpp	/^void Edgeleg_manager_srv::publish_target()$/;"	f	class:Edgeleg_manager_srv
publish_viewpointTarget	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::publish_viewpointTarget(){$/;"	f	class:Dynamic_Manager
publisher	navi_mdp/scripts/human_marker.py	/^publisher = rospy.Publisher(topic, Marker,queue_size=10)$/;"	v
publishnum	navi_mdp/include/Dynamic_Manager.h	/^ 	int publishnum;$/;"	m	class:Dynamic_Manager
publishnum	navi_mdp/include/MDPmanager.h	/^ 	int publishnum;$/;"	m	class:MDPManager
publishpaths	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::publishpaths()$/;"	f	class:Dynamic_Manager
publishpaths	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::publishpaths()$/;"	f	class:MDPManager
put_human_occ_map_leg	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::put_human_occ_map_leg()$/;"	f	class:Dynamic_Manager
put_human_occ_map_yolo	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::put_human_occ_map_yolo()$/;"	f	class:Dynamic_Manager
put_human_surrounding_beliefmap	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::put_human_surrounding_beliefmap(int idx, double value)$/;"	f	class:Dynamic_Manager
quality_	human_filter/include/people_tracking_filter/detector_particle.h	/^  double filter_time_, quality_;$/;"	m	class:estimation::DetectorParticle
quality_	human_filter/include/people_tracking_filter/tracker_kalman.h	/^  double init_time_, filter_time_, quality_;$/;"	m	class:estimation::TrackerKalman
quality_	human_filter/include/people_tracking_filter/tracker_particle.h	/^  double init_time_, filter_time_, quality_;$/;"	m	class:estimation::TrackerParticle
quit	despot/include/despot/util/tinyxml/tinystr.h	/^	void quit() {$/;"	f	class:despot::util::tinyxml::TiXmlString
ra	navi_mdp/include/Dynamic_Manager.h	62;"	d
ra	navi_mdp/include/MDPmanager.h	59;"	d
random_	despot/include/despot/evaluator.h	/^	Random random_;$/;"	m	class:despot::POMDPEvaluator
reading_distributions_	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.h	/^	std::vector<std::vector<std::vector<double> > > reading_distributions_;$/;"	m	class:despot::LaserTag
reading_distributions_	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.h	/^	std::vector<std::vector<std::vector<double> > > reading_distributions_;$/;"	m	class:despot::NoisyLaserTag
real_s	navi_mdp/include/types.h	/^	typedef double			real_s;$/;"	t
real_s	navi_mdp/include/types.h	/^	typedef float			real_s;$/;"	t
rec_x	edge_leg_detector/src/detector.cpp	/^vector < double > rec_x;$/;"	v
rec_x	edge_leg_detector/src/edge_leg_detector/detector.cpp	/^vector < double > rec_x;$/;"	v
rec_y	edge_leg_detector/src/detector.cpp	/^vector < double > rec_y;$/;"	v
rec_y	edge_leg_detector/src/edge_leg_detector/detector.cpp	/^vector < double > rec_y;$/;"	v
recvMessage	despot/src/ippc/client.cpp	/^string Client::recvMessage() {$/;"	f	class:despot::Client
recvMessageTwice	despot/src/ippc/client.cpp	/^string Client::recvMessageTwice() {$/;"	f	class:despot::Client
reg_model_	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^	const Adventurer* reg_model_;$/;"	m	class:despot::AdventurerPOMCPPrior	file:
regdemo_model_	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^	const Adventurer* regdemo_model_;$/;"	m	class:despot::AdventurerSmartPolicy	file:
reliability_threshold_	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  double freq_, start_distance_min_, reliability_threshold_;$/;"	m	class:Edgeleg_manager
reliability_threshold_	human_filter/include/people_tracking_filter/followme_action.h	/^  double freq_, start_distance_min_, reliability_threshold_;$/;"	m	class:Edgeleg_manager_action
reliability_threshold_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  double freq_, start_distance_min_, reliability_threshold_;$/;"	m	class:estimation::PeopleTrackingNode
reliability_threshold_	human_filter/include/people_tracking_filter/service_test.h	/^  double freq_, start_distance_min_, reliability_threshold_;$/;"	m	class:Edgeleg_manager_srv
rep_	despot/include/despot/util/tinyxml/tinystr.h	/^	Rep * rep_;$/;"	m	class:despot::util::tinyxml::TiXmlString
repeat	despot/src/util/util.cpp	/^string repeat(string str, int n) {$/;"	f	namespace:despot
reserve	despot/src/util/tinyxml/tinystr.cpp	/^void TiXmlString::reserve(size_type cap) {$/;"	f	class:despot::util::tinyxml::TiXmlString
restartRow	despot/include/despot/util/optionparser.h	/^		void restartRow() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
restartTable	despot/include/despot/util/optionparser.h	/^		void restartTable() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
result	human_filter/scripts/follow_action.py	/^		result = follow_action_client()$/;"	v
result_	human_filter/include/people_tracking_filter/followme_action.h	/^  human_filter::FollowMe result_;$/;"	m	class:Edgeleg_manager_action
reuse	despot/src/solver/pomcp.cpp	/^void POMCP::reuse(bool r) {$/;"	f	class:despot::POMCP
reuse_	despot/include/despot/solver/aems.h	/^	bool reuse_;$/;"	m	class:despot::AEMS
reuse_	despot/include/despot/solver/pomcp.h	/^	bool reuse_;$/;"	m	class:despot::POMCP
reward_	despot/include/despot/evaluator.h	/^	double reward_;$/;"	m	class:despot::Evaluator
reward_clear_level_	despot/examples/cpp_models/pocman/src/pocman.h	/^	double reward_clear_level_, reward_default_, reward_die_;$/;"	m	class:despot::Pocman
reward_collision_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_die;$/;"	m	class:despot::Navigation
reward_collision_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_stop;$/;"	m	class:despot::Navigation
reward_default_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_die;$/;"	m	class:despot::Navigation
reward_default_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_stop;$/;"	m	class:despot::Navigation
reward_default_	despot/examples/cpp_models/pocman/src/pocman.h	/^	double reward_clear_level_, reward_default_, reward_die_;$/;"	m	class:despot::Pocman
reward_die	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_die;$/;"	m	class:despot::Navigation
reward_die_	despot/examples/cpp_models/pocman/src/pocman.h	/^	double reward_clear_level_, reward_default_, reward_die_;$/;"	m	class:despot::Pocman
reward_eat_food_	despot/examples/cpp_models/pocman/src/pocman.h	/^	double reward_eat_food_, reward_eat_ghost_, reward_hit_wall_;$/;"	m	class:despot::Pocman
reward_eat_ghost_	despot/examples/cpp_models/pocman/src/pocman.h	/^	double reward_eat_food_, reward_eat_ghost_, reward_hit_wall_;$/;"	m	class:despot::Pocman
reward_funcs_	despot/include/despot/pomdpx/parser/parser.h	/^	std::vector<Function> reward_funcs_;$/;"	m	class:despot::Parser
reward_goal	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_die;$/;"	m	class:despot::Navigation
reward_goal	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_stop;$/;"	m	class:despot::Navigation
reward_hit_wall_	despot/examples/cpp_models/pocman/src/pocman.h	/^	double reward_eat_food_, reward_eat_ghost_, reward_hit_wall_;$/;"	m	class:despot::Pocman
reward_static_obs_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_die;$/;"	m	class:despot::Navigation
reward_static_obs_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_stop;$/;"	m	class:despot::Navigation
reward_stop	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_stop;$/;"	m	class:despot::Navigation
reward_vars_	despot/include/despot/pomdpx/parser/parser.h	/^	mutable std::vector<RewardVar> reward_vars_;$/;"	m	class:despot::Parser
rewards	despot/include/despot/evaluator.h	/^	inline std::vector<double> rewards() {$/;"	f	class:despot::Evaluator
rewards	despot/include/despot/evaluator.h	/^	inline void rewards(std::vector<double> rewards) {$/;"	f	class:despot::Evaluator
rewards_	despot/include/despot/pomdpx/pomdpx.h	/^	mutable std::vector<std::vector<double> > rewards_;$/;"	m	class:despot::POMDPX
rgb	human_filter/include/people_tracking_filter/rgb.h	/^const static int rgb[] =$/;"	v
rob_	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	std::vector<int> rob_; \/\/ rob_[s]: robot cell index for state s$/;"	m	class:despot::BaseTag
robot_path	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<Coord> robot_path;$/;"	m	class:despot::Navigation
robot_pos	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	Coord robot_pos;$/;"	m	class:despot::NavigationState
robot_pos	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	Coord robot_pos;$/;"	m	class:despot::NavigationState
robot_pos_unknown_	despot/examples/cpp_models/tag/src/base/base_tag.h	/^  bool robot_pos_unknown_;$/;"	m	class:despot::BaseTag
robot_state_	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  tf::TransformListener robot_state_;$/;"	m	class:Edgeleg_manager
robot_state_	human_filter/include/people_tracking_filter/followme_action.h	/^  tf::TransformListener robot_state_;$/;"	m	class:Edgeleg_manager_action
robot_state_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  tf::TransformListener robot_state_;$/;"	m	class:estimation::PeopleTrackingNode
robot_state_	human_filter/include/people_tracking_filter/service_test.h	/^  tf::TransformListener robot_state_;$/;"	m	class:Edgeleg_manager_srv
rock_order_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	vector<vector<int> > rock_order_;$/;"	m	class:despot::RockSampleMMAPStateScenarioLowerBound	file:
rock_pos_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	std::vector<Coord> rock_pos_;$/;"	m	class:despot::BaseRockSample
rock_state_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	RockSampleState* rock_state_;$/;"	m	class:despot::BaseRockSample
rock_status	despot/examples/cpp_models/simpleNavi/src/simpleNavi.h	/^	int rock_status; \/\/ 1 is good, and 0 is bad$/;"	m	class:despot::SimpleState
rock_status	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^	int rock_status; \/\/ 1 is good, and 0 is bad$/;"	m	class:despot::SimpleState
root_	despot/include/despot/solver/aems.h	/^	VNode* root_;$/;"	m	class:despot::AEMS
root_	despot/include/despot/solver/despot.h	/^	VNode* root_;$/;"	m	class:despot::DESPOT
root_	despot/include/despot/solver/pomcp.h	/^	VNode* root_;$/;"	m	class:despot::POMCP
root_seed	despot/include/despot/config.h	/^	unsigned int root_seed;$/;"	m	struct:despot::Config
root_seed	despot/src/util/seeds.cpp	/^void Seeds::root_seed(unsigned value) {$/;"	f	class:despot::Seeds
root_seed_	despot/include/despot/util/seeds.h	/^	static unsigned root_seed_;$/;"	m	class:despot::Seeds
root_seed_	despot/src/util/seeds.cpp	/^unsigned Seeds::root_seed_ = 0;$/;"	m	class:despot::Seeds	file:
roudndNUM	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^static int roudndNUM=0;$/;"	v	file:
round_num	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	int round_num;$/;"	m	class:despot::Navigation
rover_position	despot/examples/cpp_models/simpleNavi/src/simpleNavi.h	/^	int rover_position; \/\/ positions are numbered 0, 1, 2 from left to right$/;"	m	class:despot::SimpleState
rover_position	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^	int rover_position; \/\/ positions are numbered 0, 1, 2 from left to right$/;"	m	class:despot::SimpleState
row	despot/include/despot/util/tinyxml/tinyxml.h	/^	int row; \/\/ 0 based.$/;"	m	struct:despot::util::tinyxml::TiXmlCursor
rowdesc	despot/include/despot/util/optionparser.h	/^		const Descriptor* rowdesc; \/\/!< The Descriptor that contains the current row.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
rowstart	despot/include/despot/util/optionparser.h	/^		const char* rowstart; \/\/!< Ptr to 1st character of current row within rowdesc->help.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
rs_model_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleApproxParticleUpperBound	file:
rs_model_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleBelief	file:
rs_model_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleENTScenarioLowerBound	file:
rs_model_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleEastBeliefPolicy	file:
rs_model_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleEastScenarioLowerBound	file:
rs_model_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleMDPBeliefUpperBound	file:
rs_model_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleMDPParticleUpperBound	file:
rs_model_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleMMAPStateScenarioLowerBound	file:
rs_model_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSamplePOMCPPrior	file:
rs_model_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleParticleUpperBound1	file:
rs_model_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^	const BaseRockSample* rs_model_;$/;"	m	class:despot::RockSampleParticleUpperBound2	file:
run	despot/src/simple_tui.cpp	/^int SimpleTUI::run(int argc, char *argv[]) {$/;"	f	class:despot::SimpleTUI
runned_instances	despot/include/despot/evaluator.h	/^  std::vector<std::string> runned_instances;$/;"	m	class:despot::EvalLog
same_loc_obs_	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	OBS_TYPE same_loc_obs_;$/;"	m	class:despot::BaseTag
saveLastAction	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::saveLastAction(State& state_,int action){$/;"	f	class:despot::Navigation
saveLastAction	despot/include/despot/core/pomdp.h	/^	virtual void saveLastAction(State& state,int action)$/;"	f	class:despot::DSPOMDP
scaled_static_map_callback	human_filter/src/edge_leg_filter_node.cpp	/^void Edgeleg_manager::scaled_static_map_callback(const nav_msgs::OccupancyGrid::ConstPtr& msg)$/;"	f	class:Edgeleg_manager
scaled_static_map_callback	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::scaled_static_map_callback(const nav_msgs::OccupancyGrid::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_action
scaled_static_map_callback	human_filter/src/service_test.cpp	/^void Edgeleg_manager_srv::scaled_static_map_callback(const nav_msgs::OccupancyGrid::ConstPtr& msg)$/;"	f	class:Edgeleg_manager_srv
scaling	navi_mdp/include/Dynamic_Manager.h	/^	int  scaling=12;$/;"	m	class:Dynamic_Manager
scaling	navi_mdp/include/MDPmanager.h	/^	int  scaling=12;$/;"	m	class:MDPManager
scan_mode	navi_mdp/include/PathManager.h	/^	bool scan_mode;$/;"	m	class:PathManager
scenario_id	despot/include/despot/core/pomdp.h	/^	int scenario_id;$/;"	m	class:despot::State
screenLength	despot/include/despot/util/optionparser.h	/^		int screenLength() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
screenlen	despot/include/despot/util/optionparser.h	/^		int screenlen; \/\/!< Length of the current part in screen columns (taking narrow\/wide chars into account).$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
search_depth	despot/include/despot/config.h	/^	int search_depth;$/;"	m	struct:despot::Config
seed	despot/src/util/random.cpp	/^unsigned Random::seed() {$/;"	f	class:despot::Random
seed_	despot/include/despot/util/random.h	/^	unsigned seed_;$/;"	m	class:despot::Random
seed_gen_	despot/include/despot/util/seeds.h	/^	static Random seed_gen_;$/;"	m	class:despot::Seeds
seed_gen_	despot/src/util/seeds.cpp	/^Random Seeds::seed_gen_ = Random((unsigned) 0);$/;"	m	class:despot::Seeds	file:
selfloop_state_queue_	despot/include/despot/pomdpx/parser/parser.h	/^	mutable std::queue<std::vector<int> > selfloop_state_queue_;$/;"	m	class:despot::Parser
selfloop_state_set_	despot/include/despot/pomdpx/parser/parser.h	/^	mutable std::set<std::vector<int> > selfloop_state_set_;$/;"	m	class:despot::Parser
sendMessage	despot/src/ippc/client.cpp	/^void Client::sendMessage(string sendbuf) {$/;"	f	class:despot::Client
sendPathAction	navi_mdp/src/PathManager.cpp	/^void PathManager::sendPathAction()$/;"	f	class:PathManager
sendcmd	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^bool Navigation::sendcmd()$/;"	f	class:despot::Navigation
sensor_frame_id	edge_leg_detector/src/detector.cpp	/^string sensor_frame_id;$/;"	v
sensor_frame_id	edge_leg_detector/src/edge_leg_detector/detector.cpp	/^string sensor_frame_id;$/;"	v
sentinel	despot/include/despot/util/tinyxml/tinyxml.h	/^	TiXmlAttribute sentinel;$/;"	m	class:despot::util::tinyxml::TiXmlAttributeSet
sequencer_delay	human_filter/src/edge_leg_filter_node.cpp	/^static const double       sequencer_delay            = 0.5; \/\/TODO: this is probably too big, it was 0.8$/;"	v	file:
sequencer_delay	human_filter/src/followme_action.cpp	/^static const double       sequencer_delay            = 0.5; \/\/TODO: this is probably too big, it was 0.8$/;"	v	file:
sequencer_delay	human_filter/src/people_tracking_node.cpp	/^static const double       sequencer_delay            = 0.5; \/\/TODO: this is probably too big, it was 0.8$/;"	v	file:
sequencer_delay	human_filter/src/service_test.cpp	/^static const double       sequencer_delay            = 0.5; \/\/TODO: this is probably too big, it was 0.8$/;"	v	file:
sequencer_internal_buffer	human_filter/src/edge_leg_filter_node.cpp	/^static const unsigned int sequencer_internal_buffer  = 100;$/;"	v	file:
sequencer_internal_buffer	human_filter/src/followme_action.cpp	/^static const unsigned int sequencer_internal_buffer  = 100;$/;"	v	file:
sequencer_internal_buffer	human_filter/src/people_tracking_node.cpp	/^static const unsigned int sequencer_internal_buffer  = 100;$/;"	v	file:
sequencer_internal_buffer	human_filter/src/service_test.cpp	/^static const unsigned int sequencer_internal_buffer  = 100;$/;"	v	file:
sequencer_subscribe_buffer	human_filter/src/edge_leg_filter_node.cpp	/^static const unsigned int sequencer_subscribe_buffer = 10;$/;"	v	file:
sequencer_subscribe_buffer	human_filter/src/followme_action.cpp	/^static const unsigned int sequencer_subscribe_buffer = 10;$/;"	v	file:
sequencer_subscribe_buffer	human_filter/src/people_tracking_node.cpp	/^static const unsigned int sequencer_subscribe_buffer = 10;$/;"	v	file:
sequencer_subscribe_buffer	human_filter/src/service_test.cpp	/^static const unsigned int sequencer_subscribe_buffer = 10;$/;"	v	file:
setDesiredHeading	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::setDesiredHeading(double _heading)$/;"	f	class:Dynamic_Manager
setDesiredHeading	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::setDesiredHeading(double _heading)$/;"	f	class:MDPManager
setDynNavTarget	navi_mdp/src/PathManager.cpp	/^void PathManager::setDynNavTarget()$/;"	f	class:PathManager
setDynamicObs	navi_mdp/src/Dynamic_Manager.cpp	/^ void Dynamic_Manager::setDynamicObs(const vector<int> dynamic_obs){$/;"	f	class:Dynamic_Manager
setDynamicObs	navi_mdp/src/MDPmanager.cpp	/^ void MDPManager::setDynamicObs(const vector<int> dynamic_obs){$/;"	f	class:MDPManager
setFinalNavTarget	navi_mdp/src/PathManager.cpp	/^int PathManager::setFinalNavTarget()$/;"	f	class:PathManager
setGoalConfig	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::setGoalConfig( const vector<int> _Goal )$/;"	f	class:Dynamic_Manager
setGoalConfig	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::setGoalConfig( const vector<int> _Goal )$/;"	f	class:MDPManager
setHeight	navi_mdp/src/MapParam.cpp	/^void MapParam::setHeight(int height_)$/;"	f	class:MapParam
setHostName	despot/src/ippc/client.cpp	/^void Client::setHostName(string hostname) {$/;"	f	class:despot::Client
setHumanObs	navi_mdp/src/Dynamic_Manager.cpp	/^ void Dynamic_Manager::setHumanObs(const vector<int> humans){$/;"	f	class:Dynamic_Manager
setHumanObs	navi_mdp/src/MDPmanager.cpp	/^ void MDPManager::setHumanObs(const vector<int> humans){$/;"	f	class:MDPManager
setNavTarget	navi_mdp/src/PathManager.cpp	/^void PathManager::setNavTarget()$/;"	f	class:PathManager
setNavTarget_pub	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::Publisher setNavTarget_pub;$/;"	m	class:Edgeleg_manager
setNavTarget_pub	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::Publisher setNavTarget_pub;$/;"	m	class:Edgeleg_manager_action
setNavTarget_pub	human_filter/include/people_tracking_filter/service_test.h	/^  ros::Publisher setNavTarget_pub;$/;"	m	class:Edgeleg_manager_srv
setNavTarget_pub	navi_mdp/include/PathManager.h	/^ 	ros::Publisher setNavTarget_pub;$/;"	m	class:PathManager
setNavTarget_pub	villa_navi_service/include/navi_service_node.h	/^	ros::Publisher setNavTarget_pub;$/;"	m	class:villa_navi_srv
setPMapParam	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::setPMapParam(MapParam* _pMapParam)$/;"	f	class:Dynamic_Manager
setPMapParam	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::setPMapParam(MapParam* _pMapParam)$/;"	f	class:MDPManager
setPath	navi_mdp/src/PathManager.cpp	/^void PathManager::setPath(const nav_msgs::Path::ConstPtr& msg)$/;"	f	class:PathManager
setPort	despot/src/ippc/client.cpp	/^void Client::setPort(string port) {$/;"	f	class:despot::Client
setResolution	navi_mdp/src/MapParam.cpp	/^void MapParam::setResolution(double res_)$/;"	f	class:MapParam
setStartConfig	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::setStartConfig( const vector<int> _Start)$/;"	f	class:Dynamic_Manager
setStartConfig	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::setStartConfig( const vector<int> _Start)$/;"	f	class:MDPManager
setStaticObs	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::setStaticObs(const vector<int> static_obs)$/;"	f	class:Dynamic_Manager
setStaticObs	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::setStaticObs(const vector<int> static_obs)$/;"	f	class:MDPManager
setViewpointTarget	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::setViewpointTarget(const std::vector<double> pos)$/;"	f	class:Dynamic_Manager
setViewpointTarget	navi_mdp/src/PathManager.cpp	/^void PathManager::setViewpointTarget(const std::vector<double> pos)$/;"	f	class:PathManager
setViewpointTarget	villa_navi_service/src/navi_service_node.cpp	/^void villa_navi_srv::setViewpointTarget(const std::vector<double> pos)$/;"	f	class:villa_navi_srv
setWidth	navi_mdp/src/MapParam.cpp	/^void MapParam::setWidth (int Width_)$/;"	f	class:MapParam
set_Cell_Info	navi_mdp/src/MapParam.cpp	/^void MapParam::set_Cell_Info(vector<int> _inputCellInfo)$/;"	f	class:MapParam
set_NearestHuman_V	navi_mdp/src/MapParam.cpp	/^void MapParam::set_NearestHuman_V(vector<float> _NearestHuman_V)$/;"	f	class:MapParam
set_OCC_Info	navi_mdp/src/MapParam.cpp	/^void MapParam::set_OCC_Info(vector<int> _inputOCCInfo)$/;"	f	class:MapParam
set_RobotHeading_V	navi_mdp/src/MapParam.cpp	/^void MapParam::set_RobotHeading_V(vector<float> _RobotHeading_V)$/;"	f	class:MapParam
set_Robot_Info	navi_mdp/src/MapParam.cpp	/^void MapParam::set_Robot_Info(vector<int> _inputRobotInfo)$/;"	f	class:MapParam
set_State_Distance	navi_mdp/src/MapParam.cpp	/^void MapParam::set_State_Distance(vector<float> _State_Distance)$/;"	f	class:MapParam
set_State_Type	navi_mdp/src/MapParam.cpp	/^void MapParam::set_State_Type(vector<int> _State_Type)$/;"	f	class:MapParam
set_size	despot/include/despot/util/tinyxml/tinystr.h	/^	void set_size(size_type sz) {$/;"	f	class:despot::util::tinyxml::TiXmlString
setbuf	despot/src/util/logging.cpp	/^streambuf* log_ostream::log_buf::setbuf(char* s, streamsize n) {$/;"	f	class:despot::log_ostream::log_buf
setpub_path	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::setpub_path()$/;"	f	class:MDPManager
setstaticGoal	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::setstaticGoal()$/;"	f	class:MDPManager
shift	despot/include/despot/util/optionparser.h	/^	static void shift(const char** args, int count) {$/;"	f	class:despot::option::Parser
shortopt	despot/include/despot/util/optionparser.h	/^	const char* const shortopt;$/;"	m	struct:despot::option::Descriptor
sig_handler	villa_navi_service/src/service_test.cpp	/^void sig_handler(int sig)$/;"	f
sigmaSet	human_filter/src/gaussian_vector.cpp	/^void GaussianVector::sigmaSet(const Vector3& sigma)$/;"	f	class:BFL::GaussianVector
sigma_	human_filter/include/people_tracking_filter/gaussian_pos_vel.h	/^  StatePosVel mu_, sigma_;$/;"	m	class:BFL::GaussianPosVel
sigma_	human_filter/include/people_tracking_filter/gaussian_vector.h	/^  tf::Vector3 mu_, sigma_;$/;"	m	class:BFL::GaussianVector
sigma_changed_	human_filter/include/people_tracking_filter/gaussian_vector.h	/^  mutable bool sigma_changed_;$/;"	m	class:BFL::GaussianVector
sigma_sq_	human_filter/include/people_tracking_filter/gaussian_vector.h	/^  mutable tf::Vector3 sigma_sq_;$/;"	m	class:BFL::GaussianVector
silence	despot/include/despot/config.h	/^	bool silence;$/;"	m	struct:despot::Config
sim_len	despot/include/despot/config.h	/^	int sim_len; \/\/ Number of steps to run the simulation for.$/;"	m	struct:despot::Config
simpleTextPrint	despot/include/despot/util/tinyxml/tinyxml.h	/^	bool simpleTextPrint;TIXML_STRING buffer;TIXML_STRING indent;TIXML_STRING lineBreak;$/;"	m	class:despot::util::tinyxml::TiXmlPrinter
size	despot/include/despot/util/tinyxml/tinystr.h	/^		size_type size, capacity;$/;"	m	struct:despot::util::tinyxml::TiXmlString::Rep
size	despot/include/despot/util/tinyxml/tinystr.h	/^	size_type size() const {$/;"	f	class:despot::util::tinyxml::TiXmlString
size_	despot/examples/cpp_models/adventurer/src/adventurer.h	/^	int size_;$/;"	m	class:despot::Adventurer
size_	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^	int size_;$/;"	m	class:despot::RegDemo
size_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	int size_, num_rocks_;$/;"	m	class:despot::BaseRockSample
size_	human_filter/include/people_tracking_filter/uniform_vector.h	/^  tf::Vector3 mu_, size_;$/;"	m	class:BFL::UniformVector
size_type	despot/include/despot/util/tinyxml/tinystr.h	/^	typedef size_t size_type;$/;"	t	class:despot::util::tinyxml::TiXmlString
smell_range_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	int smell_range_;$/;"	m	class:despot::Navigation
smell_range_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int smell_range_;$/;"	m	class:despot::Navigation
smell_range_	despot/examples/cpp_models/pocman/src/pocman.h	/^	int num_ghosts_, passage_y_, ghost_range_, smell_range_, hear_range_;$/;"	m	class:despot::Pocman
socketfd	despot/include/despot/ippc/client.h	/^	int socketfd;$/;"	m	class:despot::Client
solver	despot/include/despot/evaluator.h	/^	inline Solver* solver() {$/;"	f	class:despot::Evaluator
solver	despot/include/despot/evaluator.h	/^	inline void solver(Solver* s) {$/;"	f	class:despot::Evaluator
solver_	despot/include/despot/evaluator.h	/^	Solver* solver_;$/;"	m	class:despot::Evaluator
sound_cmd_sub	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::Subscriber sound_cmd_sub;$/;"	m	class:Edgeleg_manager
sound_cmd_sub	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::Subscriber sound_cmd_sub;$/;"	m	class:Edgeleg_manager_action
sound_cmd_sub	human_filter/include/people_tracking_filter/service_test.h	/^  ros::Subscriber sound_cmd_sub;$/;"	m	class:Edgeleg_manager_srv
sparse_values_	despot/include/despot/pomdpx/parser/function.h	/^  std::vector<std::vector<std::pair<int, double> > > sparse_values_;$/;"	m	class:despot::TabularCPT
spin	human_filter/src/edge_leg_filter_node.cpp	/^void Edgeleg_manager::spin()$/;"	f	class:Edgeleg_manager
spin	human_filter/src/followme_action.cpp	/^void Edgeleg_manager_action::spin()$/;"	f	class:Edgeleg_manager_action
spin	human_filter/src/people_tracking_node.cpp	/^void PeopleTrackingNode::spin()$/;"	f	class:estimation::PeopleTrackingNode
spin	human_filter/src/service_test.cpp	/^void Edgeleg_manager_srv::spin()$/;"	f	class:Edgeleg_manager_srv
split_	despot/include/despot/core/belief.h	/^	bool split_;$/;"	m	class:despot::ParticleBelief
sqrt_	human_filter/include/people_tracking_filter/gaussian_vector.h	/^  mutable double sqrt_;$/;"	m	class:BFL::GaussianVector
srBSpline	navi_mdp/include/srBSpline.h	/^class srBSpline$/;"	c
srBSpline	navi_mdp/src/srBSpline.cpp	/^srBSpline::srBSpline( const srBSpline& T )$/;"	f	class:srBSpline
srBSpline	navi_mdp/src/srBSpline.cpp	/^srBSpline::srBSpline( int Degree, int NumCPs, double* CPs, double Ti, double Tf, bool KnotRepeat \/*= true *\/ )$/;"	f	class:srBSpline
srBSpline	navi_mdp/src/srBSpline.cpp	/^srBSpline::srBSpline( int Degree, int NumCPs, double* CPs, int NumKnots, double* Knots )$/;"	f	class:srBSpline
srBSpline	navi_mdp/src/srBSpline.cpp	/^srBSpline::srBSpline( int NumCPs, double Ti, double Tf, int Degree, bool KnotRepeat \/*= true*\/ )$/;"	f	class:srBSpline
srBSpline	navi_mdp/src/srBSpline.cpp	/^srBSpline::srBSpline( void )$/;"	f	class:srBSpline
srUtils	navi_mdp/include/utils.h	/^class srUtils$/;"	c
stamp	despot/src/util/tinyxml/tinyxmlparser.cpp	/^	const char* stamp;$/;"	m	class:despot::util::tinyxml::TiXmlParsingData	file:
standalone	despot/include/despot/util/tinyxml/tinyxml.h	/^	TIXML_STRING version;TIXML_STRING encoding;TIXML_STRING standalone;$/;"	m	class:despot::util::tinyxml::TiXmlDeclaration
start	despot/include/despot/util/timer.h	/^	void start() {$/;"	f	class:despot::Timer
start	despot/include/despot/util/tinyxml/tinystr.h	/^	char* start() const {$/;"	f	class:despot::util::tinyxml::TiXmlString
start_clockt_	despot/include/despot/evaluator.h	/^	clock_t start_clockt_;$/;"	m	class:despot::Evaluator
start_distance_min_	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  double freq_, start_distance_min_, reliability_threshold_;$/;"	m	class:Edgeleg_manager
start_distance_min_	human_filter/include/people_tracking_filter/followme_action.h	/^  double freq_, start_distance_min_, reliability_threshold_;$/;"	m	class:Edgeleg_manager_action
start_distance_min_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  double freq_, start_distance_min_, reliability_threshold_;$/;"	m	class:estimation::PeopleTrackingNode
start_distance_min_	human_filter/include/people_tracking_filter/service_test.h	/^  double freq_, start_distance_min_, reliability_threshold_;$/;"	m	class:Edgeleg_manager_srv
start_pos_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	Coord start_pos_;$/;"	m	class:despot::BaseRockSample
start_time	despot/include/despot/evaluator.h	/^	static time_t start_time;$/;"	m	class:despot::EvalLog
start_time	despot/src/evaluator.cpp	/^time_t EvalLog::start_time = 0;$/;"	m	class:despot::EvalLog	file:
state_	despot/include/despot/evaluator.h	/^	State* state_;$/;"	m	class:despot::Evaluator
state_callback	navi_mdp/scripts/base_move.py	/^    def state_callback(self,data):$/;"	m	class:BaseMoveCBA
state_id	despot/include/despot/core/pomdp.h	/^	int state_id;$/;"	m	class:despot::State
state_ids	despot/include/despot/pomdpx/parser/parser.h	/^  std::vector<int> state_ids;$/;"	m	struct:despot::TerminalPattern
state_indexer	despot/src/core/belief.cpp	/^void ParticleBelief::state_indexer(const StateIndexer* indexer) {$/;"	f	class:despot::ParticleBelief
state_indexer_	despot/include/despot/core/belief.h	/^	const StateIndexer* state_indexer_;$/;"	m	class:despot::ParticleBelief
state_probs_	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	mutable vector<double> state_probs_;$/;"	m	class:despot::TagHistoryModePolicy	file:
state_probs_	despot/include/despot/core/policy.h	/^	mutable std::vector<double> state_probs_;$/;"	m	class:despot::ModeStatePolicy
state_vals	despot/include/despot/pomdpx/parser/parser.h	/^  std::set<std::vector<int> > state_vals;$/;"	m	struct:despot::TerminalPattern
statesVec_callback	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^void Navigation::statesVec_callback(const std_msgs::Int32MultiArray::ConstPtr &msg)$/;"	f	class:despot::Navigation
states_	despot/examples/cpp_models/adventurer/src/adventurer.h	/^  std::vector<AdventurerState*> states_;$/;"	m	class:despot::Adventurer
states_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<NavigationState*> states_;$/;"	m	class:despot::Navigation
states_	despot/examples/cpp_models/navigation/src/navigation.h	/^	std::vector<NavigationState*> states_;$/;"	m	class:despot::Navigation
states_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<NavigationState*> states_;$/;"	m	class:despot::Navigation
states_	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^	std::vector<RegDemoState*> states_;$/;"	m	class:despot::RegDemo
states_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	std::vector<RockSampleState*> states_;$/;"	m	class:despot::BaseRockSample
states_	despot/examples/cpp_models/simpleNavi/src/simpleNavi.h	/^	std::vector<SimpleState*> states_;$/;"	m	class:despot::SimpleNavi
states_	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.h	/^	std::vector<SimpleState*> states_;$/;"	m	class:despot::SimpleRockSample
states_	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	std::vector<TagState*> states_;$/;"	m	class:despot::BaseTag
states_	despot/include/despot/pomdpx/pomdpx.h	/^	std::vector<POMDPXState*> states_;$/;"	m	class:despot::POMDPX
static_belief_map	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  nav_msgs::OccupancyGrid static_belief_map;$/;"	m	class:Edgeleg_manager
static_belief_map	human_filter/include/people_tracking_filter/followme_action.h	/^  nav_msgs::OccupancyGrid static_belief_map;$/;"	m	class:Edgeleg_manager_action
static_belief_map	human_filter/include/people_tracking_filter/service_test.h	/^  nav_msgs::OccupancyGrid static_belief_map;$/;"	m	class:Edgeleg_manager_srv
static_belief_map	villa_navi_service/include/navi_service_node.h	/^	nav_msgs::OccupancyGrid static_belief_map;$/;"	m	class:villa_navi_srv
static_belief_map_pub	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  ros::Publisher static_belief_map_pub;$/;"	m	class:Edgeleg_manager
static_belief_map_pub	human_filter/include/people_tracking_filter/followme_action.h	/^  ros::Publisher static_belief_map_pub;$/;"	m	class:Edgeleg_manager_action
static_belief_map_pub	human_filter/include/people_tracking_filter/service_test.h	/^  ros::Publisher static_belief_map_pub;$/;"	m	class:Edgeleg_manager_srv
static_belief_map_pub	villa_navi_service/include/navi_service_node.h	/^	ros::Publisher static_belief_map_pub;$/;"	m	class:villa_navi_srv
static_mapCallback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::static_mapCallback(const nav_msgs::OccupancyGrid::ConstPtr& msg)$/;"	f	class:Dynamic_Manager
static_mapCallback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::static_mapCallback(const nav_msgs::OccupancyGrid::ConstPtr& msg)$/;"	f	class:MDPManager
statistics_	despot/include/despot/solver/aems.h	/^	SearchStatistics statistics_;$/;"	m	class:despot::AEMS
statistics_	despot/include/despot/solver/despot.h	/^	SearchStatistics statistics_;$/;"	m	class:despot::DESPOT
std	despot/include/despot/core/history.h	/^namespace std {$/;"	n
step	despot/include/despot/evaluator.h	/^	inline int step() {$/;"	f	class:despot::Evaluator
stepSize	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	int stepSize;				\/\/velocity$/;"	m	class:despot::NavigationState
stepSize	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int stepSize;				\/\/velocity$/;"	m	class:despot::NavigationState
step_	despot/include/despot/evaluator.h	/^	int step_;$/;"	m	class:despot::Evaluator
step_reward	despot/include/despot/core/node.h	/^	double step_reward;$/;"	m	class:despot::QNode
str	despot/include/despot/util/tinyxml/tinystr.h	/^		char str[1];$/;"	m	struct:despot::util::tinyxml::TiXmlString::Rep
str	despot/include/despot/util/tinyxml/tinyxml.h	/^		const char* str;$/;"	m	struct:despot::util::tinyxml::TiXmlBase::Entity
strLength	despot/include/despot/util/tinyxml/tinyxml.h	/^		unsigned int strLength;$/;"	m	struct:despot::util::tinyxml::TiXmlBase::Entity
stream	despot/include/despot/util/optionparser.h	/^		Stream* stream;$/;"	m	struct:despot::option::PrintUsageImplementation::StreamWriter
stream	despot/src/util/logging.cpp	/^log_ostream& logging::stream(int level) {$/;"	f	class:despot::logging
stream	despot/src/util/logging.cpp	/^void logging::stream(int level, ostream& out) {$/;"	f	class:despot::logging
streams_	despot/include/despot/random_streams.h	/^  std::vector<std::vector<double> > streams_; \/\/ streams_[i] is associated with i-th particle$/;"	m	class:despot::RandomStreams
streams_	despot/include/despot/util/logging.h	/^	static std::vector<log_ostream*> streams_;$/;"	m	class:despot::logging
streams_	despot/src/util/logging.cpp	/^vector<log_ostream*> logging::streams_ = logging::InitializeLogStreams();$/;"	m	class:despot::logging	file:
streq	despot/include/despot/util/optionparser.h	/^	static bool streq(const char* st1, const char* st2) {$/;"	f	class:despot::option::Parser
streqabbr	despot/include/despot/util/optionparser.h	/^	static bool streqabbr(const char* st1, const char* st2, long long min) {$/;"	f	class:despot::option::Parser
swap	despot/include/despot/util/tinyxml/tinystr.h	/^	void swap(TiXmlString& other) {$/;"	f	class:despot::util::tinyxml::TiXmlString
sync	despot/src/util/logging.cpp	/^int log_ostream::log_buf::sync() {$/;"	f	class:despot::log_ostream::log_buf
sys_matrix_	human_filter/include/people_tracking_filter/tracker_kalman.h	/^  MatrixWrapper::Matrix                                   sys_matrix_;$/;"	m	class:estimation::TrackerKalman
sys_model_	human_filter/include/people_tracking_filter/detector_particle.h	/^  BFL::SysModelVector                                       sys_model_;$/;"	m	class:estimation::DetectorParticle
sys_model_	human_filter/include/people_tracking_filter/tracker_kalman.h	/^  BFL::LinearAnalyticSystemModelGaussianUncertainty*      sys_model_;$/;"	m	class:estimation::TrackerKalman
sys_model_	human_filter/include/people_tracking_filter/tracker_particle.h	/^  BFL::SysModelPosVel                                       sys_model_;$/;"	m	class:estimation::TrackerParticle
sys_pdf_	human_filter/include/people_tracking_filter/tracker_kalman.h	/^  BFL::LinearAnalyticConditionalGaussian*                 sys_pdf_;$/;"	m	class:estimation::TrackerKalman
sys_sigma_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  BFL::StatePosVel sys_sigma_;$/;"	m	class:estimation::PeopleTrackingNode
sys_sigma_	human_filter/include/people_tracking_filter/tracker_kalman.h	/^  MatrixWrapper::SymmetricMatrix                          sys_sigma_;$/;"	m	class:estimation::TrackerKalman
t_	navi_mdp/src/base_conti_actionlib.cpp	/^std::vector<double> t_;$/;"	v
tablestart	despot/include/despot/util/optionparser.h	/^		const Descriptor* tablestart; \/\/!< The 1st descriptor of the current table.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
tabsize	despot/include/despot/util/tinyxml/tinyxml.h	/^	int tabsize;$/;"	m	class:despot::util::tinyxml::TiXmlDocument
tabsize	despot/src/util/tinyxml/tinyxmlparser.cpp	/^	int tabsize;$/;"	m	class:despot::util::tinyxml::TiXmlParsingData	file:
tag	despot/include/despot/util/optionparser.h	/^	static Option* tag(Option* ptr) {$/;"	f	class:despot::option::Option
tag_model_	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	const BaseTag* tag_model_;$/;"	m	class:despot::TagBlindBeliefPolicy	file:
tag_model_	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	const BaseTag* tag_model_;$/;"	m	class:despot::TagHistoryModePolicy	file:
tag_model_	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	const BaseTag* tag_model_;$/;"	m	class:despot::TagManhattanUpperBound	file:
tag_model_	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	const BaseTag* tag_model_;$/;"	m	class:despot::TagPOMCPPrior	file:
tag_model_	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	const BaseTag* tag_model_;$/;"	m	class:despot::TagSHRPolicy	file:
tag_model_	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	const BaseTag* tag_model_;$/;"	m	class:despot::TagSPParticleUpperBound	file:
tag_model_	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	const BaseTag* tag_model_;$/;"	m	class:despot::TagBelief
tail	despot/include/despot/util/optionparser.h	/^		int tail; \/\/!< @brief index for next read - 1 (i.e. increment tail BEFORE read)$/;"	m	class:despot::option::PrintUsageImplementation::LineWrapper
target_finish_time	despot/include/despot/evaluator.h	/^	inline double target_finish_time() {$/;"	f	class:despot::Evaluator
target_finish_time	despot/include/despot/evaluator.h	/^	inline void target_finish_time(double t) {$/;"	f	class:despot::Evaluator
target_finish_time_	despot/include/despot/evaluator.h	/^	double target_finish_time_;$/;"	m	class:despot::Evaluator
target_line_in_block	despot/include/despot/util/optionparser.h	/^		int target_line_in_block; \/\/!< Line index of the parts we should return to the user on this iteration.$/;"	m	class:despot::option::PrintUsageImplementation::LinePartIterator
targetup	villa_navi_service/include/navi_service_node.h	/^	int targetup;$/;"	m	class:villa_navi_srv
terminal_reward_funcs_	despot/include/despot/pomdpx/parser/parser.h	/^	std::vector<Function> terminal_reward_funcs_;$/;"	m	class:despot::Parser
terminal_reward_vars_	despot/include/despot/pomdpx/parser/parser.h	/^	mutable std::vector<RewardVar> terminal_reward_vars_;$/;"	m	class:despot::Parser
terminal_state_patterns_	despot/include/despot/pomdpx/parser/parser.h	/^  std::vector<TerminalPattern> terminal_state_patterns_;$/;"	m	class:despot::Parser
text	despot/examples/cpp_models/adventurer/src/adventurer.cpp	/^string AdventurerState::text() const {$/;"	f	class:despot::AdventurerState
text	despot/examples/cpp_models/bridge/src/bridge.cpp	/^string BridgeState::text() const {$/;"	f	class:despot::BridgeState
text	despot/examples/cpp_models/chain/src/chain.cpp	/^string ChainState::text() const {$/;"	f	class:despot::ChainState
text	despot/examples/cpp_models/chain/src/chain.cpp	/^string FullChainBelief::text() const {$/;"	f	class:despot::FullChainBelief
text	despot/examples/cpp_models/chain/src/chain.cpp	/^string SemiChainBelief::text() const {$/;"	f	class:despot::SemiChainBelief
text	despot/examples/cpp_models/localnavigation/src/localnavigation.cpp	/^string NavigationState::text() const {$/;"	f	class:despot::NavigationState
text	despot/examples/cpp_models/navigation/src/navigation.cpp	/^string NavigationState::text() const {$/;"	f	class:despot::NavigationState
text	despot/examples/cpp_models/pathfollowing/src/pathfollowing.cpp	/^string NavigationState::text() const {$/;"	f	class:despot::NavigationState
text	despot/examples/cpp_models/reg_demo/src/reg_demo.cpp	/^string RegDemoState::text() const {$/;"	f	class:despot::RegDemoState
text	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.cpp	/^string RockSampleState::text() const {$/;"	f	class:despot::RockSampleState
text	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^string SimpleState::text() const {$/;"	f	class:despot::SimpleState
text	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^string SimpleState::text() const {$/;"	f	class:despot::SimpleState
text	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^string TagState::text() const {$/;"	f	class:despot::TagState
text	despot/examples/cpp_models/tiger/src/tiger.cpp	/^string TigerState::text() const {$/;"	f	class:despot::TigerState
text	despot/src/core/belief.cpp	/^string Belief::text() const {$/;"	f	class:despot::Belief
text	despot/src/core/belief.cpp	/^string ParticleBelief::text() const {$/;"	f	class:despot::ParticleBelief
text	despot/src/core/pomdp.cpp	/^string State::text() const {$/;"	f	class:despot::State
text	despot/src/pomdpx/pomdpx.cpp	/^string POMDPXState::text() const {$/;"	f	class:despot::POMDPXState
tf_buffer_	navi_mdp/include/PathManager.h	/^ 	tf2_ros::Buffer tf_buffer_;$/;"	m	class:PathManager
theta_	despot/include/despot/util/gamma.h	/^	double theta_;$/;"	m	class:despot::Gamma
tiger_position	despot/examples/cpp_models/tiger/src/tiger.h	/^	int tiger_position;$/;"	m	class:despot::TigerState
time_backup	despot/include/despot/core/solver.h	/^	double time_backup;$/;"	m	struct:despot::SearchStatistics
time_node_expansion	despot/include/despot/core/solver.h	/^	double time_node_expansion;$/;"	m	struct:despot::SearchStatistics
time_path	despot/include/despot/core/solver.h	/^	double time_path;$/;"	m	struct:despot::SearchStatistics
time_per_move	despot/include/despot/config.h	/^	double time_per_move;  \/\/ CPU time available to construct the search tree$/;"	m	struct:despot::Config
time_search	despot/include/despot/core/solver.h	/^	double time_search;$/;"	m	struct:despot::SearchStatistics
timer	despot/include/despot/util/timer.h	/^	pthread_t timer;$/;"	m	class:despot::Timer
timing	despot/include/despot/util/timer.h	/^	void* timing(void* arg) {$/;"	f	class:despot::Timer
tinyxml	despot/include/despot/pomdpx/parser/parser.h	/^namespace tinyxml {$/;"	n	namespace:despot::util
tinyxml	despot/include/despot/util/tinyxml/tinystr.h	/^namespace tinyxml {$/;"	n	namespace:despot::util
tinyxml	despot/include/despot/util/tinyxml/tinyxml.h	/^namespace tinyxml {$/;"	n	namespace:despot::util
tinyxml	despot/src/util/tinyxml/tinystr.cpp	/^namespace tinyxml {$/;"	n	namespace:despot::util	file:
tinyxml	despot/src/util/tinyxml/tinyxml.cpp	/^namespace tinyxml {$/;"	n	namespace:despot::util	file:
tinyxml	despot/src/util/tinyxml/tinyxmlerror.cpp	/^namespace tinyxml {$/;"	n	namespace:despot::util	file:
tinyxml	despot/src/util/tinyxml/tinyxmlparser.cpp	/^namespace tinyxml {$/;"	n	namespace:despot::util	file:
to_string	despot/include/despot/util/util.h	/^std::string to_string(T t) {$/;"	f	namespace:despot
topic	navi_mdp/scripts/human_marker.py	/^topic = 'human_target'$/;"	v
topic_array	navi_mdp/scripts/human_marker.py	/^topic_array = 'human_boxes'$/;"	v
total_discounted_reward_	despot/include/despot/evaluator.h	/^	double total_discounted_reward_;$/;"	m	class:despot::Evaluator
total_undiscounted_reward_	despot/include/despot/evaluator.h	/^	double total_undiscounted_reward_;$/;"	m	class:despot::Evaluator
track_cmd	villa_navi_service/include/navi_service_node.h	/^	std_msgs::Int8 track_cmd;$/;"	m	class:villa_navi_srv
tracker	despot/src/core/globals.cpp	/^ExecTracker tracker;$/;"	m	namespace:despot::Globals	file:
tracker_counter_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  unsigned int tracker_counter_;$/;"	m	class:estimation::PeopleTrackingNode
tracker_init_dist	human_filter/src/edge_leg_filter_node.cpp	/^static const double       tracker_init_dist          = 4.0;$/;"	v	file:
tracker_init_dist	human_filter/src/followme_action.cpp	/^static const double       tracker_init_dist          = 4.0;$/;"	v	file:
tracker_init_dist	human_filter/src/people_tracking_node.cpp	/^static const double       tracker_init_dist          = 4.0;$/;"	v	file:
tracker_init_dist	human_filter/src/service_test.cpp	/^static const double       tracker_init_dist          = 4.0;$/;"	v	file:
tracker_initialized_	human_filter/include/people_tracking_filter/tracker_kalman.h	/^  bool tracker_initialized_;$/;"	m	class:estimation::TrackerKalman
tracker_initialized_	human_filter/include/people_tracking_filter/tracker_particle.h	/^  bool tracker_initialized_;$/;"	m	class:estimation::TrackerParticle
trackers_	human_filter/include/people_tracking_filter/people_tracking_node.h	/^  std::list<Tracker*> trackers_;$/;"	m	class:estimation::PeopleTrackingNode
transition_funcs_	despot/include/despot/pomdpx/parser/parser.h	/^	std::vector<CPT*> transition_funcs_;$/;"	m	class:despot::Parser
transition_probabilities_	despot/examples/cpp_models/adventurer/src/adventurer.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_; \/\/state, action, [state, weight]$/;"	m	class:despot::Adventurer
transition_probabilities_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_; \/\/state, action, [state, weight]$/;"	m	class:despot::Navigation
transition_probabilities_	despot/examples/cpp_models/navigation/src/navigation.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_; \/\/state, action, [state, weight]$/;"	m	class:despot::Navigation
transition_probabilities_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_; \/\/state, action, [state, weight]$/;"	m	class:despot::Navigation
transition_probabilities_	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_; \/\/state, action, [state, weight]$/;"	m	class:despot::RegDemo
transition_probabilities_	despot/examples/cpp_models/rock_sample/src/base/base_rock_sample.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_;$/;"	m	class:despot::BaseRockSample
transition_probabilities_	despot/examples/cpp_models/tag/src/base/base_tag.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_; \/\/state, action, [state, weight]$/;"	m	class:despot::BaseTag
transition_probabilities_	despot/include/despot/pomdpx/pomdpx.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_;$/;"	m	class:despot::POMDPX
trap_pos_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	int goal_pos_, trap_pos_;$/;"	m	class:despot::Navigation
trap_pos_	despot/examples/cpp_models/navigation/src/navigation.h	/^	int goal_pos_, trap_pos_;$/;"	m	class:despot::Navigation
trap_pos_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int goal_pos_, trap_pos_;$/;"	m	class:despot::Navigation
trap_prob_	despot/examples/cpp_models/adventurer/src/adventurer.h	/^  std::vector<double> trap_prob_;$/;"	m	class:despot::Adventurer
trap_prob_	despot/examples/cpp_models/localnavigation/src/localnavigation.h	/^	std::vector<double> trap_prob_;      \/\/ trap_prob_[y * xsize_ + x]$/;"	m	class:despot::Navigation
trap_prob_	despot/examples/cpp_models/navigation/src/navigation.h	/^	std::vector<double> trap_prob_; \/\/ trap_prob_[y * xsize_ + x]$/;"	m	class:despot::Navigation
trap_prob_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<double> trap_prob_;      \/\/ trap_prob_[y * xsize_ + x]$/;"	m	class:despot::Navigation
trap_prob_	despot/examples/cpp_models/reg_demo/src/reg_demo.h	/^	std::vector<double> trap_prob_;$/;"	m	class:despot::RegDemo
trigger	navi_mdp/scripts/wrist	/^def trigger(req):$/;"	f
type	despot/include/despot/util/optionparser.h	/^	const int type;$/;"	m	struct:despot::option::Descriptor
type	despot/include/despot/util/optionparser.h	/^	int type() const {$/;"	f	class:despot::option::Option
type	despot/include/despot/util/tinyxml/tinyxml.h	/^	NodeType type;$/;"	m	class:despot::util::tinyxml::TiXmlNode
undiscounted_round_rewards_	despot/include/despot/evaluator.h	/^	std::vector<double> undiscounted_round_rewards_;$/;"	m	class:despot::Evaluator
unit_size_	despot/examples/cpp_models/tag/src/laser_tag/laser_tag.h	/^	double unit_size_;$/;"	m	class:despot::LaserTag
unit_size_	despot/examples/cpp_models/tag/src/noisy_laser_tag/noisy_laser_tag.h	/^	double unit_size_;$/;"	m	class:despot::NoisyLaserTag
unit_step	navi_mdp/src/global_planner.cpp	/^double unit_step=0.25;$/;"	v
untag	despot/include/despot/util/optionparser.h	/^	static Option* untag(Option* ptr) {$/;"	f	class:despot::option::Option
updateCorrection	human_filter/src/detector_particle.cpp	/^bool DetectorParticle::updateCorrection(const tf::Vector3&  meas, const MatrixWrapper::SymmetricMatrix& cov, const double time)$/;"	f	class:estimation::DetectorParticle
updateCorrection	human_filter/src/tracker_kalman.cpp	/^bool TrackerKalman::updateCorrection(const tf::Vector3&  meas, const MatrixWrapper::SymmetricMatrix& cov)$/;"	f	class:estimation::TrackerKalman
updateCorrection	human_filter/src/tracker_particle.cpp	/^bool TrackerParticle::updateCorrection(const tf::Vector3&  meas, const MatrixWrapper::SymmetricMatrix& cov)$/;"	f	class:estimation::TrackerParticle
updateMap	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::updateMap(vector<int>& localmap_, vector<int>& local_start, vector<int>& local_goal)$/;"	f	class:Dynamic_Manager
updateMap	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::updateMap(vector<int>& localmap_, vector<int>& local_start, vector<int>& local_goal)$/;"	f	class:MDPManager
updatePrediction	human_filter/src/detector_particle.cpp	/^bool DetectorParticle::updatePrediction(const double dt)$/;"	f	class:estimation::DetectorParticle
updatePrediction	human_filter/src/tracker_kalman.cpp	/^bool TrackerKalman::updatePrediction(const double time)$/;"	f	class:estimation::TrackerKalman
updatePrediction	human_filter/src/tracker_particle.cpp	/^bool TrackerParticle::updatePrediction(const double time)$/;"	f	class:estimation::TrackerParticle
updateUprimePi	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::updateUprimePi(int state_id)$/;"	f	class:Dynamic_Manager
updateUprimePi	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::updateUprimePi(int state_id)$/;"	f	class:MDPManager
update_human_occ_belief_scan	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::update_human_occ_belief_scan()$/;"	f	class:Dynamic_Manager
update_length	despot/include/despot/util/optionparser.h	/^		void update_length() {$/;"	f	class:despot::option::PrintUsageImplementation::LinePartIterator
upmax	despot/include/despot/util/optionparser.h	/^	static void upmax(int& i1, int i2) {$/;"	f	struct:despot::option::PrintUsageImplementation
upper_bound	despot/src/core/node.cpp	/^double QNode::upper_bound() const {$/;"	f	class:despot::QNode
upper_bound	despot/src/core/node.cpp	/^double VNode::upper_bound() const {$/;"	f	class:despot::VNode
upper_bound	despot/src/core/node.cpp	/^void QNode::upper_bound(double value) {$/;"	f	class:despot::QNode
upper_bound	despot/src/core/node.cpp	/^void VNode::upper_bound(double value) {$/;"	f	class:despot::VNode
upper_bound	despot/src/solver/despot.cpp	/^ScenarioUpperBound* DESPOT::upper_bound() const {$/;"	f	class:despot::DESPOT
upper_bound_	despot/include/despot/core/node.h	/^	double upper_bound_;$/;"	m	class:despot::QNode
upper_bound_	despot/include/despot/core/node.h	/^	double upper_bound_;$/;"	m	class:despot::VNode
upper_bound_	despot/include/despot/solver/aems.h	/^	BeliefUpperBound* upper_bound_;$/;"	m	class:despot::AEMS
upper_bound_	despot/include/despot/solver/despot.h	/^	ScenarioUpperBound* upper_bound_;$/;"	m	class:despot::DESPOT
upper_bounds_	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^	vector<vector<double> > upper_bounds_;$/;"	m	class:despot::SimpleNaviParticleUpperBound	file:
upper_bounds_	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^	vector<vector<double> > upper_bounds_;$/;"	m	class:despot::SimpleRockSampleParticleUpperBound	file:
usage	despot/include/despot/simple_tui.h	/^const option::Descriptor usage[] = {$/;"	m	namespace:despot
useMicrosoftBOM	despot/include/despot/util/tinyxml/tinyxml.h	/^	bool useMicrosoftBOM; \/\/ the UTF-8 BOM were found when read. Note this, and try to write.$/;"	m	class:despot::util::tinyxml::TiXmlDocument
userData	despot/include/despot/util/tinyxml/tinyxml.h	/^	void* userData;$/;"	m	class:despot::util::tinyxml::TiXmlBase
userstream	despot/include/despot/util/optionparser.h	/^		const Temporary& userstream;$/;"	m	struct:despot::option::PrintUsageImplementation::TemporaryWriter
utf8ByteTable	despot/include/despot/util/tinyxml/tinyxml.h	/^	static const int utf8ByteTable[256];$/;"	m	class:despot::util::tinyxml::TiXmlBase
utf8ByteTable	despot/src/util/tinyxml/tinyxmlparser.cpp	/^const int TiXmlBase::utf8ByteTable[256] = {$/;"	m	class:despot::util::tinyxml::TiXmlBase	file:
util	despot/include/despot/pomdpx/parser/parser.h	/^namespace util {$/;"	n	namespace:despot
util	despot/include/despot/util/tinyxml/tinystr.h	/^namespace util {$/;"	n	namespace:despot
util	despot/include/despot/util/tinyxml/tinyxml.h	/^namespace util {$/;"	n	namespace:despot
util	despot/src/util/tinyxml/tinystr.cpp	/^namespace util {$/;"	n	namespace:despot	file:
util	despot/src/util/tinyxml/tinyxml.cpp	/^namespace util {$/;"	n	namespace:despot	file:
util	despot/src/util/tinyxml/tinyxmlerror.cpp	/^namespace util {$/;"	n	namespace:despot	file:
util	despot/src/util/tinyxml/tinyxmlparser.cpp	/^namespace util {$/;"	n	namespace:despot	file:
utility_upper_bound	despot/include/despot/core/node.h	/^	double utility_upper_bound;$/;"	m	class:despot::QNode
utility_upper_bound	despot/include/despot/core/node.h	/^	double utility_upper_bound;$/;"	m	class:despot::VNode
value	despot/include/despot/core/policy.h	/^	double value;$/;"	m	struct:despot::ValuedAction
value	despot/include/despot/util/tinyxml/tinyxml.h	/^	TIXML_STRING name;TIXML_STRING value;$/;"	m	class:despot::util::tinyxml::TiXmlAttribute
value	despot/include/despot/util/tinyxml/tinyxml.h	/^	TIXML_STRING value;$/;"	m	class:despot::util::tinyxml::TiXmlNode
value	despot/src/core/node.cpp	/^double QNode::value() const {$/;"	f	class:despot::QNode
value	despot/src/core/node.cpp	/^double VNode::value() const {$/;"	f	class:despot::VNode
value	despot/src/core/node.cpp	/^void QNode::value(double v) {$/;"	f	class:despot::QNode
value	despot/src/core/node.cpp	/^void VNode::value(double v) {$/;"	f	class:despot::VNode
value_	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	vector<double> value_;$/;"	m	class:despot::TagManhattanUpperBound	file:
value_	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^	vector<double> value_;$/;"	m	class:despot::TagSPParticleUpperBound	file:
value_	despot/include/despot/core/node.h	/^	double value_; \/\/ Value of the node$/;"	m	class:despot::QNode
value_	despot/include/despot/core/node.h	/^	double value_; \/\/ Value of the node$/;"	m	class:despot::VNode
values	despot/include/despot/pomdpx/parser/variable.h	/^	inline const std::vector<std::string>& values() const {$/;"	f	class:despot::Variable
values	despot/src/pomdpx/parser/variable.cpp	/^void Variable::values(const vector<string>& ve) {$/;"	f	class:despot::Variable
values	despot/src/pomdpx/parser/variable.cpp	/^void Variable::values(string prefix, int num) {$/;"	f	class:despot::Variable
values_	despot/include/despot/pomdpx/parser/function.h	/^  std::vector<std::vector<double> > values_; \/\/ values_[parents][child]$/;"	m	class:despot::Function
values_	despot/include/despot/pomdpx/parser/variable.h	/^  std::vector<std::string> values_; \/\/ Possible values of the variable$/;"	m	class:despot::Variable
variables_	despot/include/despot/pomdpx/parser/parser.h	/^  std::map<std::string, Variable*> variables_;$/;"	m	class:despot::Parser
vec_id	despot/include/despot/pomdpx/pomdpx.h	/^  std::vector<int> vec_id;$/;"	m	class:despot::POMDPXState
vel_	human_filter/include/people_tracking_filter/state_pos_vel.h	/^  tf::Vector3 pos_, vel_;$/;"	m	class:BFL::StatePosVel
verbosity_	despot/include/despot/util/logging.h	/^	static int verbosity_;$/;"	m	class:despot::logging
verbosity_	despot/src/util/logging.cpp	/^int logging::verbosity_ = ERROR;$/;"	m	class:despot::logging	file:
version	despot/include/despot/util/tinyxml/tinyxml.h	/^	TIXML_STRING version;TIXML_STRING encoding;TIXML_STRING standalone;$/;"	m	class:despot::util::tinyxml::TiXmlDeclaration
viewTarget	navi_mdp/include/Dynamic_Manager.h	/^    std::vector<double> viewTarget;$/;"	m	class:Dynamic_Manager
viewTarget	navi_mdp/include/PathManager.h	/^	std::vector<double> viewTarget;$/;"	m	class:PathManager
viewTarget_visual_pub	navi_mdp/include/Dynamic_Manager.h	/^    ros::Publisher  viewTarget_visual_pub; $/;"	m	class:Dynamic_Manager
viewTarget_visual_pub	navi_mdp/include/PathManager.h	/^ 	ros::Publisher viewTarget_visual_pub;$/;"	m	class:PathManager
viewpoint_robot	villa_navi_service/include/navi_service_node.h	/^	std::vector< double >  viewpoint_robot;$/;"	m	class:villa_navi_srv
viewpub_iters	navi_mdp/include/Dynamic_Manager.h	/^    int viewpub_iters;$/;"	m	class:Dynamic_Manager
viewpub_iters	navi_mdp/include/PathManager.h	/^	int viewpub_iters;$/;"	m	class:PathManager
villa_navi_srv	villa_navi_service/include/navi_service_node.h	/^class villa_navi_srv{$/;"	c
villa_navi_srv	villa_navi_service/src/navi_service_node.cpp	/^villa_navi_srv::villa_navi_srv():index(0),m_numofhuman(0),m_receiveiter(0){$/;"	f	class:villa_navi_srv
visiblie_idx_set	human_filter/include/people_tracking_filter/edge_leg_filter_node.h	/^  std::vector<int> visiblie_idx_set;$/;"	m	class:Edgeleg_manager
visiblie_idx_set	human_filter/include/people_tracking_filter/followme_action.h	/^  std::vector<int> visiblie_idx_set;$/;"	m	class:Edgeleg_manager_action
visiblie_idx_set	human_filter/include/people_tracking_filter/service_test.h	/^  std::vector<int> visiblie_idx_set;$/;"	m	class:Edgeleg_manager_srv
visiblie_idx_set	navi_mdp/include/Dynamic_Manager.h	/^	std::vector<int> visiblie_idx_set;$/;"	m	class:Dynamic_Manager
visiblie_idx_set	villa_navi_service/include/navi_service_node.h	/^	std::vector<int> visiblie_idx_set;$/;"	m	class:villa_navi_srv
vstar	despot/include/despot/core/node.h	/^	VNode* vstar;$/;"	m	class:despot::QNode
vstar	despot/include/despot/core/node.h	/^	VNode* vstar;$/;"	m	class:despot::VNode
weight	despot/include/despot/core/pomdp.h	/^	double weight;$/;"	m	class:despot::State
width	despot/include/despot/util/optionparser.h	/^		int width;$/;"	m	class:despot::option::PrintUsageImplementation::LineWrapper
window	ros-keyboard/src/keyboard.h	/^      SDL_Surface* window;$/;"	m	class:keyboard::Keyboard
workhorse	despot/include/despot/util/optionparser.h	/^inline bool Parser::workhorse(bool gnu, const Descriptor usage[], int numargs,$/;"	f	class:despot::option::Parser
world_seed	despot/include/despot/evaluator.h	/^	virtual inline void world_seed(unsigned seed) {$/;"	f	class:despot::Evaluator
world_seed	despot/include/despot/evaluator.h	/^	virtual inline void world_seed(unsigned seed) {$/;"	f	class:despot::POMDPEvaluator
wrist_trigger_server	navi_mdp/scripts/wrist	/^def wrist_trigger_server():$/;"	f
write	despot/include/despot/util/optionparser.h	/^		Function* write;$/;"	m	struct:despot::option::PrintUsageImplementation::FunctionWriter
write	despot/include/despot/util/optionparser.h	/^		Syscall* write;$/;"	m	struct:despot::option::PrintUsageImplementation::SyscallWriter
write_one_line	despot/include/despot/util/optionparser.h	/^		void write_one_line(IStringWriter& write) {$/;"	f	class:despot::option::PrintUsageImplementation::LineWrapper
wrote_something	despot/include/despot/util/optionparser.h	/^		bool wrote_something;$/;"	m	class:despot::option::PrintUsageImplementation::LineWrapper
x	despot/include/despot/util/coord.h	/^	int x, y;$/;"	m	struct:despot::Coord
x	despot/include/despot/util/optionparser.h	/^		int x;$/;"	m	class:despot::option::PrintUsageImplementation::LineWrapper
x_	navi_mdp/include/PathManager.h	/^	std::vector<double> x_;$/;"	m	class:PathManager
x_	navi_mdp/src/base_actionlib.cpp	/^std::vector<double> x_;$/;"	v
x_	navi_mdp/src/base_conti_actionlib.cpp	/^std::vector<double> x_;$/;"	v
x_size	navi_mdp/src/global_planner.cpp	/^int x_size=Grid_Num_X;$/;"	v
xi	despot/include/despot/config.h	/^	double xi; \/\/ xi * gap(root) is the target uncertainty at the root.$/;"	m	struct:despot::Config
xsize	despot/include/despot/util/grid.h	/^	int xsize() const {$/;"	f	class:despot::Grid
xsize_	despot/examples/cpp_models/navigation/src/navigation.h	/^	int xsize_, ysize_;$/;"	m	class:despot::Navigation
xsize_	despot/include/despot/util/grid.h	/^	int xsize_, ysize_;$/;"	m	class:despot::Grid
y	despot/include/despot/util/coord.h	/^	int x, y;$/;"	m	struct:despot::Coord
y_	navi_mdp/include/PathManager.h	/^	std::vector<double> y_;$/;"	m	class:PathManager
y_	navi_mdp/src/base_actionlib.cpp	/^std::vector<double> y_;$/;"	v
y_	navi_mdp/src/base_conti_actionlib.cpp	/^std::vector<double> y_;$/;"	v
y_size	navi_mdp/src/global_planner.cpp	/^int y_size=Grid_Num_Y;$/;"	v
ysize	despot/include/despot/util/grid.h	/^	int ysize() const {$/;"	f	class:despot::Grid
ysize_	despot/examples/cpp_models/navigation/src/navigation.h	/^	int xsize_, ysize_;$/;"	m	class:despot::Navigation
ysize_	despot/include/despot/util/grid.h	/^	int xsize_, ysize_;$/;"	m	class:despot::Grid
~Action	despot/include/despot/util/optionparser.h	/^	virtual ~Action() {$/;"	f	struct:despot::option::Parser::Action
~BaseTag	despot/examples/cpp_models/tag/src/base/base_tag.cpp	/^BaseTag::~BaseTag() {$/;"	f	class:despot::BaseTag
~Belief	despot/src/core/belief.cpp	/^Belief::~Belief() {$/;"	f	class:despot::Belief
~BeliefMDP	despot/src/core/pomdp.cpp	/^BeliefMDP::~BeliefMDP() {$/;"	f	class:despot::BeliefMDP
~BeliefUpperBound	despot/src/core/upper_bound.cpp	/^BeliefUpperBound::~BeliefUpperBound() {$/;"	f	class:despot::BeliefUpperBound
~CPT	despot/src/pomdpx/parser/function.cpp	/^CPT::~CPT() {$/;"	f	class:despot::CPT
~Client	despot/src/ippc/client.cpp	/^Client::~Client(void) {$/;"	f	class:despot::Client
~DESPOT	despot/src/solver/despot.cpp	/^DESPOT::~DESPOT() {$/;"	f	class:despot::DESPOT
~DSPOMDP	despot/src/core/pomdp.cpp	/^DSPOMDP::~DSPOMDP() {$/;"	f	class:despot::DSPOMDP
~DetectorParticle	human_filter/src/detector_particle.cpp	/^DetectorParticle::~DetectorParticle()$/;"	f	class:estimation::DetectorParticle
~Dynamic_Manager	navi_mdp/src/Dynamic_Manager.cpp	/^Dynamic_Manager::~Dynamic_Manager()$/;"	f	class:Dynamic_Manager
~Edgeleg_manager	human_filter/src/edge_leg_filter_node.cpp	/^Edgeleg_manager::~Edgeleg_manager()$/;"	f	class:Edgeleg_manager
~Edgeleg_manager_action	human_filter/src/followme_action.cpp	/^Edgeleg_manager_action::~Edgeleg_manager_action()$/;"	f	class:Edgeleg_manager_action
~Edgeleg_manager_srv	human_filter/src/service_test.cpp	/^Edgeleg_manager_srv::~Edgeleg_manager_srv()$/;"	f	class:Edgeleg_manager_srv
~Evaluator	despot/src/evaluator.cpp	/^Evaluator::~Evaluator() {$/;"	f	class:despot::Evaluator
~Function	despot/src/pomdpx/parser/function.cpp	/^Function::~Function() {$/;"	f	class:despot::Function
~GaussianPosVel	human_filter/src/gaussian_pos_vel.cpp	/^GaussianPosVel::~GaussianPosVel() {}$/;"	f	class:BFL::GaussianPosVel
~GaussianVector	human_filter/src/gaussian_vector.cpp	/^GaussianVector::~GaussianVector() {}$/;"	f	class:BFL::GaussianVector
~HierarchyCPT	despot/src/pomdpx/parser/function.cpp	/^HierarchyCPT::~HierarchyCPT() {$/;"	f	class:despot::HierarchyCPT
~IPPCEvaluator	despot/src/evaluator.cpp	/^IPPCEvaluator::~IPPCEvaluator() {$/;"	f	class:despot::IPPCEvaluator
~IStringWriter	despot/include/despot/util/optionparser.h	/^		virtual ~IStringWriter() {$/;"	f	struct:despot::option::PrintUsageImplementation::IStringWriter
~Keyboard	ros-keyboard/src/keyboard.cpp	/^keyboard::Keyboard::~Keyboard(void)$/;"	f	class:keyboard::Keyboard
~MCPdfPosVel	human_filter/src/mcpdf_pos_vel.cpp	/^MCPdfPosVel::~MCPdfPosVel() {}$/;"	f	class:MCPdfPosVel
~MCPdfVector	human_filter/src/mcpdf_vector.cpp	/^MCPdfVector::~MCPdfVector() {}$/;"	f	class:MCPdfVector
~MDP	despot/src/core/mdp.cpp	/^MDP::~MDP() {$/;"	f	class:despot::MDP
~MDPManager	navi_mdp/src/MDPmanager.cpp	/^MDPManager::~MDPManager()$/;"	f	class:MDPManager
~MMAPInferencer	despot/src/core/pomdp.cpp	/^MMAPInferencer::~MMAPInferencer() {$/;"	f	class:despot::MMAPInferencer
~MapParam	navi_mdp/src/MapParam.cpp	/^MapParam::~MapParam()$/;"	f	class:MapParam
~MeasModelPos	human_filter/include/people_tracking_filter/measmodel_pos.h	/^  ~MeasModelPos()$/;"	f	class:BFL::MeasModelPos
~MeasModelVector	human_filter/include/people_tracking_filter/measmodel_vector.h	/^  ~MeasModelVector()$/;"	f	class:BFL::MeasModelVector
~MeasPdfPos	human_filter/src/measmodel_pos.cpp	/^MeasPdfPos::~MeasPdfPos()$/;"	f	class:MeasPdfPos
~MeasPdfVector	human_filter/src/measmodel_vector.cpp	/^MeasPdfVector::~MeasPdfVector()$/;"	f	class:MeasPdfVector
~MemoryPool	despot/include/despot/util/memorypool.h	/^	~MemoryPool() {$/;"	f	class:despot::MemoryPool
~NamedVar	despot/src/pomdpx/parser/variable.cpp	/^NamedVar::~NamedVar() {$/;"	f	class:despot::NamedVar
~Navigation	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	~Navigation(){m_fileout.close();}$/;"	f	class:despot::Navigation
~POMCPPrior	despot/src/solver/pomcp.cpp	/^POMCPPrior::~POMCPPrior() {$/;"	f	class:despot::POMCPPrior
~POMDPEvaluator	despot/src/evaluator.cpp	/^POMDPEvaluator::~POMDPEvaluator() {$/;"	f	class:despot::POMDPEvaluator
~POMDPXState	despot/src/pomdpx/pomdpx.cpp	/^POMDPXState::~POMDPXState() {$/;"	f	class:despot::POMDPXState
~Parser	despot/src/pomdpx/parser/parser.cpp	/^Parser::~Parser() {$/;"	f	class:despot::Parser
~ParticleBelief	despot/src/core/belief.cpp	/^ParticleBelief::~ParticleBelief() {$/;"	f	class:despot::ParticleBelief
~ParticleUpperBound	despot/src/core/upper_bound.cpp	/^ParticleUpperBound::~ParticleUpperBound() {$/;"	f	class:despot::ParticleUpperBound
~PathManager	navi_mdp/src/PathManager.cpp	/^PathManager::~PathManager()$/;"	f	class:PathManager
~PeopleTrackingNode	human_filter/src/people_tracking_node.cpp	/^PeopleTrackingNode::~PeopleTrackingNode()$/;"	f	class:estimation::PeopleTrackingNode
~Policy	despot/src/core/policy.cpp	/^Policy::~Policy() {$/;"	f	class:despot::Policy
~QNode	despot/src/core/node.cpp	/^QNode::~QNode() {$/;"	f	class:despot::QNode
~ScenarioUpperBound	despot/src/core/upper_bound.cpp	/^ScenarioUpperBound::~ScenarioUpperBound() {$/;"	f	class:despot::ScenarioUpperBound
~SimpleState	despot/examples/cpp_models/simpleNavi/src/simpleNavi.cpp	/^SimpleState::~SimpleState() {$/;"	f	class:despot::SimpleState
~SimpleState	despot/examples/cpp_models/simple_rock_sample/src/simple_rock_sample.cpp	/^SimpleState::~SimpleState() {$/;"	f	class:despot::SimpleState
~SimpleTUI	despot/src/simple_tui.cpp	/^SimpleTUI::~SimpleTUI() {}$/;"	f	class:despot::SimpleTUI
~Solver	despot/src/core/solver.cpp	/^Solver::~Solver() {$/;"	f	class:despot::Solver
~State	despot/src/core/pomdp.cpp	/^State::~State() {$/;"	f	class:despot::State
~StateIndexer	despot/src/core/pomdp.cpp	/^StateIndexer::~StateIndexer() {$/;"	f	class:despot::StateIndexer
~StatePolicy	despot/src/core/pomdp.cpp	/^StatePolicy::~StatePolicy() {$/;"	f	class:despot::StatePolicy
~StatePosVel	human_filter/include/people_tracking_filter/state_pos_vel.h	/^  ~StatePosVel() {};$/;"	f	class:BFL::StatePosVel
~StateVar	despot/src/pomdpx/parser/variable.cpp	/^StateVar::~StateVar() {$/;"	f	class:despot::StateVar
~SysModelPosVel	human_filter/include/people_tracking_filter/sysmodel_pos_vel.h	/^  ~SysModelPosVel()$/;"	f	class:BFL::SysModelPosVel
~SysModelVector	human_filter/include/people_tracking_filter/sysmodel_vector.h	/^  ~SysModelVector()$/;"	f	class:BFL::SysModelVector
~SysPdfPosVel	human_filter/src/sysmodel_pos_vel.cpp	/^SysPdfPosVel::~SysPdfPosVel()$/;"	f	class:SysPdfPosVel
~SysPdfVector	human_filter/src/sysmodel_vector.cpp	/^SysPdfVector::~SysPdfVector()$/;"	f	class:SysPdfVector
~TiXmlAttributeSet	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlAttributeSet::~TiXmlAttributeSet() {$/;"	f	class:despot::util::tinyxml::TiXmlAttributeSet
~TiXmlBase	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual ~TiXmlBase() {$/;"	f	class:despot::util::tinyxml::TiXmlBase
~TiXmlComment	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual ~TiXmlComment() {$/;"	f	class:despot::util::tinyxml::TiXmlComment
~TiXmlDeclaration	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual ~TiXmlDeclaration() {$/;"	f	class:despot::util::tinyxml::TiXmlDeclaration
~TiXmlDocument	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual ~TiXmlDocument() {$/;"	f	class:despot::util::tinyxml::TiXmlDocument
~TiXmlElement	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlElement::~TiXmlElement() {$/;"	f	class:despot::util::tinyxml::TiXmlElement
~TiXmlNode	despot/src/util/tinyxml/tinyxml.cpp	/^TiXmlNode::~TiXmlNode() {$/;"	f	class:despot::util::tinyxml::TiXmlNode
~TiXmlString	despot/include/despot/util/tinyxml/tinystr.h	/^	~TiXmlString() {$/;"	f	class:despot::util::tinyxml::TiXmlString
~TiXmlText	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual ~TiXmlText() {$/;"	f	class:despot::util::tinyxml::TiXmlText
~TiXmlUnknown	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual ~TiXmlUnknown() {$/;"	f	class:despot::util::tinyxml::TiXmlUnknown
~TiXmlVisitor	despot/include/despot/util/tinyxml/tinyxml.h	/^	virtual ~TiXmlVisitor() {$/;"	f	class:despot::util::tinyxml::TiXmlVisitor
~Timer	despot/include/despot/util/timer.h	/^	~Timer() {$/;"	f	class:despot::Timer
~Tracker	human_filter/include/people_tracking_filter/tracker.h	/^  virtual ~Tracker() {};$/;"	f	class:estimation::Tracker
~TrackerKalman	human_filter/src/tracker_kalman.cpp	/^TrackerKalman::~TrackerKalman()$/;"	f	class:estimation::TrackerKalman
~TrackerParticle	human_filter/src/tracker_particle.cpp	/^TrackerParticle::~TrackerParticle()$/;"	f	class:estimation::TrackerParticle
~TrivialParticleUpperBound	despot/src/core/upper_bound.cpp	/^TrivialParticleUpperBound::~TrivialParticleUpperBound() {$/;"	f	class:despot::TrivialParticleUpperBound
~UniformPOMCPPrior	despot/src/solver/pomcp.cpp	/^UniformPOMCPPrior::~UniformPOMCPPrior() {$/;"	f	class:despot::UniformPOMCPPrior
~UniformVector	human_filter/src/uniform_vector.cpp	/^UniformVector::~UniformVector() {}$/;"	f	class:BFL::UniformVector
~VNode	despot/src/core/node.cpp	/^VNode::~VNode() {$/;"	f	class:despot::VNode
~Variable	despot/src/pomdpx/parser/variable.cpp	/^Variable::~Variable() {$/;"	f	class:despot::Variable
~log_buf	despot/src/util/logging.cpp	/^log_ostream::log_buf::~log_buf() {$/;"	f	class:despot::log_ostream::log_buf
~srBSpline	navi_mdp/src/srBSpline.cpp	/^srBSpline::~srBSpline()$/;"	f	class:srBSpline
~villa_navi_srv	villa_navi_service/src/navi_service_node.cpp	/^villa_navi_srv::~villa_navi_srv(){}$/;"	f	class:villa_navi_srv
