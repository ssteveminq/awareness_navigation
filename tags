!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTION_A	despot/examples/cpp_models/chain/src/chain.h	/^		ACTION_A, ACTION_B$/;"	e	enum:despot::Chain::__anon3
ACTION_B	despot/examples/cpp_models/chain/src/chain.h	/^		ACTION_A, ACTION_B$/;"	e	enum:despot::Chain::__anon3
ADVENTURER_H	despot/examples/cpp_models/adventurer/src/adventurer.h	2;"	d
AEMS	despot/include/despot/solver/aems.h	/^class AEMS: public Solver {$/;"	c	namespace:despot
AEMS	despot/src/solver/aems.cpp	/^AEMS::AEMS(const DSPOMDP* model, BeliefLowerBound* lower_bound,$/;"	f	class:despot::AEMS
AEMS2Likelihood	despot/src/solver/aems.cpp	/^double AEMS::AEMS2Likelihood(QNode* qnode) {$/;"	f	class:despot::AEMS
AEMS_H	despot/include/despot/solver/aems.h	2;"	d
ANTRO_a0	edge_leg_detector/src/detector.cpp	32;"	d	file:
ANTRO_a0	edge_leg_detector/src/edge_leg_detector/detector.cpp	31;"	d	file:
ANTRO_a1	edge_leg_detector/src/detector.cpp	33;"	d	file:
ANTRO_a1	edge_leg_detector/src/edge_leg_detector/detector.cpp	32;"	d	file:
ANTRO_b0	edge_leg_detector/src/detector.cpp	34;"	d	file:
ANTRO_b0	edge_leg_detector/src/edge_leg_detector/detector.cpp	33;"	d	file:
ANTRO_b1	edge_leg_detector/src/detector.cpp	35;"	d	file:
ANTRO_b1	edge_leg_detector/src/edge_leg_detector/detector.cpp	34;"	d	file:
ANTRO_c0	edge_leg_detector/src/detector.cpp	36;"	d	file:
ANTRO_c0	edge_leg_detector/src/edge_leg_detector/detector.cpp	35;"	d	file:
ANTRO_c1	edge_leg_detector/src/detector.cpp	37;"	d	file:
ANTRO_c1	edge_leg_detector/src/edge_leg_detector/detector.cpp	36;"	d	file:
ARG_IGNORE	despot/include/despot/util/optionparser.h	/^	ARG_IGNORE,$/;"	e	enum:despot::option::ArgStatus
ARG_ILLEGAL	despot/include/despot/util/optionparser.h	/^	ARG_ILLEGAL$/;"	e	enum:despot::option::ArgStatus
ARG_NONE	despot/include/despot/util/optionparser.h	/^	ARG_NONE,$/;"	e	enum:despot::option::ArgStatus
ARG_OK	despot/include/despot
Action_Pub	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	ros::Publisher   Action_Pub;$/;"	m	class:despot::Navigation
Basepos_Callback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Basepos_Callback(const geometry_msgs::PointStamped::ConstPtr& msg)$/;"	f	class:MDPManager
CellNum2Coord	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::CellNum2Coord(const int Cell_idx, vector<int>& cell_xy)$/;"	f	class:Dynamic_Manager
CellNum2Coord	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::CellNum2Coord(const int Cell_idx, vector<int>& cell_xy)$/;"	f	class:MDPManager
CellNum2globalCoord	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::CellNum2globalCoord(const int Cell_idx, std::vector<double>& cell_xy)$/;"	f	class:Dynamic_Manager
ClikedpointCallback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::ClikedpointCallback(const geometry_msgs::PointStamped::ConstPtr& msg)$/;"	f	class:Dynamic_Manager
ClikedpointCallback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::ClikedpointCallback(const geometry_msgs::PointStamped::ConstPtr& msg)$/;"	f	class:MDPManager
Comparetwopoistions	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::Comparetwopoistions(std::vector<double> pos,std::vector<double> pos2, double criterion)$/;"	f	class:Dynamic_Manager
Comparetwopoistions	navi_mdp/src/MDPmanager.cpp	/^bool MDPManager::Comparetwopoistions(std::vector<double> pos,std::vector<double> pos2, double criterion)$/;"	f	class:MDPManager
Coord2CellNum	navi_mdp/src/Dynamic_Manager.cpp	/^int  Dynamic_Manager::Coord2CellNum(std::vector<int> cell_xy)$/;"	f	class:Dynamic_Manager
Coord2CellNum	navi_mdp/src/MDPmanager.cpp	/^int  MDPManager::Coord2CellNum(std::vector<int> cell_xy)$/;"	f	class:MDPManager
CoordinateTransform_Global2_beliefMap	navi_mdp/src/Dynamic_Manager.cpp	/^int Dynamic_Manager::CoordinateTransform_Global2_beliefMap(double global_x, double global_y)$/;"	f	class:Dynamic_Manager
CoordinateTransform_Global2_cameraMap	navi_mdp/src/Dynamic_Manager.cpp	/^int Dynamic_Manager::CoordinateTransform_Global2_cameraMap(float global_x, float global_y)$/;"	f	class:Dynamic_Manager
CoordinateTransform_Rviz_Grid_Goal	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::CoordinateTransform_Rviz_Grid_Goal(double _x, double _y,int map_type=0)$/;"	f	class:Dynamic_Manager
CoordinateTransform_Rviz_Grid_Goal	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::CoordinateTransform_Rviz_Grid_Goal(double _x, double _y,int map_type=0)$/;"	f	class:MDPManager
CoordinateTransform_Rviz_Grid_Human	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::CoordinateTransform_Rviz_Grid_Human(double _x, double _y,int map_type=0)$/;"	f	class:Dynamic_Manager
CoordinateTransform_Rviz_Grid_Human	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::CoordinateTransform_Rviz_Grid_Human(double _x, double _y,int map_type=0)$/;"	f	class:MDPManager
CoordinateTransform_Rviz_Grid_Start	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::CoordinateTransform_Rviz_Grid_Start(double _x, double _y,int map_type=0)$/;"	f	class:Dynamic_Manager
CoordinateTransform_Rviz_Grid_Start	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::CoordinateTransform_Rviz_Grid_Start(double _x, double _y,int map_type=0)$/;"	f	class:MDPManager
Costmap_Pub	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	ros::Publisher   Costmap_Pub;$/;"	m	class:despot::Navigation
Dynamic_Manager	navi_mdp/src/Dynamic_Manager.cpp	/^Dynamic_Manager::Dynamic_Manager(MapParam* _pMapParam):maxiter(Maxiteration),Action_dim(8),gamma(1),Ra(ra),publishnum(0),ReceiveData(0),m_boolSolve(false),dyn_path_num(0)$/;"	f	class:Dynamic_Manager
E_PASSABLE	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Navigation::__anon1
E_POWER	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Navigation::__anon1
E_SEED	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^		E_PASSABLE, E_SEED, E_POWER$/;"	e	enum:despot::Navigation::__anon1
FindMaxIdx	navi_mdp/src/Dynamic_Manager.cpp	/^int Dynamic_Manager::FindMaxIdx(vector<double> dataset)$/;"	f	class:Dynamic_Manager
FindMaxIdx	navi_mdp/src/MDPmanager.cpp	/^int MDPManager::FindMaxIdx(vector<double> dataset)$/;"	f	class:MDPManager
GetIndex	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	inline int GetIndex(const State* state) const {$/;"	f	class:despot::Navigation
GetMaxReward	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	inline double GetMaxReward() const {$/;"	f	class:despot::Navigation
GetMinRewardAction	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	inline ValuedAction GetMinRewardAction() const {$/;"	f	class:despot::Navigation
GetState	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	inline const State* GetState(int index) const {$/;"	f	class:despot::Navigation
Global2LocalCoord	navi_mdp/src/Dynamic_Manager.cpp	/^vector<int> Dynamic_Manager::Global2LocalCoord(vector<int> Global_coord)$/;"	f	class:Dynamic_Manager
Global2LocalCoord	navi_mdp/src/MDPmanager.cpp	/^vector<int> MDPManager::Global2LocalCoord(vector<int> Global_coord)$/;"	f	class:MDPManager
Global2MapCoord	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::Global2MapCoord(const vector<double>& _globalcoord,vector<int>& _MapCoord)$/;"	f	class:Dynamic_Manager
Global2MapCoord	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Global2MapCoord(const vector<double>& _globalcoord,vector<int>& _MapCoord)$/;"	f	class:MDPManager
Goal	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<bool> Goal; \/\/ bit vector$/;"	m	class:despot::NavigationState
Human_MarkerCallback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::Human_MarkerCallback(const visualization_msgs::Marker::ConstPtr& msg)$/;"	f	class:Dynamic_Manager
Human_MarkerCallback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Human_MarkerCallback(const visualization_msgs::Marker::ConstPtr& msg)$/;"	f	class:MDPManager
Human_Yolo_Callback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Human_Yolo_Callback(const visualization_msgs::MarkerArray::ConstPtr& msg)$/;"	f	class:MDPManager
Human_target_cmdCallback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Human_target_cmdCallback(const std_msgs::Int8::ConstPtr& msg)$/;"	f	class:MDPManager
Init	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::Init()$/;"	f	class:Dynamic_Manager
Init	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Init()$/;"	f	class:MDPManager
IsTargetMoved	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::IsTargetMoved(float target_x, float target_y, float criterion)$/;"	f	class:Dynamic_Manager
IsTargetMoved	navi_mdp/src/MDPmanager.cpp	/^bool MDPManager::IsTargetMoved(float target_x, float target_y, float criterion)$/;"	f	class:MDPManager
IsinDynamicMap	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::IsinDynamicMap(float global_x, float global_y)$/;"	f	class:Dynamic_Manager
IsinDynamicMap	navi_mdp/src/MDPmanager.cpp	/^bool MDPManager::IsinDynamicMap(float global_x, float global_y)$/;"	f	class:MDPManager
Local_mapCallback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Local_mapCallback(const nav_msgs::OccupancyGrid::ConstPtr& msg)$/;"	f	class:MDPManager
MDPManager	navi_mdp/src/MDPmanager.cpp	/^MDPManager::MDPManager(MapParam* _pMapParam):maxiter(Maxiteration),Action_dim(8),gamma(1),Ra(ra),publishnum(0),ReceiveData(0),m_boolSolve(false),dyn_path_num(0)$/;"	f	class:MDPManager
MDPsolPublish	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::MDPsolPublish()$/;"	f	class:MDPManager
MDPsolve	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::MDPsolve()$/;"	f	class:Dynamic_Manager
MDPsolve	navi_mdp/src/MDPmanager.cpp	/^bool MDPManager::MDPsolve()$/;"	f	class:MDPManager
Mapcoord2DynamicCoord	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::Mapcoord2DynamicCoord(const vector<int>& _Mapcoord, vector<double>& dynamicCoord)$/;"	f	class:Dynamic_Manager
Mapcoord2DynamicCoord	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Mapcoord2DynamicCoord(const vector<int>& _Mapcoord, vector<double>& dynamicCoord)$/;"	f	class:MDPManager
Mapcoord2GlobalCoord	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::Mapcoord2GlobalCoord(const vector<int>& _Mapcoord, vector<double>& GlobalCoord)$/;"	f	class:Dynamic_Manager
Mapcoord2GlobalCoord	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::Mapcoord2GlobalCoord(const vector<int>& _Mapcoord, vector<double>& GlobalCoord)$/;"	f	class:MDPManager
NAVIGATION_H	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	2;"	d
Navigation	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^class Navigation: public DSPOMDP {$/;"	c	namespace:despot
NavigationBelief	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^class NavigationBelief: public ParticleBelief {$/;"	c	namespace:despot
NavigationState	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^class NavigationState: public State {$/;"	c	namespace:despot
Navigation_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	const Navigation* Navigation_;$/;"	m	class:despot::NavigationBelief
NotUpdatedCameraregion	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::NotUpdatedCameraregion(int idx)$/;"	f	class:Dynamic_Manager
NumActions	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	inline int NumActions() const {$/;"	f	class:despot::Navigation
Passable	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	bool Passable(const Coord& pos) const {$/;"	f	class:despot::Navigation
Publish_beliefmap	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::Publish_beliefmap()$/;"	f	class:Dynamic_Manager
Publish_filter_measurment	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::Publish_filter_measurment(int measurement_type)$/;"	f	class:Dynamic_Manager
ReachGoal	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	bool ReachGoal;$/;"	m	class:despot::Navigation
StateVec_Sub	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^    ros::Subscriber  StateVec_Sub;$/;"	m	class:despot::Navigation
Stateid_pub	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	ros::Publisher	 Stateid_pub; 	$/;"	m	class:despot::Navigation
States_Pub	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	ros::Publisher   States_Pub;$/;"	m	class:despot::Navigation
action_cmd	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^    std_msgs::Int32  action_cmd;$/;"	m	class:despot::Navigation
base_pose_callback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::base_pose_callback(const nav_msgs::Odometry::ConstPtr& msg)$/;"	f	class:MDPManager
chase_prob_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double chase_prob_, defensive_slip_;$/;"	m	class:despot::Navigation
checkNoBoundary	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::checkNoBoundary(vector<int> cur_pos)$/;"	f	class:Dynamic_Manager
checkNoBoundary	navi_mdp/src/MDPmanager.cpp	/^bool MDPManager::checkNoBoundary(vector<int> cur_pos)$/;"	f	class:MDPManager
checkObs	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::checkObs(int cur_stid,int actionNum)$/;"	f	class:Dynamic_Manager
checkObs	navi_mdp/src/MDPmanager.cpp	/^bool MDPManager::checkObs(int cur_stid,int actionNum)$/;"	f	class:MDPManager
checkStaticObs	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::checkStaticObs(vector<int> cur_pos)$/;"	f	class:Dynamic_Manager
checkStaticObs	navi_mdp/src/MDPmanager.cpp	/^bool MDPManager::checkStaticObs(vector<int> cur_pos)$/;"	f	class:MDPManager
check_cameraregion	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::check_cameraregion(float x_pos,float y_pos)$/;"	f	class:Dynamic_Manager
costmapvec	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<float> costmapvec;$/;"	m	class:despot::Navigation
default_action_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<int> default_action_;$/;"	m	class:despot::Navigation
defensive_slip_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double chase_prob_, defensive_slip_;$/;"	m	class:despot::Navigation
despot	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^namespace despot {$/;"	n
dynamic_mapCallback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::dynamic_mapCallback(const nav_msgs::OccupancyGrid::ConstPtr& msg)$/;"	f	class:Dynamic_Manager
dynamic_mapCallback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::dynamic_mapCallback(const nav_msgs::OccupancyGrid::ConstPtr& msg)$/;"	f	class:MDPManager
eyecontact	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<int> eyecontact;$/;"	m	class:despot::NavigationState
featureVector	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^    std_msgs::Float32MultiArray featureVector;$/;"	m	class:despot::Navigation
filter_result_callback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::filter_result_callback(const people_msgs::PositionMeasurement::ConstPtr& msg)$/;"	f	class:Dynamic_Manager
filterhumanbelief	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::filterhumanbelief()$/;"	f	class:Dynamic_Manager
generatePath	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::generatePath()$/;"	f	class:Dynamic_Manager
generatePath	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::generatePath()$/;"	f	class:MDPManager
generate_dynamicPath	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::generate_dynamicPath()$/;"	f	class:Dynamic_Manager
generate_dynamicPath	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::generate_dynamicPath()$/;"	f	class:MDPManager
getCameraregion	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::getCameraregion()$/;"	f	class:Dynamic_Manager
getMaxValueAction	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::getMaxValueAction(int x_pos, int y_pos,map<int,double>& maxmap)$/;"	f	class:Dynamic_Manager
getMaxValueAction	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::getMaxValueAction(int x_pos, int y_pos,map<int,double>& maxmap)$/;"	f	class:MDPManager
getPolicychar	navi_mdp/src/Dynamic_Manager.cpp	/^char Dynamic_Manager::getPolicychar(int policyidx)$/;"	f	class:Dynamic_Manager
getPolicychar	navi_mdp/src/MDPmanager.cpp	/^char MDPManager::getPolicychar(int policyidx)$/;"	f	class:MDPManager
getactionvalue	navi_mdp/src/Dynamic_Manager.cpp	/^double Dynamic_Manager::getactionvalue(int x_pos, int y_pos, int action_ix)$/;"	f	class:Dynamic_Manager
getactionvalue	navi_mdp/src/MDPmanager.cpp	/^double MDPManager::getactionvalue(int x_pos, int y_pos, int action_ix)$/;"	f	class:MDPManager
getdistance	navi_mdp/src/Dynamic_Manager.cpp	/^double Dynamic_Manager::getdistance(vector<double> cur, vector<double> goal)$/;"	f	class:Dynamic_Manager
getdistance	navi_mdp/src/MDPmanager.cpp	/^double MDPManager::getdistance(vector<double> cur, vector<double> goal)$/;"	f	class:MDPManager
getlinevalue	navi_mdp/src/Dynamic_Manager.cpp	/^bool Dynamic_Manager::getlinevalue(int line_type,double input_x, double input_y)$/;"	f	class:Dynamic_Manager
getneighboractionset	navi_mdp/src/Dynamic_Manager.cpp	/^vector<int> Dynamic_Manager::getneighboractionset(int action_idx)$/;"	f	class:Dynamic_Manager
getneighboractionset	navi_mdp/src/MDPmanager.cpp	/^vector<int> MDPManager::getneighboractionset(int action_idx)$/;"	f	class:MDPManager
global_pose_callback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::global_pose_callback(const geometry_msgs::PoseStamped::ConstPtr& msg)$/;"	f	class:Dynamic_Manager
global_pose_callback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::global_pose_callback(const geometry_msgs::PoseStamped::ConstPtr& msg)$/;"	f	class:MDPManager
goal_pos	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	Coord goal_pos;$/;"	m	class:despot::NavigationState
goal_pos_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int goal_pos_, trap_pos_;$/;"	m	class:despot::Navigation
human_leg_callback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::human_leg_callback(const geometry_msgs::PoseArray::ConstPtr& msg)$/;"	f	class:MDPManager
joint_states_callback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::joint_states_callback(const sensor_msgs::JointState::ConstPtr& msg)$/;"	f	class:Dynamic_Manager
localmap	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	Grid<int> localmap;$/;"	m	class:despot::Navigation
m_Beliefout	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::ofstream m_Beliefout;$/;"	m	class:despot::Navigation
m_fileout	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::ofstream m_fileout;$/;"	m	class:despot::Navigation
m_xsize	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int m_xsize, m_ysize;$/;"	m	class:despot::Navigation
m_ysize	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int m_xsize, m_ysize;$/;"	m	class:despot::Navigation
mdppath_callback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::mdppath_callback(const nav_msgs::Path::ConstPtr & msg)$/;"	f	class:Dynamic_Manager
memory_pool_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	mutable MemoryPool<NavigationState> memory_pool_;$/;"	m	class:despot::Navigation
node	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	ros::NodeHandle node;$/;"	m	class:despot::Navigation
num_particles	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	static int num_particles;$/;"	m	class:despot::NavigationBelief
num_peds_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int num_peds_, passage_y_, pedes_range_;$/;"	m	class:despot::Navigation
obs_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<OBS_TYPE> obs_;		 \/\/ obs_[y * xsize_ + x]$/;"	m	class:despot::Navigation
passage_y_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int num_peds_, passage_y_, pedes_range_;$/;"	m	class:despot::Navigation
pathPublish	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::pathPublish(){$/;"	f	class:Dynamic_Manager
pathPublish	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::pathPublish(){$/;"	f	class:MDPManager
path_index	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int path_index;$/;"	m	class:despot::Navigation
ped_dir	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<int>   ped_dir;$/;"	m	class:despot::NavigationState
ped_path1	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<Coord> ped_path1;$/;"	m	class:despot::Navigation
ped_pathdir	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<int> ped_pathdir;	$/;"	m	class:despot::Navigation
ped_pos	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<Coord> ped_pos;$/;"	m	class:despot::NavigationState
pedes_range_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int num_peds_, passage_y_, pedes_range_;$/;"	m	class:despot::Navigation
printPath	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::printPath()$/;"	f	class:Dynamic_Manager
printPath	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::printPath()$/;"	f	class:MDPManager
publishZeropaths	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::publishZeropaths()$/;"	f	class:Dynamic_Manager
publishZeropaths	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::publishZeropaths()$/;"	f	class:MDPManager
publish_cameraregion	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::publish_cameraregion()$/;"	f	class:Dynamic_Manager
publish_filtered_human_boxes	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::publish_filtered_human_boxes()$/;"	f	class:Dynamic_Manager
publish_viewpointTarget	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::publish_viewpointTarget(){$/;"	f	class:Dynamic_Manager
publishpaths	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::publishpaths()$/;"	f	class:Dynamic_Manager
publishpaths	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::publishpaths()$/;"	f	class:MDPManager
put_human_occ_map_leg	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::put_human_occ_map_leg()$/;"	f	class:Dynamic_Manager
put_human_occ_map_yolo	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::put_human_occ_map_yolo()$/;"	f	class:Dynamic_Manager
put_human_surrounding_beliefmap	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::put_human_surrounding_beliefmap(int idx, double value)$/;"	f	class:Dynamic_Manager
reward_collision_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_stop;$/;"	m	class:despot::Navigation
reward_default_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_stop;$/;"	m	class:despot::Navigation
reward_goal	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_stop;$/;"	m	class:despot::Navigation
reward_static_obs_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_stop;$/;"	m	class:despot::Navigation
reward_stop	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	double reward_goal, reward_default_, reward_collision_,reward_static_obs_, reward_stop;$/;"	m	class:despot::Navigation
robot_path	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<Coord> robot_path;$/;"	m	class:despot::Navigation
robot_pos	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	Coord robot_pos;$/;"	m	class:despot::NavigationState
setDesiredHeading	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::setDesiredHeading(double _heading)$/;"	f	class:Dynamic_Manager
setDesiredHeading	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::setDesiredHeading(double _heading)$/;"	f	class:MDPManager
setDynamicObs	navi_mdp/src/Dynamic_Manager.cpp	/^ void Dynamic_Manager::setDynamicObs(const vector<int> dynamic_obs){$/;"	f	class:Dynamic_Manager
setDynamicObs	navi_mdp/src/MDPmanager.cpp	/^ void MDPManager::setDynamicObs(const vector<int> dynamic_obs){$/;"	f	class:MDPManager
setGoalConfig	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::setGoalConfig( const vector<int> _Goal )$/;"	f	class:Dynamic_Manager
setGoalConfig	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::setGoalConfig( const vector<int> _Goal )$/;"	f	class:MDPManager
setHumanObs	navi_mdp/src/Dynamic_Manager.cpp	/^ void Dynamic_Manager::setHumanObs(const vector<int> humans){$/;"	f	class:Dynamic_Manager
setHumanObs	navi_mdp/src/MDPmanager.cpp	/^ void MDPManager::setHumanObs(const vector<int> humans){$/;"	f	class:MDPManager
setPMapParam	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::setPMapParam(MapParam* _pMapParam)$/;"	f	class:Dynamic_Manager
setPMapParam	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::setPMapParam(MapParam* _pMapParam)$/;"	f	class:MDPManager
setStartConfig	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::setStartConfig( const vector<int> _Start)$/;"	f	class:Dynamic_Manager
setStartConfig	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::setStartConfig( const vector<int> _Start)$/;"	f	class:MDPManager
setStaticObs	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::setStaticObs(const vector<int> static_obs)$/;"	f	class:Dynamic_Manager
setStaticObs	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::setStaticObs(const vector<int> static_obs)$/;"	f	class:MDPManager
setViewpointTarget	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::setViewpointTarget(const std::vector<double> pos)$/;"	f	class:Dynamic_Manager
set_dynamicPath	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::set_dynamicPath()$/;"	f	class:Dynamic_Manager
setpub_path	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::setpub_path()$/;"	f	class:MDPManager
setstaticGoal	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::setstaticGoal()$/;"	f	class:MDPManager
smell_range_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int smell_range_;$/;"	m	class:despot::Navigation
states_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<NavigationState*> states_;$/;"	m	class:despot::Navigation
static_mapCallback	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::static_mapCallback(const nav_msgs::OccupancyGrid::ConstPtr& msg)$/;"	f	class:Dynamic_Manager
static_mapCallback	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::static_mapCallback(const nav_msgs::OccupancyGrid::ConstPtr& msg)$/;"	f	class:MDPManager
stepSize	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int stepSize;				\/\/velocity$/;"	m	class:despot::NavigationState
transition_probabilities_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<std::vector<std::vector<State> > > transition_probabilities_; \/\/state, action, [state, weight]$/;"	m	class:despot::Navigation
trap_pos_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	int goal_pos_, trap_pos_;$/;"	m	class:despot::Navigation
trap_prob_	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	std::vector<double> trap_prob_;      \/\/ trap_prob_[y * xsize_ + x]$/;"	m	class:despot::Navigation
updateMap	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::updateMap(vector<int>& localmap_, vector<int>& local_start, vector<int>& local_goal)$/;"	f	class:Dynamic_Manager
updateMap	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::updateMap(vector<int>& localmap_, vector<int>& local_start, vector<int>& local_goal)$/;"	f	class:MDPManager
updateUprimePi	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::updateUprimePi(int state_id)$/;"	f	class:Dynamic_Manager
updateUprimePi	navi_mdp/src/MDPmanager.cpp	/^void MDPManager::updateUprimePi(int state_id)$/;"	f	class:MDPManager
update_human_occ_belief_scan	navi_mdp/src/Dynamic_Manager.cpp	/^void Dynamic_Manager::update_human_occ_belief_scan()$/;"	f	class:Dynamic_Manager
~Dynamic_Manager	navi_mdp/src/Dynamic_Manager.cpp	/^Dynamic_Manager::~Dynamic_Manager()$/;"	f	class:Dynamic_Manager
~MDPManager	navi_mdp/src/MDPmanager.cpp	/^MDPManager::~MDPManager()$/;"	f	class:MDPManager
~Navigation	despot/examples/cpp_models/pathfollowing/src/pathfollowing.h	/^	~Navigation(){m_fileout.close();}$/;"	f	class:despot::Navigation
